/*
 Navicat Premium Data Transfer

 Source Server         : MySql
 Source Server Type    : MySQL
 Source Server Version : 80028
 Source Host           : localhost:3306
 Source Schema         : test

 Target Server Type    : MySQL
 Target Server Version : 80028
 File Encoding         : 65001

 Date: 07/06/2022 18:39:58
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for article
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `title` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL,
  `viewCount` int NULL DEFAULT 0,
  `createdAt` datetime NULL DEFAULT NULL,
  `updatedAt` datetime NULL DEFAULT NULL,
  `type` tinyint NULL DEFAULT 1,
  `top` tinyint NULL DEFAULT 0,
  `uuid` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 95 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of article
-- ----------------------------
INSERT INTO `article` VALUES (-1, '关于页面', '关于页面存档，勿删', 1486, '2019-09-19 14:00:22', '2022-06-06 18:42:27', 1, 0, 'b6f774ae6ccf4d6cbbf7f62b2b208b2f');
INSERT INTO `article` VALUES (1, 'mysql - 数据库操作和数据属性', '## 数据库操作\n\n启动 `mysql`, `mac` 可通过 `brew` 安装 `mysql` 后启动。 `window` 需要手动配置\n\n```js\n// mac\nmysql.server start\n\n// window\nnet start mysql\n\n// 登录 -u 用户名 root 超级用户 -p 密码\nmysql -uroot -p\n\n// 退出\nmysql > \\q\n\n// 切换到 learn 数据库\nmysql > use learn\n```\n<!--more-->\n\nMySQL 语句规范\n\n- 关键字与函数名称全部大写\n- 数据库名称，表名称，字段名称全部小写\n- SQL 语句必须以分号结尾\n\n```js\n// 创建数据库 默认编码 utf-8\nCREATE DATABASE IF NOT EXISTS t1;\n\n// 创建 gbk 编码的数据库\nCREATE DATABASE IF NOT EXISTS t2 CHARACTER SET gbk;\n\n//显示创建数据库 t1 的指令\nSHOW CREATE DATABASE t1;\n\n// 查看数据库\nSHOW DATABASES;\n\n// 删除数据库\nDROP DATABASE IF EXISTS t1;\n```\n\n## 数据类型\n\n### 整型\n\n| MySQL 数据类型 | 含义     | （有符号）                   |\n| -------------- | -------- | ---------------------------- |\n| tinyint(m)     | 1 个字节 | 范围(-128~127)               |\n| smallint(m)    | 2 个字节 | 范围(-32768~32767)           |\n| mediumint(m)   | 3 个字节 | 范围(-8388608~8388607)       |\n| int(m)         | 4 个字节 | 范围(-2147483648~2147483647) |\n| bigint(m)      | 8 个字节 | 范围(+-9.22\\*10 的 18 次方)  |\n\n比如我们存储年龄，范围为 0-100 ，此时我们可以使用 `TINYINT` 存储\n\n\n### 浮点型(float和double)\n\n| MySQL数据类型 | 含义                                           |\n| ------------- | ---------------------------------------------- |\n| float(m,d)    | 单精度浮点型 8位精度(4字节)  m总个数，d小数位  |\n| double(m,d)   | 双精度浮点型 16位精度(8字节)  m总个数，d小数位 |\n\n设一个字段定义为float(6,3)，如果插入一个数123.45678,实际数据库里存的是123.457，但总个数还以实际为准，即6位。整数部分最大是3位，如果插入数12.123456，存储的是12.1234，如果插入12.12，存储的是12.1200.\n\n\n### 字符串(char,varchar,_text)\n\n| MySQL数据类型 | 含义                            |\n| ------------- | ------------------------------- |\n| char(n)       | 固定长度，最多255个字符         |\n| varchar(n)    | 固定长度，最多65535个字符       |\n| tinytext      | 可变长度，最多255个字符         |\n| text          | 可变长度，最多65535个字符       |\n| mediumtext    | 可变长度，最多2的24次方-1个字符 |\n| longtext      | 可变长度，最多2的32次方-1个字符 |\n\n\n`char`和`varchar`：\n\n1.`char(n)` 若存入字符数小于n，则以空格补于其后，查询之时再将空格去掉。所以char类型存储的字符串末尾不能有空格，`varchar`不限于此。 \n\n2.`char(n)` 固定长度，char(4)不管是存入几个字符，都将占用4个字节，`varchar`是存入的实际字符数+1个字节（n<=255）或2个字节(n>255)，\n\n所以`varchar`(4),存入3个字符将占用4个字节。 \n\n\n3.char类型的字符串检索速度要比`varchar`类型的快。\n`varchar`和`text`： \n\n1.`varchar`可指定n，`text`不能指定，内部存储`varchar`是存入的实际字符数+1个字节（n<=255）或2个字节(n>255)，`text`是实际字符数+2个字\n\n节。 \n\n2.`text`类型不能有默认值。 \n\n3.`varchar`可直接创建索引，`text`创建索引要指定前多少个字符。`varchar`查询速度快于`text`,在都创建索引的情况下，`text`的索引似乎不起作用。\n\n \n\n5.二进制数据(_Blob)\n\n1._BLOB和_text存储方式不同，_TEXT以文本方式存储，英文存储区分大小写，而_Blob是以二进制方式存储，不分大小写。\n\n2._BLOB存储的数据只能整体读出。 \n\n3._TEXT可以指定字符集，_BLO不用指定字符集。\n\n### 日期时间类型\n\n| MySQL数据类型 | 含义                          |\n| ------------- | ----------------------------- |\n| date          | 日期 \'2008-12-2\'              |\n| time          | 时间 \'12:25:36\'               |\n| datetime      | 日期时间 \'2008-12-2 22:06:44\' |\n| timestamp     | 自动存储记录修改时间          |\n\n## 数据类型的属性\n\n| MySQL关键字        | 含义                     |\n| ------------------ | ------------------------ |\n| NULL               | 数据列可包含NULL值       |\n| NOT NULL           | 数据列不允许包含NULL值   |\n| DEFAULT            | 默认值                   |\n| PRIMARY KEY        | 主键                     |\n| AUTO_INCREMENT     | 自动递增，适用于整数类型 |\n| UNSIGNED           | 无符号                   |\n| CHARACTER SET name | 指定一个字符集           |', 19, '2019-02-11 12:19:35', '2020-01-14 18:39:19', 1, 0, '50b20943c1944e05bb242660e0205e62');
INSERT INTO `article` VALUES (2, 'mysql - 对 table 的操作', '## 创建表\n\n```sql\nmysql.server start // net start mysql\n\nmysql -uroot -p // login\n\nuse test // 进入数据库\n\nCREATE TABLE [IF NOT EXISTS] table_name (\n  column_name data_type,\n  // ...\n)\n```\n<!--more-->\n\n### demo1 \n\n创建 `tb1` 表\n\n```sql\nCREATE TABLE IF NOT EXISTS tb1 (\n  username VARCHAR(20) NOT NULL,\n  age TINYINT UNSIGNED,\n  salary FLOAT(8, 2) UNSIGNED\n);\n\nSHOIW TABLES; --查看数据库中的表\n\nSHOW COLUMNS FROM tb1; --查看数据表中的结构\n```\n\n| Field | Type  | Null | Key | Default | Extra |\n| :---: | :---: |:--: | :-: | :-----: | :---: |\n| username |     varchar(20)     | YES  |     |  null   |       |\n|   age    | tinyint(3) unsigned | YES  |     |  null   |       |\n|  salary  | float(8,2) unsigned | YES  |     |  null   |       |\n\n- username: 用户的名字往往是字符型，字符数据量小，所以数据类型定为 `VARCHAR(20)`, `NOT NULL` 不能为空\n- age: 年龄不能为负值且为整型，数据类型定为 `TINYINT`\n- salary: `FLOAT(8, 2)` 整数八位 - 小数有两位，非负值\n\n### demo2\n\n```sql\nCREATE TABLE IF NOT EXISTS tb3(\n  id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n  username VARCHAR(20) NOT NULL UNIQUE KEY,\n  sex ENUM (\'1\',\'2\',\'3\') DEFAULT \'3\'\n);\n\n-- AUTO_INCREMENT: 自增字段，必须为主键 `PRIMARY KEY`，保证记录的唯一性.\n-- UNIQUE KEY: 唯一\n-- DEFAULT: 默认\n```\n\n\n| Field | Type  | Null | Key | Default | Extra |\n| :---: | :---: |:--: | :-: | :-----: | :------------: |\n|    id    |    smallint(5)    |  NO  | PRI |  null   | auto_increment |\n| username |    varchar(20)    |  NO  |     |  null   |                |\n|   sex    | enum(\'1\',\'2\',\'3\') | YES  |     |    3    |                |\n\n\n## 约束\n\n- 约束保证数据的完整性和一致性。\n- 约束表现为表级约束和列级约束。\n- 约束类型包括\n  - `NOT NULL` 非空\n  - `PRIMARY KEY` 主键\n  - `UNIQUE` 唯一\n  - `DEFAULT` 默认\n  - `FOREIGN KEY` 外键 (foreign key)\n\n> 外键约束：保持数据一致性，完整性，实现一对多或者多对一的关系\n\n> 表级约束：针对两个或者两个以上的字段来使用\n\n> 列级约束：只针对某一个字段来使用\n\n### 外键约束\n\n1.  父表和子表必须使用相同的存储引擎，而且禁止使用临时表\n2.  数据表的存储引擎只能为 InnoDB\n3.  外键列和参照列必须具有相似的数据类型。其中数字的长度或是否有符号位必须相同；而字符的长度则可以不同。\n4.  外键列和参照列必须创建索引。如果外键列不存在索引的话，MySQL 将自动创建索引。\n\n```sql\n-- 身份表\nCREATE TABLE IF NOT EXISTS provinces (\n  id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,\n  pname VARCHAR(20) NOT NULL\n);\n\n-- 用户表\nCREATE TABLE IF NOT EXISTS users (\n   id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,\n   username VARCHAR(10) NOT NULL,\n   pid SMALLINT UNSIGNED,\n   FOREIGN KEY(pid) REFERENCES provinces(id) -- 设置 pid 外键 references provinces 表的 id\n);\n\n-- 外键列和参照列必须具有相似的数据类型: pid BIGINT， 是创建不成功的。保证数据类型相同是第一步\n-- 数字的长度或是否有符号位必须相同：pid SMALLINT, 同样创建不成功。有符号位位必须相同。pid SMALLINT UNSIGNED 就满足条件了\n-- 外键列和参照列必须创建索引:, 我们没有创建，MySQL 自动创建了索引。\n\n-- 主键在创建的同时，会自动创建索引。\nSHOW INDEXES FROM provinces\\G; -- Seq_in_index: 1\n```\n\n1. 我们创建了父表 `provinces`, 子表 `users`\n2. 外键列：pid , 参照列 id\n\n\n## 对 table column 的操作\n\n列的增加、删除，约束的添加、约束的删除。\n\n```sql\n-- 添加单列\nalter table tbl_name add [column] col_name col_difinition[first|after col_name]\n\n-- 解释：first 插入第一列，after col_name 插入某一列后面。省略不写，加在最后列\n\n-- 添加多列\nalter table tbl_name add [column] (col_name col_difinition,...)\n\n-- 删除列\nalter table tbl_name drop[column] col_name1,col_name2;\n\n\n-- demo\nALTER TABLE users ADD age TINYINT NOT NULL DEFAULT 10;\nALTER TABLE users ADD password VARCHAR(32) NOT NULL AFTER username;\nALTER TABLE users DROP password, DROP username;\n```\n\n```sql\n-- 修改数据表【添加或删除约束】：\n\nALTER TABLE table_name ADD [CONSTRAINT [symbol]] PRIMARY KEY [index_type](index_col_name,...) -- 这是添加主键约束(只能有一个)\n\nALTER TABLE table_name ADD [CONSTRAINT [symbol]] UNIQUE [INDEX/KEY] [index_name] [index_type] (index_col_name,...); --这是添加唯一约束(可以有多个)\n\nALTER TABLE table_name ADD [CONSTRAINT [symbol]] FOREIGN KEY [index_name] (index_col_name,...) reference_definition; --这是添加外键约束(可以有多个)\n\nALTER TABLE table_name ALTER [COLUMN] col_name {SET DEFAULT literal(这个literal的意思是加上的default)/DROP DEFAULT} --添加或删除默认约束\n\nALTER TABLE table_name DROP PRIMARY KEY; -- 删除主键约束\n\nALTER TABLE table_name DROP {INDEX/KEY} index_name; --删除唯一约束\n\nALTER TABLE table_name DROP FOREIGN KEY fk_symbol; --删除外键约束\n\n\n-- demo\nCREATE TABLE IF NOT EXISTS users2 (\n  username VARCHAR(10) NOT NULL,\n  pid SMALLINT UNSIGNED\n);\n\nALTER TABLE users2 ADD id SMALLINT UNSIGNED;\n\n-- 添加主键约束\nALTER TABLE users2 ADD CONSTRAINT PRIMARY KEY(id);\n\n-- 添加唯一约束\nALTER TABLE users2 ADD UNIQUE (username);\n\n-- 添加外键\nALTER TABLE users2 ADD FOREIGN KEY (pid) REFERENCES provinces (id);\n\n-- 添加默认约束\nALTER TABLE users2 ADD age TINYINT UNSIGNED NOT NULL;\n\nALTER TABLE users2 ALTER age SET DEFAULT 22;\n\n-- 删除默认约束\nALTER TABLE users2 ALTER age DROP DEFAULT;\n\n-- 删除主键约束\nALTER TABLE users2 DROP PRIMARY KEY;\n\n-- 删除唯一约束\nALTER TABLE users2 DROP INDEX username;\n\n-- 删除外键约束\nSHOW CREATE TABLE users2 --  CONSTRAINT `users2_ibfk_1` FOREIGN KEY (`pid`) REFERENCES `provinces` (`id`)\n\nALTER TABLE users2 DROP FOREIGN key users2_ibfk_1;\n```', 10, '2019-02-11 12:21:15', '2019-12-16 07:20:22', 1, 0, '642e16d4667411ecbbb200163e30daad');
INSERT INTO `article` VALUES (3, 'mysql - column 的增删改查', '创建数据\n\n```sql\n-- DROP TABLE users; 创建过 users 表可以使用这个语句删除\n\n-- 创建表\nCREATE TABLE IF NOT EXISTS users(\n  id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(20) NOT NULL,\n  password VARCHAR(32) NOT NULL,\n  age TINYINT UNSIGNED NOT NULL DEFAULT 10,\n  sex TINYINT\n);\n```\n\n<!--more-->\n\n## 插入数据\n\n- INSERT INTO 表名 VALUE\n- INSERT INTO 表名 set 列名 = xxx (可以进行子查询)\n- INSERT INTO 表名 SELECT ,,,,,,, (将查询结果插入指定的表中)\n\n```sql\n-- 插入数据\nINSERT users VALUES (NULL, \'TOM\', \'1234\', 22, 1); -- 一个列都不能漏\n\n-- 插入多条数据\nINSERT users VALUES (NULL, \'TOM\', \'1234\', 22, 1), (DEFAULT, \'Jhon\', \'4321\', DEFAULT, 1);\n\n-- set方法 与第一种方式的区别是，此方法可以使用子查询，但是一次性只能插入一条记录。\nINSERT users SET username=\'BEN\',password=\'569\'; --其余字段有默认值或者允许为空\n```\n\n## 更新数据\n\nUPDATA 表名 SET 字段名=值|表达式 WHERE 判断条件 (如省略 where 筛选,则更新所有记录)\n\n```sql\nUPDATE users SET age = age + 5;\n\nUPDATE users SET age=age-id,sex=0;\n\nUPDATE users SET age=age+10 where id % 2 =0;\n```\n\n## 删除数据\n\n```sql\nDELETE FROM tbl_name [WHERE where_condition]\n```\n\n## 查找记录\n\n```sql\n查找记录：SELECT select_expr [,select_expr ……]\n[FROM table_referrnces [WHERE where_condition]\n[GROUP BY{col_name | position} [ASC | DESCI],……]\n[HAVING where_condition]\n[ORDER BY {col_name |expr |position} [ASC | DESCI],……]\n\n-- demo\nSELECT id, username FROM users;\n\n-- 别名\nSELECT id AS userId, username AS name FROM users;\n```\n\n### 查询分组\n\n```sql\nSELECT sex FROM users GROUP BY sex  -- 数据库多条记录会被合并，譬如这里只有 1, null\n```\n\n- 分组条件 [HAVING where_condotion]\n\n`having` 后的条件必须为聚合函数或者出现在 `select` 所选择的字段中。\n\n```sql\nSELECT sex FROM users GROUP BY sex -- 对所有记录分组\n\n-- 报错 having 后的条件必须为聚合函数或者出现在 select 所选择的字段中。\nSELECT sex FROM users GROUP by sex  having age>35;\n\nSELECT sex FROM users GROUP BY sex HAVING count(id) > 2;\n```\n\n- 排序\n\n```sql\n-- 首先按照age升序排列（asc），其次按照id降序排列（desc）\nSELECT * FROM users ORDER BY age,id DESC;\n```\n\n- 限制返回的数据的数量\n\n1. select \\_ from users limit 2 意思为从取前两条记录。\n2. select \\_ from users limit 3,2 意思为从第 4 条记录开始取两条，而不是从第三条记录开始。\n3. ...\n\n### 子查询与链接\n\n```SQL\nuse test;\n\nCREATE TABLE IF NOT EXISTS tb4(\n  goodsId SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,\n  goodsName VARCHAR(20) NOT NULL,\n  price FLOAT UNSIGNED\n);\n\nINSERT tb4 VALUES (NULL, \'goods1\', 12.8), (NULL, \'goods2\', 95.8), (NULL, \'goods3\', 15.8), (NULL, \'goods2\', 50.5);\n\n-- 查找平均值\nselect avg(price) from tb4;\n\n-- 对平均值四舍五入\nselect round(avg(price), 2) from tb4; -- 保留两位小数\n\n-- 使用比较\nselect goodsId, goodsName, price from tb4 where price >= 20;\n\n-- 查找大于平均价格的\nselect goodsId, goodsName, price from tb4 where price >= (select round(avg(price), 2) from tb4);\n```\n| 运算符/关键字 |  ANY   |  SOME  |  ALL   |\n| :-----------: | :----: | :----: | :----: |\n|     >、>=     | 最小值 | 最小值 | 最大值 |\n|     <、<=     | 最大值 | 最大值 | 最小值 |\n|       =       | 任意值 | 任意值 |        |\n|    <>、!=     |        |        | 任意值 |\n\n使用[NOT]EXISTS 的子查询：如果子查询返回任何行，EXISTS 将返回 TURE；否则返回 FALSE.\n\n```sql\nselect * from tb4 where price >= all (select round(avg(price), 2) from tb4); -- 任意大于平均价格的记录\n```\n\n\n## 数据增删改查-demo（单表）\n\n### INSERT\n\n```sql\nCREATE TABLE IF NOT EXISTS goods (\n  id SMALLINT PRIMARY KEY AUTO_INCREMENT,\n  name VARCHAR(20) NOT NULL,\n  price FLOAT UNSIGNED,\n  origin VARCHAR(20) DEFAULT \'CHINA\'\n);\n\n\n-- 插入单条记录\nINSERT goods VALUES(NULL, \'oppo\', 5399, DEFAULT);\n\n-- 插入多条记录\nINSERT goods VALUES(NULL, \'iphone\', 8999, \'US\'), (NULL, \'meizu\', 6999, DEFAULT);\n\n-- SET 插入\nINSERT goods SET name=\'xiaomi\', price=999;\n\n-- SET 插入多条\nINSERT INTO goods (goodsName, price) VALUES(\'ss\',25),(\'bb\',125);\n```\n\n### SELECT\n\n```sql\nSELECT * FROM goods;\n\nSELECT goodsName, price FROM goods;\n\nSELECT goodsName, price FROM goods WHERE price > 1000; -- 加条件筛选\n```\n\n### UPDATE\n\n```sql\n-- 找到 iphone , 修改名字为 iphonX, 价格 9999\nUPDATE goods SET goodsName=\'iphonX\', price=9999 WHERE goodsName=\'iphone\';\n```\n\n### DELETE\n\n```SQL\nDELETE FROM goods WHERE goodsName=\'ss\'; -- DELETE FROM goods 删除所有\n```\n\n多表有 `left join` 、 `inner` 等等，这里不再讲述。', 29, '2019-02-11 12:22:15', '2020-01-15 13:07:36', 1, 0, '642e1673667411ecbbb200163e30daad');
INSERT INTO `article` VALUES (4, ' mysql - 聚合函数', '## 聚合函数（aggregation function）\n\n> 聚合函数（`aggregation function`）---也就是组函数，在一个行的集合（一组行）上进行操作，对每个组给一个结果。\n\n常用的组函数：\n\n| function                     | return       |\n| ---------------------------- | ------------ |\n| AVG([distinct] expr)         | 求平均值     |\n| COUNT({*  [distinct] } expr) | 统计行的数量 |\n| MAX([distinct] expr)         | 求最大值     |\n| MIN([distinct] expr)         | 求最小值     |\n| SUM([distinct] expr)         | 求累加和     |\n\n<!-- more -->\n\n1. 每个组函数接收一个参数\n2. 默认情况下，组函数忽略列值为null的行，不参与计算\n3. 有时，会使用关键字distinct剔除字段值重复的条数\n\n注意：\n\n- 当使用组函数的 `select` 语句中没有 `group by` 子句时，中间结果集中的所有行自动形成一组，然后计算组函数；\n- 组函数不允许嵌套，例如：`count(max(…))`；\n- 组函数的参数可以是列或是函数表达式；\n- 一个 `SELECT` 子句中可出现多个聚集函数。\n\n\n```bash\nmysql> select * from users;\n+----+----------+------+---------------------+---------------------+\n| id | name     | age  | createdAt           | updatedAt           |\n+----+----------+------+---------------------+---------------------+\n|  1 | guodada  |   18 | 2019-10-04 05:56:52 | 2019-10-04 05:56:52 |\n|  2 | guodada2 |   18 | 2019-10-04 05:57:01 | 2019-10-04 05:57:01 |\n|  3 | guodada3 | NULL | 2019-10-04 05:58:00 | 2019-10-04 05:58:00 |\n+----+----------+------+---------------------+---------------------+\n3 rows in set (0.00 sec)\n```\n\n## count 函数\n\n① `count(*)`：返回表中满足 `where` 条件的行的数量\n\n```sql\nSELECT COUNT(*) AS count FROM users WHERE age > 10 -- count 3\n```\n\n② `count(列)`：返回列值非空的行的数量\n\n```sql\nSELECT COUNT(age) AS count FROM users -- count 2\n```\n\n③ `count(distinct 列)`：返回列值非空的、并且列值不重复的行的数量\n\n```sql\nSELECT COUNT(distinct age) AS count FROM users -- count 1\n```\n\n④ `count(expr)`：根据表达式统计数据\n\n```sql\nSELECT COUNT(age=18) AS count FROM users; -- count 2\n```\n\n## max 和 min 函数---统计列中的最大最小值\n\n```sql\nSELECT MAX(age) as maxAge FROM users -- maxAge 18\nSELECT MIN(age) as minAge FROM users -- minAge 18\n```\n\n> 注意：如果统计的列中只有 `NULL` 值，那么 `MAX` 和 `MIN` 就返回 `NULL`\n\n## sum 和 avg 函数---求和与求平均\n\n！！表中列值为 `null` 的行不参与计算\n\n```sql\nSELECT AVG(age) as avgAge FROM users -- avgAge 18\nSELECT SUM(age) as snmAge FROM users -- sumAge 36\n```\n\n注意：要想列值为 `NULL` 的行也参与组函数的计算，必须使用 `IFNULL` 函数对 `NULL` 值做转换。\n\n## 分组聚合查询\n\n分组 SELECT 的基本格式：\n\n`select [聚合函数] 字段名 from 表名 [where 查询条件] [group by 字段名] [having 过滤条件]`\n\n```bash\nmysql> select name, count(*) as count from users where age > 10 group by name;\n+----------+-------+\n| name     | count |\n+----------+-------+\n| guodada  |     1 |\n| guodada2 |     1 |\n+----------+-------+\n2 rows in set (0.00 sec)\n```\n\n通过 `select` 在返回集字段中，这些字段要么就要包含在 `group by` 语句后面，作为分组的依据，要么就要被包含在聚合函数中。我们可以将 `group by` 操作想象成如下的一个过程：首先系统根据 `select` 语句得到一个结果集，然后根据分组字段，将具有相同分组字段的记录归并成了一条记录。这个时候剩下的那些不存在与 `group by` 语句后面作为分组依据的字段就很有可能出现多个值，但是目前一种分组情况只有一条记录，一个数据格是无法放入多个数值的，所以这个时候就需要通过一定的处理将这些多值的列转化成单值，然后将其放在对应的数据格中，那么完成这个步骤的就是前面讲到的聚合函数，这也就是为什么这些函数叫聚合函数了。\n\n- [MySQL最常用分组聚合函数](https://www.cnblogs.com/geaozhang/p/6745147.html#sum-avg)', 6, '2019-02-11 12:24:26', '2019-11-27 00:58:06', 1, 0, '642e1627667411ecbbb200163e30daad');
INSERT INTO `article` VALUES (23, 'Sequelize - quick start', '在 `Node.js` 社区中，`sequelize` 是一个广泛使用的 `ORM` 框架，它支持 `MySQL`、`PostgreSQL`、`SQLite` 和 `MSSQL` 等多个数据源。\n\n> 有数据库基础或者使用过 `ORM` 操作数据库的经验会更容易上手哦，笔者这里用的以 `mysql` 为主\n\n## 安装\n\n```npm\nnpm i sequelize mysql2 --registry=https://registry.npm.taobao.org\n```\n\n记得提前启动 `mysql` 数据库，创建本例中使用的 `demo` 数据库\n\n```js\nmysql.server start // mac (windows net start mysql)\n\nmysql -uroot -p\n\nCREATE DATABASE IF NOT EXISTS demo;\n```\n<!--more-->\n\n## 建立连接\n\n`Sequelize` 将在初始化时设置连接池，所以如果从单个进程连接到数据库，你最好每个数据库只创建一个实例。 如果要从多个进程连接到数据库，则必须为每个进程创建一个实例，但每个实例应具有“最大连接池大小除以实例数”的最大连接池大小。\n因此，如果您希望最大连接池大小为 90，并且有 3 个工作进程，则每个进程的实例应具有 30 的最大连接池大小。\n\n```js\nconst sequelize = new Sequelize(\'database\', \'username\', \'password\', {\n  host: \'localhost\',\n  dialect: \'mysql\' | \'mariadb\' | \'sqlite\' | \'postgres\' | \'mssql\',\n\n  pool: {\n    max: 5,\n    min: 0,\n    idle: 10000\n  },\n\n  // 仅 SQLite 适用\n  storage: \'path/to/database.sqlite\'\n})\n\n// 或者可以简单的使用一个连接 uri\nconst sequelize = new Sequelize(\'postgres://user:pass@example.com:5432/dbname\')\n```\n\n## 测试连接\n\n您可以使用 `.authenticate()` 函数来测试连接。\n\n```js\nsequelize\n  .authenticate()\n  .then(() => {\n    console.log(\'Connection has been established successfully.\')\n  })\n  .catch(err => {\n    console.error(\'Unable to connect to the database:\', err)\n  })\n```\n\n## model\n\n`Sequelize` 使用 `define` 方法定义模型和表之间的映射。大白话就是 我们可以通过 `model` 去建立表, 添加字段约束等。\n\n```js\nconst User = sequelize.define(\'user\', {\n  firstName: Sequelize.STRING\n  lastName: {\n    type: Sequelize.STRING\n  }\n})\n\n// 通过 sync 可以链接模型到数据库中\n// force: true 如果表已经存在，将会丢弃表\n// force 效果： DROP TABLE IF EXISTS `User` => CREATE TABLE IF NOT EXISTS `USER`...\nUser.sync({ force: true }).then(function() {\n  //...\n})\n```\n\n上面的代码执行后我们可以发现 `demo` 数据库中创建了一个 `users` 的表\n\n### model 操作数据库\n\ndemo 就简单创建数据和查询数据吧\n\n> `Sequelize` 使用 `Bluebird promise` 来控制异步控制流程。\n\n- 链式写法\n\n```js\nUser.sync({ force: true }).then(function() {\n  User.create({\n    firstName: \'John\',\n    lastName: \'Hancock\'\n  }).then(user => {\n    console.log(user.firstName, user.lastName) // John Hancock\n    User.findAll().then(users => {\n      console.log(\'you find: \', users[0][\'firstName\'], users[0][\'lastName\']) // you find:  John Hancock\n    })\n  })\n})\n```\n\n- `async/await` 写法\n\n```js\nUser.sync({ force: true }).then(async () => {\n  try {\n    const user = await User.create({ firstName: \'John\', lastName: \'Hancock\' })\n    const users = await User.findAll()\n    console.log(user.firstName, user.lastName) // John Hancock\n    console.log(\'you find: \', users[0][\'firstName\'], users[0][\'lastName\']) // you find:  John Hancock\n  } catch (err) {\n    console.log(err)\n  }\n})\n```\n\n## 完整 demo\n\n```js\nconst Sequelize = require(\'sequelize\')\n\n/**\n * @params (\'database\', \'username\', \'password\', options)\n */\nconst sequelize = new Sequelize(\'demo\', \'root\', \'123456\', {\n  host: \'localhost\', // 连接的 host 地址\n  dialect: \'mysql\', // 连接到 mysql\n  port: 3306, // 数据库服务器端口\n  pool: {\n    max: 5,\n    min: 0,\n    acquire: 30000,\n    idle: 10000\n  }\n})\n\nconst User = sequelize.define(\'user\', {\n  firstName: Sequelize.STRING,\n  lastName: {\n    type: Sequelize.STRING\n  }\n})\n\nsequelize\n  .authenticate()\n  .then(() => {\n    console.log(\'Connection has been established successfully\')\n    User.sync({ force: true }).then(async () => {\n      try {\n        const user = await User.create({ firstName: \'John\', lastName: \'Hancock\' })\n        const users = await User.findAll()\n        console.log(user.firstName, user.lastName) // John Hancock\n        console.log(\'you find: \', users[0][\'firstName\'], users[0][\'lastName\']) // you find:  John Hancock\n      } catch (err) {\n        console.log(err)\n      }\n    })\n  })\n  .catch(err => {\n    console.error(\'Unable to connect to the database:\', err)\n  })\n```\n\n- [sequelize - getting started](http://docs.sequelizejs.com/manual/installation/getting-started.html)\n- [sequelize - 中文版入门](https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/getting-started.md)', 13, '2019-02-11 12:40:42', '2020-01-19 10:06:49', 1, 0, '642e15bb667411ecbbb200163e30daad');
INSERT INTO `article` VALUES (24, 'Sequelize - model definition', '## Model definition - 模型定义\n\n`Sequelize` 使用 `define` 方法定义模型和表之间的映射，`Sequelize` 将默认添加 `createdAt` 和 `updatedAt` 属性。因此，您将能够知道数据库条目何时进入数据库以及最后一次更新时。\n`model` 定义格式为 `sequelize.define(\'name\', {attributes}, {configuration})：`\n\n```js\nconst User = sequelize.define(\'user\')\nUser.sync({ force: true })\n```\n\n上式代码在数据库中的执行命令为：\n\n```sql\nDROP TABLE IF EXISTS `users`;\n\nCREATE TABLE IF NOT EXISTS `users` (\n  `id` INTEGER NOT NULL auto_increment ,\n  `createdAt` DATETIME NOT NULL,\n  `updatedAt` DATETIME NOT NULL,\n  PRIMARY KEY (`id`)\n ) ENGINE=InnoDB;\n```\n<!--more-->\n\n### base demo\n\n```js\nconst Bar = sequelize.define(\'bar\', {})\n\nconst Foo = sequelize.define(\'foo\', {\n  id: {\n    type: Sequelize.INTEGER,\n    field: \'fooId\', // 存入数据库中的字段，model 中还是使用 id => foo.id\n    autoIncrement: true, // 是否自增\n    primaryKey: true // 是否为主键\n  },\n\n  age: {\n    type: Sequelize.INTEGER,\n    defaultValue: 18, // 默认值\n    allowNull: true, // 是否为空\n    unique: true, // 是否唯一\n    onUpdate: \'NO ACTION\', // 当被引用的键更新时的操作 String - 可选值是：[\'CASCADE\', \'RESTRICT\', \'SET DEFAULT\', \'SET NULL\', \'NO ACTION\']\n    onDelete: \'NO ACTION\', // 当被引用的键删除时的操作 String - 同上\n    // 验证器\n    validate: {\n      isNumeric: true, // 只允许数字\n      max: 100,\n      min: 1,\n      // 自定义验证\n      isEven(value) {\n        if (parseInt(value) % 2 != 0) {\n          throw new Error(\'Only even values are allowed!\')\n          // 我们也在模型的上下文中，所以如果它存在的话,\n          // this.otherField会得到otherField的值。\n        }\n      }\n    },\n\n    // getters 为列自定义一个访问器 使用this.getDataValue(String)时调用的值\n    get() {\n      const age = this.getDataValue(\'age\')\n      // 可以对该列进行操作...\n      return age\n    },\n\n    // setters 为列自定义一个设置器 使用this.setDataValue(String, Value)时调用的值\n    set(value) {\n      const newValue = value + 3\n      this.setDataValue(\'age\', newValue)\n    }\n  },\n\n  uId: {\n    type: Sequelize.INTEGER,\n    references: {\n      model: Bar, // 这是引用另一个模型\n      key: \'id\' // 引用的字段（注意是在数据中存在的字段名）比如引用 foos 表要引用 fooId 而不是 id\n    }\n  }\n})\n\nBar.sync().then(() => {\n  Foo.sync({ force: true }).then(async () => {\n    try {\n      const foo = await Foo.create({ age: 21 }) // 触发 setters\n      const foos = await Foo.findAll() // 触发 getters\n    } catch (err) {\n      console.log(err)\n    }\n  })\n})\n```\n\n上式代码在数据库中的执行命令为：\n\n```sql\nCREATE TABLE IF NOT EXISTS `bars` (\n  `id` INTEGER NOT NULL auto_increment ,\n  `createdAt` DATETIME NOT NULL,\n  `updatedAt` DATETIME NOT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB;\n\nDROP TABLE IF EXISTS `foos`;\n\nCREATE TABLE IF NOT EXISTS `foos` (\n  `fooId` INTEGER auto_increment ,\n  `age` INTEGER DEFAULT 18 UNIQUE,\n  `uId` INTEGER,\n  `createdAt` DATETIME NOT NULL,\n  `updatedAt` DATETIME NOT NULL,\n  PRIMARY KEY (`fooId`),\n  FOREIGN KEY (`uId`) REFERENCES `bars` (`id`)\n) ENGINE=InnoDB;\n\nINSERT INTO `foos` (`fooId`,`age`,`createdAt`,`updatedAt`) VALUES \n(DEFAULT,24,\'2019-01-03 07:34:12\',\'2019-01-03 07:34:12\');\n\nSELECT `fooId` AS `id`, `age`, `uId`, `createdAt`, `updatedAt` FROM `foos` AS `foo`;\n```\n\n## Attributes\n\n```js\nconst User = sequelize.define(\'user\', {\n  column: {\n    type: xxx,             // DataType或字符串，表示列的数据类型 【见下文】\n    allowNull: true,       // 是否设置 NOT NULL（非空）约束\n    defaultValue: xxx      // 默认值\n    unique: false,         // 设置为true时，会为列添加唯一约束\n    primaryKey: false,     // 指定是否是主键\n    field: xxx,            // String - 设置在数据库中的字段名。设置后会，Sequelize会将属性名映射到数据库中的不同名称\n    autoIncrement: false,  // 是否自增\n    references: {          // 引用对象\n      model: xxx,          // 如果列引用到另一个表，可以通过这个属性设置模型或字符串。\n      key: \'id\'            // 该列表示到表外键列的引用\n    }, \n    onUpdate: \'NO ACTION\', // 当被引用的键更新时的操作 String - 可选值是：[\'CASCADE\', \'RESTRICT\', \'SET DEFAULT\', \'SET NULL\', \'NO ACTION\']\n    onDelete: \'NO ACTION\', // 当被引用的键删除时的操作，可选值同上\n    get(){},               // 为列自定义一个访问器 使用this.getDataValue(String)时调用的值 【见下文】\n    set(value){},          // 为列自定义一个设置器 使用this.setDataValue(String, Value)时调用的值 【见下文】\n    validate: {}           // 模型每次保存时调用的验证对象。可是validator.js中的验证函数(参见 DAOValidator)、或自定义的验证函数 【见下文】\n  }\n})\n```\n\n## Attributes - DataTypes\n\n以下是 Sequelize 支持的一些数据类型。 有关完整和更新的列表, 参阅 [DataTypes](http://docs.sequelizejs.com/variable/index.html#static-variable-DataTypes).\n\n```js\nSequelize.STRING                      // VARCHAR(255)\nSequelize.STRING(1234)                // VARCHAR(1234)\nSequelize.STRING.BINARY               // VARCHAR BINARY\nSequelize.TEXT                        // TEXT\nSequelize.TEXT(\'tiny\')                // TINYTEXT\n\nSequelize.INTEGER                     // INTEGER\nSequelize.BIGINT                      // BIGINT\nSequelize.BIGINT(11)                  // BIGINT(11)\n\nSequelize.FLOAT                       // FLOAT\nSequelize.FLOAT(11)                   // FLOAT(11)\nSequelize.FLOAT(11, 12)               // FLOAT(11,12)\n\nSequelize.REAL                        // REAL         仅限于PostgreSQL.\nSequelize.REAL(11)                    // REAL(11)     仅限于PostgreSQL.\nSequelize.REAL(11, 12)                // REAL(11,12)  仅限于PostgreSQL.\n\nSequelize.DOUBLE                      // DOUBLE\nSequelize.DOUBLE(11)                  // DOUBLE(11)\nSequelize.DOUBLE(11, 12)              // DOUBLE(11,12)\n\nSequelize.DECIMAL                     // DECIMAL\nSequelize.DECIMAL(10, 2)              // DECIMAL(10,2)\n\nSequelize.DATE                        // DATETIME 针对 mysql / sqlite, TIMESTAMP WITH TIME ZONE 针对 postgres\nSequelize.DATE(6)                     // DATETIME(6) 针对 mysql 5.6.4+. 小数秒支持多达6位精度\nSequelize.DATEONLY                    // DATE 不带时间.\nSequelize.BOOLEAN                     // TINYINT(1)\n\nSequelize.ENUM(\'value 1\', \'value 2\')  // 一个允许具有 “value 1” 和 “value 2” 的 ENUM\nSequelize.ARRAY(Sequelize.TEXT)       // 定义一个数组。 仅限于 PostgreSQL。\nSequelize.ARRAY(Sequelize.ENUM)       // 定义一个 ENUM 数组. 仅限于 PostgreSQL。\n\nSequelize.JSON                        // JSON 列. 仅限于 PostgreSQL, SQLite and MySQL.\nSequelize.JSONB                       // JSONB 列. 仅限于 PostgreSQL .\n\nSequelize.BLOB                        // BLOB (PostgreSQL 二进制)\nSequelize.BLOB(\'tiny\')                // TINYBLOB (PostgreSQL 二进制. 其他参数是 medium 和 long)\n\nSequelize.UUID                        // PostgreSQL 和 SQLite 的 UUID 数据类型, CHAR(36) BINARY 针对于 MySQL (使用默认值: Sequelize.UUIDV1 或 Sequelize.UUIDV4 来让 sequelize 自动生成 ID)\n\nSequelize.CIDR                        // PostgreSQL 的 CIDR 数据类型\nSequelize.INET                        // PostgreSQL 的 INET 数据类型\nSequelize.MACADDR                     // PostgreSQL 的 MACADDR\n\nSequelize.RANGE(Sequelize.INTEGER)    // 定义 int4range 范围. 仅限于 PostgreSQL.\nSequelize.RANGE(Sequelize.BIGINT)     // 定义 int8range 范围. 仅限于 PostgreSQL.\nSequelize.RANGE(Sequelize.DATE)       // 定义 tstzrange 范围. 仅限于 PostgreSQL.\nSequelize.RANGE(Sequelize.DATEONLY)   // 定义 daterange 范围. 仅限于 PostgreSQL.\nSequelize.RANGE(Sequelize.DECIMAL)    // 定义 numrange 范围. 仅限于 PostgreSQL.\n\nSequelize.ARRAY(Sequelize.RANGE(Sequelize.DATE)) // 定义 tstzrange 范围的数组. 仅限于 PostgreSQL.\n\nSequelize.GEOMETRY                    // 空间列.  仅限于 PostgreSQL (具有 PostGIS) 或 MySQL.\nSequelize.GEOMETRY(\'POINT\')           // 具有几何类型的空间列.  仅限于 PostgreSQL (具有 PostGIS) 或 MySQL.\nSequelize.GEOMETRY(\'POINT\', 4326)     // 具有几何类型和SRID的空间列.  仅限于 PostgreSQL (具有 PostGIS) 或 MySQL.\n```\n\n## Attributes - getters/setters\n\n\n可以在模型上定义\'对象属性\' `getter` 和 `setter` 函数，这些可以用于映射到数据库字段的“保护”属性，也可以用于定义“伪”属性。\n\n`Getters` 和 `Setters` 可以通过两种方式定义（您可以混合使用这两种方式）：\n\n- 作为属性定义的一部分\n- 作为模型参数的一部分\n\n> 注意: 如果在两个地方定义了 `getter` 或 `setter`，那么在相关属性定义中找到的函数始终是优先的。\n\n### 定义为属性定义的一部分\n\n```js\nconst Employee = sequelize.define(\'employee\', {\n  name: {\n    type: Sequelize.STRING,\n    allowNull: false,\n    get() {\n      const title = this.getDataValue(\'title\')\n      // \'this\' 允许你访问实例的属性\n      return this.getDataValue(\'name\') + \' (\' + title + \')\'\n    }\n  },\n  title: {\n    type: Sequelize.STRING,\n    allowNull: false,\n    set(val) {\n      this.setDataValue(\'title\', val.toUpperCase())\n    }\n  }\n})\n\nEmployee.sync({ force: true }).then(() => {\n  Employee.create({ name: \'John Doe\', title: \'senior engineer\' }).then(employee => {\n    console.log(employee.get(\'name\')) // John Doe (SENIOR ENGINEER)\n    console.log(employee.get(\'title\')) // SENIOR ENGINEER\n  })\n})\n```\n\n### 定义为模型参数的一部分\n\n以下是在模型参数中定义 `getter` 和 `setter` 的示例。\n`fullName getter`，是一个说明如何在模型上定义伪属性的例子 - 这些属性实际上不是数据库模式的一部分。 事实上，伪属性可以通过两种方式定义：使用模型 `getter`，或者使用虚拟数据类型的列。 虚拟数据类型可以有验证，而虚拟属性的 `getter` 则不能。\n\n请注意，`fullName getter` 函数中引用的 `this.firstname` 和 `this.lastname` 将触发对相应 `getter` 函数的调用。 如果你不想那样使用`getDataValue()`方法来访问原始值（见下文）。\n\n```js\nconst Foo = sequelize.define(\n  \'foo\',\n  {\n    firstname: Sequelize.STRING,\n    lastname: Sequelize.STRING\n  },\n  {\n    getterMethods: {\n      fullName() {\n        return this.firstname + \' \' + this.lastname\n      }\n    },\n\n    setterMethods: {\n      fullName(value) {\n        const names = value.split(\' \')\n        this.setDataValue(\'firstname\', names.slice(0, -1).join(\' \'))\n        this.setDataValue(\'lastname\', names.slice(-1).join(\' \'))\n      }\n    }\n  }\n)\n\nFoo.sync({ force: true }).then(async () => {\n  try {\n    await Foo.create({ firstname: \'guo\', lastname: \'dada\' })\n    const Foos = await Foo.findAll()\n    console.log(Foos[0][\'fullName\']) // guo dada\n  } catch (err) {\n    console.log(err)\n  }\n})\n```\n\n## Attributes - Validations\n\n模型验证，允许您为模型的每个属性指定格式/内容/继承验证。\n\n验证会自动运行在 `create` ， `update` 和 `save` 上。 你也可以调用 `validate()` 手动验证一个实例。\n\n验证由 [validator.js](https://github.com/chriso/validator.js) 实现。\n\n```js\nconst ValidateMe = sequelize.define(\'foo\', {\n  foo: {\n    type: Sequelize.STRING,\n    validate: {\n      is: [\"^[a-z]+$\",\'i\'],     // 只允许字母\n      is: /^[a-z]+$/i,          // 与上一个示例相同,使用了真正的正则表达式\n      not: [\"[a-z]\",\'i\'],       // 不允许字母\n      isEmail: true,            // 检查邮件格式 (foo@bar.com)\n      isUrl: true,              // 检查连接格式 (http://foo.com)\n      isIP: true,               // 检查 IPv4 (129.89.23.1) 或 IPv6 格式\n      isIPv4: true,             // 检查 IPv4 (129.89.23.1) 格式\n      isIPv6: true,             // 检查 IPv6 格式\n      isAlpha: true,            // 只允许字母\n      isAlphanumeric: true,     // 只允许使用字母数字\n      isNumeric: true,          // 只允许数字\n      isInt: true,              // 检查是否为有效整数\n      isFloat: true,            // 检查是否为有效浮点数\n      isDecimal: true,          // 检查是否为任意数字\n      isLowercase: true,        // 检查是否为小写\n      isUppercase: true,        // 检查是否为大写\n      notNull: true,            // 不允许为空\n      isNull: true,             // 只允许为空\n      notEmpty: true,           // 不允许空字符串\n      equals: \'specific value\', // 只允许一个特定值\n      contains: \'foo\',          // 检查是否包含特定的子字符串\n      notIn: [[\'foo\', \'bar\']],  // 检查是否值不是其中之一\n      isIn: [[\'foo\', \'bar\']],   // 检查是否值是其中之一\n      notContains: \'bar\',       // 不允许包含特定的子字符串\n      len: [2,10],              // 只允许长度在2到10之间的值\n      isUUID: 4,                // 只允许uuids\n      isDate: true,             // 只允许日期字符串\n      isAfter: \"2011-11-05\",    // 只允许在特定日期之后的日期字符串\n      isBefore: \"2011-11-05\",   // 只允许在特定日期之前的日期字符串\n      max: 23,                  // 只允许值 <= 23\n      min: 23,                  // 只允许值 >= 23\n      isCreditCard: true,       // 检查有效的信用卡号码\n\n      // 也可以自定义验证:\n      isEven(value) {\n        if (parseInt(value) % 2 != 0) {\n          throw new Error(\'Only even values are allowed!\')\n          // 我们也在模型的上下文中，所以如果它存在的话, \n          // this.otherField会得到otherField的值。\n        }\n      }\n    }\n  }\n})\n```\n\n请注意，如果需要将多个参数传递给内置的验证函数，则要传递的参数必须位于数组中。 但是，如果要传递单个数组参数，例如isIn的可接受字符串数组，则将被解释为多个字符串参数，而不是一个数组参数。 要解决这个问题，传递一个单一长度的参数数组，比如`[[\'one\'，\'two\']]`。\n\n要使用自定义错误消息而不是 `validator.js` 提供的错误消息，请使用对象而不是纯值或参数数组，例如不需要参数的验证器可以被给定自定义消息:\n\n```js\nisInt: {\n  msg: \"Must be an integer number of pennies\"\n}\n```\n\n或者如果还需要传递参数，请添加一个 `args` 属性：\n\n```js\nisIn: {\n  args: [[\'en\', \'zh\']],\n  msg: \"Must be English or Chinese\"\n}\n```\n\n当使用自定义验证器函数时，错误消息将是抛出的 `Error` 对象所持有的任何消息。\n\n有关内置验证方法的更多详细信息，请参阅[the validator.js project](https://github.com/chriso/validator.js) 。\n\n### 验证器 与 allowNull\n\n如果模型的特定字段设置为允许null（使用 `allowNull：true` ），并且该值已设置为 `null` ，则其验证器不会运行。\n\n这意味着，您可以有一个字符串字段，该字段验证其长度至少为5个字符，但也允许为 `null`。\n\n你可以通过设置 `notNull` 验证器来自定义 `allowNull` 错误消息, 像这样\n\n```js\nconst User = sequelize.define(\'user\', {\n  name: {\n    type: Sequelize.STRING,\n    allowNull: false,\n    validate: {\n      notNull: {\n        msg: \'Please enter your name\'\n      }\n    }\n  }\n})\n```\n\n### 模型验证\n\n验证器也可以在特定字段验证器之后用来定义检查模型。例如，你可以确保纬度和经度都不设置，或者两者都设置，如果设置了一个而另一个未设置则验证失败。\n\n模型验证器方法与模型对象的上下文一起调用，如果它们抛出错误，则认为失败，否则通过。 这与自定义字段特定的验证器一样。\n\n所收集的任何错误消息都将与验证结果对象一起放在字段验证错误中，这个错误使用在 `validate` 参数对象中以失败的验证方法的键来命名。即便在任何一个时刻，每个模型验证方法只能有一个错误消息，它会在数组中显示为单个字符串错误，以最大化与字段错误的一致性。\n\n一个例子:\n\n```js\nconst Pub = Sequelize.define(\'pub\', {\n  name: { type: Sequelize.STRING },\n  address: { type: Sequelize.STRING },\n  latitude: {\n    type: Sequelize.INTEGER,\n    allowNull: true,\n    defaultValue: null,\n    validate: { min: -90, max: 90 }\n  },\n  longitude: {\n    type: Sequelize.INTEGER,\n    allowNull: true,\n    defaultValue: null,\n    validate: { min: -180, max: 180 }\n  },\n}, {\n  validate: {\n    bothCoordsOrNone() {\n      if ((this.latitude === null) !== (this.longitude === null)) {\n        throw new Error(\'Require either both latitude and longitude or neither\')\n      }\n    }\n  }\n})\n```\n\n在这种简单情况下，如果给定纬度或经度，而不是同时包含两者，则验证失败。 如果我们尝试构建一个超范围的纬度和经度，那么 `raging_bullock_arms.validate()` 可能会返回\n\n```js\n{\n  \'latitude\': [\'Invalid number: latitude\'],\n  \'bothCoordsOrNone\': [\'Require either both latitude and longitude or neither\']\n}\n```\n\n## configuration\n\n你还可以修改 `Sequelize` 处理列名称的方式：\n\n```js\nconst Bar = sequelize.define(\n  \'bar\',\n  {\n    /* bla */\n  },\n  {\n    // 不添加时间戳属性 (updatedAt, createdAt)\n    timestamps: false,\n\n    // 不删除数据库条目，但将新添加的属性deletedAt设置为当前日期（删除完成时）。\n    // paranoid 只有在启用时间戳时才能工作\n    paranoid: true,\n\n    // 将自动设置所有属性的字段选项为下划线命名方式。\n    // 不会覆盖已经定义的字段选项\n    underscored: true,\n\n    // 禁用修改表名; 默认情况下，sequelize将自动将所有传递的模型名称（define的第一个参数）转换为复数。 如果你不想这样，请设置以下内容\n    freezeTableName: true,\n\n    // 定义表的名称\n    tableName: \'my_very_custom_table_name\',\n\n    // 启用乐观锁定。 启用时，sequelize将向模型添加版本计数属性，\n    // 并在保存过时的实例时引发OptimisticLockingError错误。\n    // 设置为true或具有要用于启用的属性名称的字符串。\n    version: true\n  }\n)\n```\n\n如果你希望 `sequelize` 处理时间戳，但只想要其中一部分，或者希望您的时间戳被称为别的东西，则可以单独覆盖每个列：\n\n```js\nconst Foo = sequelize.define(\n  \'foo\',\n  {\n    /* bla */\n  },\n  {\n    // 不要忘记启用时间戳！\n    timestamps: true,\n\n    // 我不想要 createdAt\n    createdAt: false,\n\n    // 我想 updateAt 实际上被称为 updateTimestamp\n    updatedAt: \'updateTimestamp\',\n\n    // 并且希望 deletedAt 被称为 destroyTime（请记住启用paranoid以使其工作）\n    deletedAt: \'destroyTime\',\n    paranoid: true\n  }\n)\n```\n\n您也可以更改数据库引擎，例如 变更到到 `MyISAM`, 默认值是 `InnoDB`。\n\n```js\nconst Person = sequelize.define(\'person\', { /* attributes */ }, {\n  engine: \'MYISAM\'\n})\n\n// 或全局的\nconst sequelize = new Sequelize(db, user, pw, {\n  define: { engine: \'MYISAM\' }\n})\n```\n\n最后，您可以为 `MySQL` 和 `PG` 中的表指定注释\n\n```js\nconst Person = sequelize.define(\'person\', { /* attributes */ }, {\n  comment: \"I\'m a table comment!\"\n})\n```\n\n## 数据库同步\n\n\n当开始一个新的项目时，你还不会有一个数据库结构，并且使用 `Sequelize` 你也不需要它。 只需指定您的模型结构，并让库完成其余操作。 目前支持的是创建和删除表：\n\n```js\n// 创建表:\nProject.sync()\nTask.sync()\n\n// 强制创建!\nProject.sync({force: true}) // 这将先丢弃表，然后重新创建它\n\n// 删除表:\nProject.drop()\nTask.drop()\n\n// 事件处理:\nProject.[sync|drop]().then(() => {\n  // 好吧...一切都很好！\n}).catch(error => {\n  // oooh，你输入了错误的数据库凭据？\n})\n```\n\n因为同步和删除所有的表可能要写很多行，你也可以让 `Sequelize` 来为做这些：\n\n```js\n// 同步所有尚未在数据库中的模型\nsequelize.sync()\n\n// 强制同步所有模型\nsequelize.sync({force: true})\n\n// 删除所有表\nsequelize.drop()\n\n// 广播处理:\nsequelize.[sync|drop]().then(() => {\n  // woot woot\n}).catch(error => {\n  // whooops\n})\n```\n\n因为 `.sync({ force: true })` 是具有破坏性的操作，可以使用 `match` 参数作为附加的安全检查。\n\n`match` 参数可以通知 `Sequelize`，以便在同步之前匹配正则表达式与数据库名称 - 在测试中使用 `force：true` 但不使用实时代码的情况下的安全检查。\n\n```js\n// 只有当数据库名称以\'_test\'结尾时，才会运行.sync（）\nsequelize.sync({ force: true, match: /_test$/ });\n```\n\n## sequelize.import\n\n您还可以使用 `import` 方法将模型定义存储在单个文件中。 返回的对象与导入文件的功能中定义的完全相同。\n\n例如 `models/author.js`:\n\n```js\nmodule.exports = (sequelize, DataTypes) => {\n  return sequelize.define(\'author\', {\n    username: DataTypes.STRING(50)\n  })\n}\n```\n\n`app.js`\n\n```js\nconst AuthorModel = sequelize.import(\'./models/author.js\')\n\nAuthorModel.sync({ force: true }).then(async () => {\n  try {\n    const author = AuthorModel.findById(1)\n    console.log(author)\n  } catch (err) {\n    console.log(err)\n  }\n})\n```\n\n### 同时导入多个 model\n\n再建立多一个 model `models/article.js`\n\n```js\nmodule.exports = (sequelize, DataTypes) => {\n  return sequelize.define(\'article\', {\n    title: DataTypes.STRING(50),\n    content: DataTypes.STRING,\n    from: {\n      type: DataTypes.INTEGER,\n      references: {\n        model: \'authors\',\n        key: \'id\'\n      }\n    }\n  })\n}\n```\n\n`app.js`:\n\n```js\nconst fs = require(\'fs\')\nconst path = require(\'path\')\nconst Sequelize = require(\'sequelize\')\n\nconst MODELS_PATH = path.join(__dirname, \'models\')\n\nfs.readdirSync(MODELS_PATH).forEach(file => {\n  sequelize.import(path.join(MODELS_PATH, file))\n})\n\nsequelize.sync().then(() => {\n  const { author: AuthorModel, article } = sequelize.models\n  AuthorModel.create({ username: \'guodada\' }).then(author => {\n    console.log(author.username) // guodada\n  })\n})\n```\n\n## 扩展模型\n\n`Sequelize` 模型是ES6类。 您可以轻松添加自定义实例或类级别的方法。\n\n```js\nconst User = sequelize.define(\'user\', { firstname: Sequelize.STRING })\n\n// 添加一个类级别的方法\nUser.classLevelMethod = function() {\n  return \'foo\'\n}\n\n// 添加实例级别方法\nUser.prototype.instanceLevelMethod = function() {\n  return \'bar\'\n}\n```\n\n当然，您还可以访问实例的数据并生成虚拟的 getter:\n\n```js\nconst User = sequelize.define(\'user\', { firstname: Sequelize.STRING, lastname: Sequelize.STRING })\n\nUser.prototype.getFullname = function() {\n  return [this.firstname, this.lastname].join(\' \')\n}\n\n// 例子:\nUser.build({ firstname: \'foo\', lastname: \'bar\' }).getFullname() // \'foo bar\'\n```\n\n## 索引\n\n`Sequelize` 支持在 `Model.sync()` 或 `sequelize.sync` 中创建的模型定义中添加索引。\n\n```js\nsequelize.define(\n  \'user\',\n  {},\n  {\n    indexes: [\n      // 在 email 上创建一个唯一索引\n      {\n        unique: true,\n        fields: [\'email\']\n      },\n\n      // 在使用 jsonb_path_ops 的 operator 数据上创建一个 gin 索引\n      {\n        fields: [\'data\'],\n        using: \'gin\',\n        operator: \'jsonb_path_ops\'\n      },\n\n      // 默认的索引名将是 [table]_[fields]\n      // 创建多列局部索引\n      {\n        name: \'public_by_author\',\n        fields: [\'author\', \'status\'],\n        where: {\n          status: \'public\'\n        }\n      },\n\n      // 具有有序字段的BTREE索引\n      {\n        name: \'title_index\',\n        method: \'BTREE\',\n        fields: [\'author\', { attribute: \'title\', collate: \'en_US\', order: \'DESC\', length: 5 }]\n      }\n    ]\n  }\n)\n```\n\n## 相关\n\n- [models-definition](http://docs.sequelizejs.com/manual/tutorial/models-definition.html)\n- [models-definition 中文版](https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/models-definition.md)', 16, '2019-02-11 12:41:03', '2020-01-15 12:07:09', 1, 0, '642e1549667411ecbbb200163e30daad');
INSERT INTO `article` VALUES (25, 'Sequelize - 使用 model 查询数据', '`Sequelize` 中有两种查询：使用 `Model`（模型）中的方法查询和使用 `sequelize.query()` 进行基于 SQL 语句的原始查询。\n\n<!-- more -->\n\n下面是事先创建好的数据：\n\n```bash\nmysql> select * from users;\n+----+----------+------+------+-------+\n| id | name     | age  | sex  | score |\n+----+----------+------+------+-------+\n|  1 | guodada0 |   15 |    0 |    60 |\n|  2 | guodada1 |   16 |    1 |    80 |\n|  3 | guodada2 |   17 |    0 |    55 |\n|  4 | guodada3 |   18 |    1 |    87 |\n|  5 | guodada4 |   19 |    0 |    73 |\n|  6 | guodada5 |   20 |    1 |    22 |\n+----+----------+------+------+-------+\n6 rows in set (0.00 sec)\n```\n\n定义的 model\n\n```js\nconst UserModel = sequelize.define(\n  \'user\',\n  {\n    name: Sequelize.STRING,\n    age: Sequelize.INTEGER,\n    sex: Sequelize.INTEGER,\n    score: Sequelize.INTEGER\n  },\n  { timestamps: false }\n)\n```\n\n## 查询多项 (findAll)\n\n```js\nconst result = await UserModel.findAll() // result 将是所有 UserModel 实例的数组\n\n// the same as\nconst result = await UserModel.all()\n\n//...\n```\n\n### 限制字段\n\n查询时，如果只需要查询模型的部分属性，可以在通过在查询选项中指定 `attributes` 实现。该选项是一个数组参数，在数组中指定要查询的属性即可，这些要查询的属性就表示要在数据库查询的字段：\n\n```js\nModel.findAll({\n  attributes: [\'foo\', \'bar\']\n})\n```\n\n### 字段重命名\n\n查询属性（字段）可以通过传入一个嵌套数据进行重命名：\n\n```js\nModel.findAll({\n  attributes: [\'foo\', [\'bar\', \'baz\']]\n})\n\n// SELECT foo, bar AS baz ...\n```\n\ndemo\n\n```js\nconst results = await UserModel.findAll({\n  attributes: [[\'name\', \'username\'], \'age\', \'score\']\n})\n\n// [{\"username\":\"guodada0\",\"age\":15,\"score\":60},{\"username\":\"guodada1\",\"age\":16,\"score\":80} ...]\nctx.body = results\n\n// 访问查询结果 通过 instance.get(\'xxx\')\nconsole.log(results[0][\'username\'], results[0].get(\'username\')) // undefind, \'guodada0\'\n```\n\n### 指定筛选条件 (where)\n\n在模型的 `find/finAll` 或 `updates/destroys` 操作中，可以指定一个 `where` 选项以指定筛选条件，\n\n`where` 是一个包含属性/值对对象，sequelize 会根据此对象生产查询语句的筛选条件。\n\n```js\nconst results = await UserModel.findAll({\n  where: {\n    age: 18,\n    name: \'guodada3\'\n  }\n}) //  SELECT * FROM `users` AS `user` WHERE `user`.`age` = 18 AND `user`.`name` = \'guodada3\';\n\nawait UserModel.destroy({\n  where: { name: \'guodada3\' }\n}) // DELETE FROM `users` WHERE name = \'guodada3\'\n\n// ...\n```\n\n#### 复合过滤 / OR / NOT 查询\n\n```js\n$and: {a: 5}           // AND (a = 5)\n$or: [{a: 5}, {a: 6}]  // (a = 5 OR a = 6)\n$gt: 6,                // > 6\n$gte: 6,               // >= 6\n$lt: 10,               // < 10\n$lte: 10,              // <= 10\n$ne: 20,               // != 20\n$not: true,            // IS NOT TRUE\n$between: [6, 10],     // BETWEEN 6 AND 10\n$notBetween: [11, 15], // NOT BETWEEN 11 AND 15\n$in: [1, 2],           // IN [1, 2]\n$notIn: [1, 2],        // NOT IN [1, 2]\n$like: \'%hat\',         // LIKE \'%hat\'\n$notLike: \'%hat\'       // NOT LIKE \'%hat\'\n$iLike: \'%hat\'         // ILIKE \'%hat\' (case insensitive) (PG only)\n$notILike: \'%hat\'      // NOT ILIKE \'%hat\'  (PG only)\n$like: { $any: [\'cat\', \'hat\']}\n                       // LIKE ANY ARRAY[\'cat\', \'hat\'] - also works for iLike and notLike\n$overlap: [1, 2]       // && [1, 2] (PG array overlap operator)\n$contains: [1, 2]      // @> [1, 2] (PG array contains operator)\n$contained: [1, 2]     // <@ [1, 2] (PG array contained by operator)\n$any: [2,3]            // ANY ARRAY[2, 3]::INTEGER (PG only)\n\n$col: \'user.organization_id\' // = \"user\".\"organization_id\", with dialect specific column identifiers, PG in this example\n```\n\n- `$like`: 模糊查询 `%锅` 以 `锅` 结尾的。 `%锅%` 包含 `锅` 的\n- `$in: [10, 11]` - 值为 10 或 11\n\n#### demo\n\n```js\n// SELECT * FROM `users` AS `user` WHERE `user`.`age` > 18 AND `user`.`name` LIKE \'%5\';\nconst results = await UserModel.findAll({\n  where: {\n    age: { $gt: 18 },\n    name: { $like: \'%5\' }\n  }\n})\n\n// SELECT * FROM `users` AS `user` WHERE (`user`.`age` < 1000 OR `user`.`age` IS NULL) AND `user`.`name` LIKE \'%5\';\nconst results = await UserModel.findAll({\n  where: {\n    age: {\n      $in: [15, 20],\n      $or: { $lt: 1000, $eq: null }\n    },\n    name: { $like: \'%5\' }\n  }\n})\n```\n\n### 分页与限制返回结果数\n\n查询进，我们可以使用 `limit` 限制返回结果条数，并可以通过 `offset` 来设置查询偏移（跳过）量，通过这两个属性我们可以实现分页查询的功能：\n\n```js\n// 获取 10 条数据（实例）\nUserModel.findAll({ limit: 10 })\n\n// 跳过 8 条数据（实例）\nUserModel.findAll({ offset: 8 })\n\n// 跳过 5 条数据并获取其后的 5 条数据（实例）\nUserModel.findAll({ offset: 5, limit: 5 })\n```\n\n### 排序\n\n`order` 选项用于查询结果的排序数据。排序时应该传入一个包含属性-排序方向的元组/数组，以保证正确的转义：\n\n```js\nconst result = await UserModel.findAll({\n  order: sequelize.literal(\'name DESC\') // 降序\n})\n\n// demo2\nconst result = await UserModel.findAll({\n  order: [sequelize.literal(\'score DESC\'), sequelize.literal(\'name DESC\')]\n})\n\n// 按 max(age) DESC 排序\n[sequelize.fn(\'max\', sequelize.col(\'age\')), \'DESC\'],\n\n// 按相关联的User 模型的 name 属性排序\n[ArticleModel, \'name\', \'DESC\']\n\n// ...\n```\n\n## 查询单项\n\n```js\n// find\nconst result = await UserModel.find({\n  where: { id: 1 }\n})\nconsole.log(result.name, result.get(\'name\')) // guodada0 guodada0\n\n// findOne\nconst result = await UserModel.findOne({\n  where: { id: 1 }\n})\nconsole.log(result.name, result.get(\'name\')) // guodada0 guodada0\n\n// findById\nconst result = await UserModel.findById(1)\nconsole.log(result.name, result.get(\'name\')) // guodada0 guodada0\n\n// findByPk\nconst result = await UserModel.findByPk(1)\n\n//...\n```\n\n## 查找并创建 (findOrCreate)\n\n`findOrCreate` 可用于检测一个不确定是否存在的元素，如果存在则返回记录，不存在时会使用提供的默认值新建记录。\n\n```js\nUserModel.findOrCreate({\n  where: { name: \'guodada\' },\n  defaults: {\n    age: 23,\n    sex: 1,\n    score: 99\n  }\n}).spread((user, created) => {\n  console.log(user.get(\'name\')) // guodada\n  console.log(created) // 是否创建\n})\n\n// INSERT INTO `users` (`id`,`name`,`age`,`sex`,`score`)\n// VALUES (DEFAULT,\'guodada\',23,1,99);\n```\n\n## 分页查询 (findAndCountAll)\n\n`findAndCountAll` - 结合了 `findAll` 和 `count`\n\n处理程序成功将始终接收具有两个属性的对象：\n\n- `count` - 一个整数，总数记录匹配 `where` 语句和关联的其它过滤器\n- `rows` - 一个数组对象，记录在 `limit` 和 `offset` 范围内匹配 `where` 语句和关联的其它过滤器\n\n```js\nconst result = await UserModel.findAndCountAll({\n  where: {\n    age: {\n      $gte: 18 // 大于等于18\n    }\n  },\n  offset: 1, // 偏移量，可以理解为当前页数\n  limit: 15 // 可以理解为 pageSize , 一页有多少数据\n})\n\n// count 记录数 | row 记录\nconsole.log(result.count, result.rows[0].get())\n\n// SELECT * FROM `users` AS `user` WHERE `user`.`age` >= 18 LIMIT 1, 15;\n```\n\n### 支持 include\n\n它支持 `include`。 只有标记为 `required` 的 `include` 将被添加到计数部分：\n\n假设你想找 `User` 中 发布过 `article` 的记录\n\n```js\nconst UserModel = sequelize.define(\n  \'user\',\n  {\n    name: Sequelize.STRING,\n    age: Sequelize.INTEGER,\n    sex: Sequelize.INTEGER,\n    score: Sequelize.INTEGER\n  },\n  { timestamps: false }\n)\n\nconst ArticleModel = sequelize.define(\'article\', {\n  title: Sequelize.STRING,\n  content: Sequelize.STRING\n})\n\nUserModel.hasMany(ArticleModel) // 关联模型\nArticleModel.belongsTo(UserModel, {\n  constraints: false\n})\n\nconst result = await UserModel.findAndCountAll({\n  include: [{ model: ArticleModel, required: true }],\n  offset: 1,\n  limit: 5\n})\n\nconsole.log(result.count) // 3\n```\n\n`result.row`:\n\n```json\n{\n  \"count\": 3,\n  \"rows\": [\n    {\n      \"id\": 1,\n      \"name\": \"guodada0\",\n      \"age\": 15,\n      \"sex\": 0,\n      \"score\": 60,\n      \"article\": {\n        \"id\": 1,\n        \"title\": \"title1\",\n        \"content\": \"aaa\",\n        \"userId\": 1,\n        \"createdAt\": \"2019-01-07T08:51:13.000Z\",\n        \"updatedAt\": \"2019-01-07T08:51:13.000Z\"\n      }\n    }\n    //...\n  ]\n}\n```\n\n因为 `ArticleModel` 的 `include` 有 `required` 设置，这将导致内部连接，并且只有具有 `ArticleModel` 的用户将被计数。\n如果我们从 `include` 中删除 `required`，那么有和没有 `ArticleModel` 的用户都将被计数。\n在 `include` 中添加一个 `where` 语句会自动使它成为 required：\n\n```js\nconst result = await UserModel.findAndCountAll({\n  include: [{ model: ArticleModel }]\n})\n\nconsole.log(result.count) // 7\n\nconst result = await UserModel.findAndCountAll({\n  include: [{ model: ArticleModel, where: { userId: 2 } }]\n})\n\nconsole.log(result.count) // 2\n```\n\n## 聚合查询\n\n### SQL 中的分组查询\n\n[mysql-聚合函数](https://gershonv.github.io/2018/12/31/mysql-聚合函数/)\n\n`SQL` 查询中，通 `GROUP BY` 语名实现分组查询。GROUP BY 子句要和聚合函数配合使用才能完成分组查询，在 `SELECT` 查询的字段中，如果没有使用聚合函数就必须出现在 ORDER BY 子句中。分组查询后，查询结果为一个或多个列分组后的结果集。\n\n```js\nSELECT 列名, 聚合函数(列名)\nFROM 表名\nWHERE 列名 operator value\nGROUP BY 列名\n[HAVING 条件表达式] [WITH ROLLUP]\n```\n\n在以上语句中：\n\n- 聚合函数 - 分组查询通常要与聚合函数一起使用，聚合函数包括：\n  - `COUNT()`-用于统计记录条数\n  - `SUM()`-用于计算字段的值的总和\n  - `AVG()`-用于计算字段的值的平均值\n  - `MAX`-用于查找查询字段的最大值\n  - `MIX`-用于查找查询字段的最小值\n- `GROUP BY` 子名-用于指定分组的字段\n- `HAVING` 子名-用于过滤分组结果，符合条件表达式的结果将会被显示\n- `WITH ROLLUP` 子名-用于指定追加一条记录，用于汇总前面的数据\n\n### sum(field, [options])\n\n`Sequelize` 提供了聚合函数，可以直接对模型进行聚合查询：\n\n- `aggregate(field, aggregateFunction, [options])`-通过指定的聚合函数进行查询\n- `sum(field, [options])`-求和\n- `count(options: Object)`-统计查询结果数\n- `max(field, [options])`-查询最大值\n- `min(field, [options])`-查询最小值\n\n以上这些聚合函数中，可以通过 `options.attributes`、`options.attributes` 属性指定分组相关字段，并可以通过 `options.having` 指定过滤条件，但没有直接指定 `WITH ROLLUP` 子句的参数。\n\n使用`.sum()`查询订单数量大于 1 的用户订单额：\n\n```js\nconst result = await OrderModel.sum(\'price\', {\n  attributes: [\'name\', [sequelize.fn(\'COUNT\', sequelize.col(\'price\')), \'sum\']],\n  group: \'name\',\n  plain: false, // 执行的查询类型，sequelize会根据这个类型对返回结果格式化。\n  having: {\n    $and: [sequelize.literal(\'COUNT(name) > 1\')]\n  }\n})\n\n// SELECT `name`, SUM(`price`) AS `sum` FROM `orders` AS `order` GROUP BY `name` HAVING (COUNT(name) > 1);\n\n// [ { name: \'guo\', sum: \'44\' }, { name: \'guo2\', sum: \'22\' } ]\n```\n\n- [plain](https://itbilu.com/nodejs/npm/VkYIaRPz-.html#api-instance-fn):执行的查询类型，`sequelize` 会根据这个类型对返回结果格式化\n- [sequelize.literal](https://itbilu.com/nodejs/npm/N1pPjUdMf.html#multi): 创建一个字面量对象，该值不会转义\n\n除直接使用聚合函数外，也可以在 `findAll()`等方法中，指定聚合查询相关参数实现聚合查询。\n查询时，同样可以通过通过 `options.attributes`、`options.attributes` 属性指定分组相关字段，并可以通过 options.having 指定过滤条件。与直接使用聚合函数查询不一样，通过参数构建聚合查询时，\n要以数组或对象形式设置 `options.attributes` 参数中的聚合字段，并需要通过 `sequelize.fn()`方法传入聚合函数。\n\n```js\nconst result = await OrderModel.findAll({\n  attributes: [\'name\', [sequelize.fn(\'SUM\', sequelize.col(\'price\')), \'sum\']],\n  group: \'name\',\n  having: {\n    $and: [sequelize.literal(\'COUNT(name) > 1\')]\n  },\n  raw: true // row 对查询结果进行格式化， false 返回 instance\n})\n```\n\n`sequelize.fn()` - 函数调用\n\n```js\nsequelize.fn(fn, args) -> Sequelize.fn\n```\n\n创建于一个相当于数据库函数的对象。该函数可用于搜索查询的 `where` 和 `order` 部分，以及做为列定义的默认值。如果想在列中引用你定义的函数，就要使用 `sequelize.col`，这样列就能正确的解析，而不是解析为字符串。\n如，将 `username` 字段值解析为大写形式：\n\n```js\ninstance.updateAttributes({\n  username: self.sequelize.fn(\'upper\', self.sequelize.col(\'username\'))\n})\n```\n\n`sequelize.col()` - 列对象\n\n创建一个相当于数据库列的对象。这个方法经常结合 sequelize.fn 使用，它可以保证将列名正确的传递给该方法，而不是经过转义。\n\n### count(options: Object)\n\n```js\nconst result = await OrderModel.count({\n  where: { price: 24 }\n})\n```\n\n### max/min\n\n```js\nconst result = await OrderModel.max(\'price\', {\n  where: {\n    price: { $lt: 23 }\n  }\n})\n```\n\n## 原始查询\n\n[原始查询](https://itbilu.com/nodejs/npm/VJIR1CjMb.html#raw-query)\n\n有时会使用原始查询或执行已准备好的 SQL 语句，这时可以用 `Sequlize` 提供的工具函数 `sequelize.query` 来实现。\n\n```js\nconst result = await sequelize.query(\'SELECT * FROM users\', { model: UserModel })\n```\n\n### 查询参数替换\n\n原始查询中有两种替换查询参数的方法，以:开头的参数的形式替换或以不命名以?替换。在选项对象中传递参数：\n\n- 如果传递一个数组，? 会按数组的顺序被依次替换\n- 巢传递一个对象，:key 将会用对象的键替换。如果对象中未找到指定键，则会引发异常（反之亦然）\n\n```js\nsequelize\n  .query(\'SELECT * FROM projects WHERE status = ?\', { replacements: [\'active\'], type: sequelize.QueryTypes.SELECT })\n  .then(function(projects) {\n    console.log(projects)\n  })\n\nsequelize\n  .query(\'SELECT * FROM projects WHERE status = :status \', {\n    replacements: { status: \'active\' },\n    type: sequelize.QueryTypes.SELECT\n  })\n  .then(function(projects) {\n    console.log(projects)\n  })\n```\n\n### 参数绑定\n\n参数绑定类似于参数替换。尤其是参数替换会在发送到数据库前被 sequelize 转义和替换，而参数绑定会被发送到 SQL 查询文本外。\n\n只有 `SQLite` 和 `PostgreSQL` 支持参数绑定，其它类型数据库都会将其插入到 `SQL` 查询，并以相同的方式进行参数替换。参数绑定可以使用$1、$2……或\\$key 的形式：\n\n- 如果传入的是数组，\\$1 会绑定到数组听第 1 个参数 (bind[0])\n- 如果传入一个对象，$key 会绑定到 `object[\'key\']`。每个 key 必须以非数字的字符开始。$1 不是个有效的 key，尽管 object[\'1\'] 是存在的。\n- 在使用\\$$时，不会被转义而是将$做为一个字面量使用。\n\n传入的数组或对象必须包含所有绑定值，否则 `Sequelize` 会抛出异常。这同样适用于数据库可能会忽略绑定参数的情况下。\n\n数据库可能会做进一步限制，绑定参数不能使用数据库关键字，也不能是表或列名，它在引用文本或数据时也可能被忽略。在 PostgreSQL 中，如果不能从上下文\\$1::varchar 中推断类型，那么也需要进行类型转换\n\n```js\nsequelize\n  .query(\'SELECT *, \"text with literal $$1 and literal $$status\" as t FROM projects WHERE status = $1\', {\n    bind: [\'active\'],\n    type: sequelize.QueryTypes.SELECT\n  })\n  .then(function(projects) {\n    console.log(projects)\n  })\n\nsequelize\n  .query(\'SELECT *, \"text with literal $$1 and literal $$status\" as t FROM projects WHERE status = $status\', {\n    bind: { status: \'active\' },\n    type: sequelize.QueryTypes.SELECT\n  })\n  .then(function(projects) {\n    console.log(projects)\n  })\n```', 21, '2019-02-11 12:41:27', '2020-01-08 17:47:38', 1, 0, 'd15ab109e41711ec829a8c8caa87c861');
INSERT INTO `article` VALUES (26, 'Sequelize - associations', '本部分描述了 Sequelize 中的各种关联类型。 Sequelize 中有四种类型的关联\n\n- `BelongsTo`\n- `HasOne`\n- `HasMany`\n- `BelongsToMany`\n\n## 基本概念\n\n### Source & Target\n\n我们首先从一个基本概念开始，你将会在大多数关联中使用 `source` 和 `target` 模型。 假设您正试图在两个模型之间添加关联。 这里我们在 `users` 和 `articles` 之间添加一个 `hasOne` 关联。\n\n```js\nconst UserModel = sequelize.define(\n  \'user\',\n  {\n    name: Sequelize.STRING,\n    age: Sequelize.INTEGER\n  },\n  { timestamps: false }\n)\n\nconst ArticleModel = sequelize.define(\'article\', {\n  title: Sequelize.STRING,\n  content: Sequelize.STRING\n})\n\nUserModel.hasOne(ArticleModel)\n```\n\n<!-- more -->\n\n相当于：\n\n```sql\nCREATE TABLE IF NOT EXISTS `users` (\n  `id` INTEGER NOT NULL auto_increment ,\n  `name` VARCHAR(255), `age` INTEGER,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB;\n\nCREATE TABLE IF NOT EXISTS `articles` (\n  `id` INTEGER NOT NULL auto_increment ,\n  `title` VARCHAR(255),\n  `content` VARCHAR(255),\n  `createdAt` DATETIME NOT NULL,\n  `updatedAt` DATETIME NOT NULL,\n  `userId` INTEGER,\n  PRIMARY KEY (`id`),\n  FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE\n  SET NULL ON UPDATE CASCADE\n) ENGINE=InnoDB;\n```\n\n`UserModel`（函数被调用的模型）是 `source` 。 `ArticleModel` 模型（作为参数传递的模型）是 `target` 。\n\n即 `articles` 表的 `userId` 依赖于 `users` 表的 `id`\n\n此时删除 `users` 表（`source`）, 就会报错了 Cannot drop table \'users\' referenced by a foreign key constraint \'articles_ibfk_1\' on table \'articles\'.\n\n### 外键\n\n当您在模型中创建关联时，会自动创建带约束的外键引用。 下面是设置：\n\n```js\nconst TaskModel = sequelize.define(\'task\', { title: Sequelize.STRING })\nconst UserModel = sequelize.define(\'user\', { name: Sequelize.STRING }, { timestamps: false })\n\nUserModel.hasMany(TaskModel) // 将会添加 userId 到 TaskModel\nTaskModel.belongsTo(UserModel) // 也将会添加 userId 到 TaskModel\n```\n\n将生成以下 SQL：\n\n```sql\nCREATE TABLE IF NOT EXISTS `users` (\n    `id` INTEGER NOT NULL auto_increment,\n    `name` VARCHAR(255),\n    PRIMARY KEY (`id`)\n) ENGINE = InnoDB;\n\nCREATE TABLE IF NOT EXISTS `tasks` (\n    `id` INTEGER NOT NULL auto_increment,\n    `title` VARCHAR(255),\n    `createdAt` DATETIME NOT NULL,\n    `updatedAt` DATETIME NOT NULL,\n    `userId` INTEGER,\n    PRIMARY KEY (`id`),\n    FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE\n    SET NULL ON UPDATE CASCADE\n) ENGINE = InnoDB;\n```\n\n`tasks` 和 `users` 模型之间的关系通过在 `tasks` 表上注入 userId 外键，并将其标记为对 `users` 表的引用。\n默认情况下，如果引用的用户被删除，`userId` 将被设置为 `NULL`，如果更新了 `userId`，则更新 `userId`。 这些选项可以通过将 `onUpdate` 和 `onDelete` 选项传递给关联调用来覆盖。\n验证选项是`RESTRICT`, `CASCADE`, `NO ACTION`, `SET DEFAULT`, `SET NULL`。\n\n对于 `1:1` 和 `1:m` 关联，默认选项是 `SET NULL` 用于删除，`CASCADE` 用于更新。\n对于 `n:m`，两者的默认值是 `CASCADE`。 这意味着，如果您从 `n:m` 关联的一侧删除或更新一行，则引用该行的连接表中的所有行也将被删除或更新。\n\n#### 循环依赖 & 禁用约束\n\n在表之间添加约束意味着当使用 `sequelize.sync` 时，表必须以特定顺序在数据库中创建表。\n如果 `Task` 具有对 `User` 的引用，`users` 表必须在创建 `tasks` 表之前创建。\n这有时会导致循环引用，那么 `sequelize` 将无法找到要同步的顺序。\n想象一下文档和版本的场景。 一个文档可以有多个版本，并且为了方便起见，文档引用了它的当前版本。\n\n```js\nconst Document = sequelize.define(\'document\', { author: Sequelize.STRING }, { timestamps: false })\nconst Version = sequelize.define(\'version\', { timestamp: Sequelize.DATE })\n\nDocument.hasMany(Version) // 这将 documentId 属性添加到 version\nDocument.belongsTo(Version, {\n  as: \'Current\',\n  foreignKey: \'currentVersionId\'\n}) // 这将 currentVersionId 属性添加到 document\n```\n\n但是，上面的代码将导致以下错误: `Cyclic dependency found. documents is dependent of itself. Dependency chain: documents -> versions => documents.`\n\n为了缓解这一点，我们可以向其中一个关联传递 `constraints: false：`\n\n```js\nDocument.hasMany(Version)\nDocument.belongsTo(Version, {\n  as: \'Current\',\n  foreignKey: \'currentVersionId\',\n  constraints: false\n})\n```\n\n这将可以让我们正确地同步表：\n\n```sql\nCREATE TABLE IF NOT EXISTS `documents` (\n    `id` INTEGER NOT NULL auto_increment,\n    `author` VARCHAR(255),\n    `currentVersionId` INTEGER,\n    PRIMARY KEY (`id`)\n) ENGINE = InnoDB;\n\nCREATE TABLE IF NOT EXISTS `versions` (\n    `id` INTEGER NOT NULL auto_increment,\n    `timestamp` DATETIME,\n    `createdAt` DATETIME NOT NULL,\n    `updatedAt` DATETIME NOT NULL,\n    `documentId` INTEGER,\n    PRIMARY KEY (`id`),\n    FOREIGN KEY (`documentId`) REFERENCES `documents` (`id`) ON DELETE\n    SET\n        NULL ON UPDATE CASCADE\n) ENGINE = InnoDB;\n```\n\n#### 无限制地执行外键引用\n\n有时您可能想引用另一个表，而不添加任何约束或关联。 在这种情况下，您可以手动将参考属性添加到您的模式定义中，并标记它们之间的关系。\n\n```js\nconst Trainer = sequelize.define(\'trainer\', {\n  firstName: Sequelize.STRING,\n  lastName: Sequelize.STRING\n})\n\n// Series 将有一个 trainerId = Trainer.id 外参考键\n// 之后我们调用 Trainer.hasMany(series)\nconst Series = sequelize.define(\'series\', {\n  title: Sequelize.STRING,\n  subTitle: Sequelize.STRING,\n  description: Sequelize.TEXT,\n  // 用 `Trainer` 设置外键关系（hasMany）\n  trainerId: {\n    type: Sequelize.INTEGER,\n    references: {\n      model: Trainer,\n      key: \'id\'\n    }\n  }\n})\n\n// Video 将有 seriesId = Series.id 外参考键\n// 之后我们调用 Series.hasOne(Video)\nconst Video = sequelize.define(\'video\', {\n  title: Sequelize.STRING,\n  sequence: Sequelize.INTEGER,\n  description: Sequelize.TEXT,\n  // 用 `Series` 设置关系(hasOne)\n  seriesId: {\n    type: Sequelize.INTEGER,\n    references: {\n      model: Series, // 既可以是表示表名的字符串，也可以是 Sequelize 模型\n      key: \'id\'\n    }\n  }\n})\n\nSeries.hasOne(Video)\nTrainer.hasMany(Series)\n```\n\n## 一对一关联\n\n一对一关联是通过单个外键连接的两个模型之间的关联。\n\n### BelongsTo\n\n`BelongsTo` 关联是在 `source model` 上存在一对一关系的外键的关联。\n\n一个简单的例子是 `Player` 通过 `player` 的外键作为 `Team` 的一部分。\n\n```js\nconst Player = sequelize.define(\'player\', {}, { timestamps: false })\nconst Team = sequelize.define(\'team\', {}, { timestamps: false })\n\nPlayer.belongsTo(Team) // 将向 Player 添加一个 teamId 属性以保存 Team 的主键值\n```\n\n```sql\nCREATE TABLE IF NOT EXISTS `teams` (\n    `id` INTEGER NOT NULL auto_increment,\n    PRIMARY KEY (`id`)\n) ENGINE = InnoDB;\n\nCREATE TABLE IF NOT EXISTS `players` (\n    `id` INTEGER NOT NULL auto_increment,\n    `teamId` INTEGER,\n    PRIMARY KEY (`id`),\n    FOREIGN KEY (`teamId`) REFERENCES `teams` (`id`) ON DELETE\n    SET\n        NULL ON UPDATE CASCADE\n) ENGINE = InnoDB;\n```\n\n#### 外键/目标键\n\n默认情况下，将从目标模型名称和目标主键名称生成 `belongsTo` 关系的外键。\n\n默认的样式是 `camelCase`（小驼峰），但是如果源模型配置为 `underscored: true`（下划线） ，那么将使用字段 `snake_case` 创建 `foreignKey`。\n\n```js\nconst User = sequelize.define(\'user\', {}, { timestamps: false, underscored: true })\nconst Company = sequelize.define(\'company\', {\n  uuid: {\n    type: Sequelize.UUID,\n    primaryKey: true\n  }\n})\n\nUser.belongsTo(Company) // 将用字段 company_uuid 添加 companyUuid 到 user\n```\n\n在已定义 `as` 的情况下，将使用它代替目标模型名称。\n\n```js\nconst User = sequelize.define(\'user\', {}, { timestamps: false })\nconst UserRole = sequelize.define(\'userRole\', {}, { timestamps: false })\n\nUser.belongsTo(UserRole, { as: \'role\' }) // 将 role 添加到 user 而不是 userRole\n```\n\n生成的 `users` 表\n\n```sql\nCREATE TABLE IF NOT EXISTS `users` (\n    `id` INTEGER NOT NULL auto_increment,\n    `roleId` INTEGER,\n    PRIMARY KEY (`id`),\n    FOREIGN KEY (`roleId`) REFERENCES `userRoles` (`id`) ON DELETE\n    SET\n        NULL ON UPDATE CASCADE\n) ENGINE = InnoDB;\n```\n\n在所有情况下，默认外键可以用 `foreignKey` 选项覆盖。 当使用外键选项时，`Sequelize` 将按原样使用：\n\n```js\nconst User = sequelize.define(\'user\', {}, { timestamps: false })\nconst Company = sequelize.define(\'company\', {}, { timestamps: false })\n\nUser.belongsTo(Company, { foreignKey: \'fk_company\' })\n```\n\n目标键\n\n```js\nUser.belongsTo(Company, { foreignKey: \'fk_companyname\', targetKey: \'id\' })\n```\n\n效果：\n\n```js\nconst User = sequelize.define(\n  \'user\',\n  {\n    fk_companyname: {\n      references: {\n        model: Company,\n        key: \'id\'\n      }\n    }\n  },\n  { timestamps: false }\n)\n```\n\n### HasOne\n\n`HasOne` 关联是在 `target model` 上存在一对一关系的外键的关联。\n\n```js\nconst User = sequelize.define(\'user\', {}, { timestamps: false })\nconst Project = sequelize.define(\'project\', {}, { timestamps: false })\n\n// 单向关联\nProject.hasOne(User)\n\n// the same as\nconst User = sequelize.define(\n  \'user\',\n  {\n    projectId: {\n      references: {\n        model: Project,\n        key: \'id\'\n      }\n    }\n  },\n  { timestamps: false }\n)\n```\n\n```js\n// 你也可以定义外键，例如 如果您已经有一个现有的数据库并且想要处理它：\nProject.hasOne(User, { foreignKey: \'initiator_id\' })\n\n// 因为Sequelize将使用模型的名称（define的第一个参数）作为访问器方法，\n// 还可以将特殊选项传递给hasOne：\nProject.hasOne(User, { as: \'Initiator\' })\n\n// 或者让我们来定义一些自己的参考\nconst Person = sequelize.define(\'person\', {})\nPerson.hasOne(Person, { as: \'Father\' }) // 这会将属性 FatherId 添加到 Person\n\n// also possible:\nPerson.hasOne(Person, { as: \'Father\', foreignKey: \'DadId\' }) // 这将把属性 DadId 添加到 Person\n\n// 在这两种情况下，你都可以：\nPerson.setFather\nPerson.getFather\n\n// 如果你需要联结表两次，你可以联结同一张表\nTeam.hasOne(Game, { as: \'HomeTeam\', foreignKey: \'homeTeamId\' })\nTeam.hasOne(Game, { as: \'AwayTeam\', foreignKey: \'awayTeamId\' })\n\nGame.belongsTo(Team)\n```\n\n即使它被称为 `hasOne` 关联，对于大多数 1：1 关系，您通常需要 `BelongsTo` 关联，因为 `BelongsTo` 将会在 `hasOne` 将添加到目标的源上添加 `foreignKey`。\n\n#### 源键\n\n源关键是源模型中的属性，它的目标模型指向外键属性。 默认情况下，hasOne 关系的源键将是源模型的主要属性。 要使用自定义属性，请使用 `sourceKey` 选项。\n\n```js\nconst User = sequelize.define(\'user\', {})\nconst Company = sequelize.define(\'company\', {})\n\n// 将 companyName 属性添加到 User\n// 使用 Company 的 name 属性作为源属性\nCompany.hasOne(User, { foreignKey: \'companyName\', sourceKey: \'name\' })\n```\n\n### HasOne 和 BelongsTo 之间的区别\n\n在 Sequelize `1：1` 关系中可以使用 `HasOne` 和 `BelongsTo` 进行设置。 它们适用于不同的场景。 让我们用一个例子来研究这个差异。\n\n假设我们有两个表可以链接 `Player` 和 `Team` 。 让我们定义他们的模型。\n\n```js\nconst Player = sequelize.define(\'player\', {}, { timestamps: false })\nconst Team = sequelize.define(\'team\', {}, { timestamps: false })\n```\n\n当我们连接 `Sequelize` 中的两个模型时，我们可以将它们称为一对 `source` 和 `target` 模型。像这样\n\n将 **Player** 作为 **source** 而 **Team** 作为 **target**\n\n```js\nPlayer.belongsTo(Team)\n//或\nPlayer.hasOne(Team)\n```\n\n将 **Team** 作为 **source** 而 **Player** 作为 **target**\n\n```js\nTeam.belongsTo(Player)\n//Or\nTeam.hasOne(Player)\n```\n\n`HasOne` 和 `BelongsTo` 将关联键插入到不同的模型中。 `HasOne` 在 `target` 模型中插入关联键，而 `BelongsTo` 将关联键插入到 `source` 模型中。\n\n下是一个示例，说明了 `BelongsTo` 和 `HasOne` 的用法。\n\n```js\nconst Player = sequelize.define(\'player\', {}, { timestamps: false })\nconst Team = sequelize.define(\'team\', {}, { timestamps: false })\nconst Coach = sequelize.define(\'coach\', {}, { timestamps: false })\n\nPlayer.belongsTo(Team) // `teamId` 将被添加到 Player / Source 模型中\nCoach.hasOne(Team) // `coachId` 将被添加到 Team / Target 模型中\n\n// the same as\nconst Player = sequelize.define(\'player\', {\n  teamId: {\n    references: {\n      model: Team,\n      key: \'id\'\n    }\n  }\n})\n\nconst Team = sequelize.define(\'team\', {\n  coachId: {\n    references: {\n      model: Coach,\n      key: \'id\'\n    }\n  }\n})\n```\n\n假设我们的 `Player` 模型有关于其团队的信息为 `teamId` 列。\n关于每个团队的 `Coach` 的信息作为 `coachId` 列存储在 `Team` 模型中。\n这两种情况都需要不同种类的 1：1 关系，因为外键关系每次出现在不同的模型上。\n\n- 当关于关联的信息存在于 `source` 模型中时，我们可以使用 `belongsTo`。 在这种情况下，`Player` 适用于`belongsTo`，因为它具有 `teamId` 列。\n- 当关于关联的信息存在于 `target` 模型中时，我们可以使用 `hasOne`。 在这种情况下， `Coach` 适用于 `hasOne` ，因为 `Team` 模型将其 `Coach` 的信息存储为 `coachId` 字段。\n\n## 一对多关联 (hasMany)\n\n一对多关联将一个来源与多个目标连接起来。 而多个目标接到同一个特定的源。\n\n```js\nconst User = sequelize.define(\'user\', {}, { timestamps: false })\nconst Project = sequelize.define(\'project\', {}, { timestamps: false })\n\n// 好。 现在，事情变得更加复杂（对用户来说并不真实可见）。\n// 首先我们来定义一个 hasMany 关联\nProject.hasMany(User, { as: \'Workers\' })\n```\n\n这会将 `projectId` 属性添加到 `User`。 根据您强调的设置，表中的列将被称为 `projectId` 或 `project_id`。 `Project` 的实例将获得访问器 `getWorkers` 和 `setWorkers`。\n\n有时您可能需要在不同的列上关联记录，您可以使用 `sourceKey` 选项：\n\n```js\nconst City = sequelize.define(\'city\', { countryCode: Sequelize.STRING })\nconst Country = sequelize.define(\'country\', { isoCode: Sequelize.STRING })\n\n// 在这里，我们可以根据国家代码连接国家和城市\nCountry.hasMany(City, { foreignKey: \'countryCode\', sourceKey: \'isoCode\' })\nCity.belongsTo(Country, { foreignKey: \'countryCode\', targetKey: \'isoCode\' })\n```\n\n到目前为止，我们解决了单向关联。 但我们想要更多！ 让我们通过在下一节中创建一个多对多的关联来定义它。\n\n## 多对多关联 (BelongsToMany)\n\n多对多关联用于将源与多个目标相连接。 此外，目标也可以连接到多个源。\n\n```js\nProject.belongsToMany(User, { through: \'UserProject\' })\nUser.belongsToMany(Project, { through: \'UserProject\' })\n```\n\n这将创建一个名为 `UserProject` 的新模型，具有等效的外键 `projectId` 和 `userId`。 属性是否为 `camelcase` 取决于由表（在这种情况下为 `User` 和 `Project`）连接的两个模型。\n\n```sql\nCREATE TABLE IF NOT EXISTS `UserProject` (\n    `createdAt` DATETIME NOT NULL,\n    `updatedAt` DATETIME NOT NULL,\n    `projectId` INTEGER,\n    `userId` INTEGER,\n    PRIMARY KEY (`projectId`, `userId`),\n    FOREIGN KEY (`projectId`) REFERENCES `projects` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,\n    FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE\n) ENGINE = InnoDB;\n```\n\n定义 `through` 为 `required`。 `Sequelize` 以前会尝试自动生成名称，但并不总是导致最合乎逻辑的设置。\n\n这将添加方法 `getUsers`,`setUsers`, `addUser`, `addUsers` 到 `Project`, 还有 `getProjects`, `setProjects`, `addProject`, 和 `addProjects` 到 `User`.\n\n有时，您可能需要在关联中使用它们时重命名模型。 让我们通过使用别名（`as`）选项将 `users` 定义为 `workers` 而 `projects` 定义为 `t asks`。 我们还将手动定义要使用的外键：\n\n```js\nUser.belongsToMany(Project, { as: \'Tasks\', through: \'worker_tasks\', foreignKey: \'userId\' })\nProject.belongsToMany(User, { as: \'Workers\', through: \'worker_tasks\', foreignKey: \'projectId\' })\n```\n\n- `foreignKey` 将允许你在 `through` 关系中设置 `source model` 键。\n- `otherKey` 将允许你在 `through` 关系中设置 `target model` 键。\n\n```js\nUser.belongsToMany(Project, { as: \'Tasks\', through: \'worker_tasks\', foreignKey: \'userId\', otherKey: \'projectId\' })\n```\n\n当然你也可以使用 `belongsToMany` 定义自我引用：\n\n```js\nPerson.belongsToMany(Person, { as: \'Children\', through: \'PersonChildren\' })\n// 这将创建存储对象的 ID 的表 PersonChildren。\n```\n\n如果您想要连接表中的其他属性，则可以在定义关联之前为连接表定义一个模型，然后再说明它应该使用该模型进行连接，而不是创建一个新的关联：\n\n```js\nconst User = sequelize.define(\'user\', {})\nconst Project = sequelize.define(\'project\', {})\nconst UserProjects = sequelize.define(\'userProjects\', {\n  status: DataTypes.STRING\n})\n\nUser.belongsToMany(Project, { through: UserProjects })\nProject.belongsToMany(User, { through: UserProjects })\n```\n\n要向 `user` 添加一个新 `project` 并设置其状态，您可以将额外的 `options.through` 传递给 `setter`，其中包含连接表的属性\n\n```js\nuser.addProject(project, { through: { status: \'started\' } })\n```\n\n默认情况下，上面的代码会将 `projectId` 和 `userId` 添加到 `UserProjects` 表中， 删除任何先前定义的主键属性 - 表将由两个表的键的组合唯一标识，并且没有其他主键列。 要在 `UserProjects` 模型上强添加一个主键，您可以手动添加它。\n\n```js\nconst UserProjects = sequelize.define(\'userProjects\', {\n  id: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true\n  },\n  status: DataTypes.STRING\n})\n```\n\n使用多对多你可以基于 `through` 关系查询并选择特定属性。 例如通过 `through` 使用 `findAll`\n\n```js\nUser.findAll({\n  include: [\n    {\n      model: Project,\n      through: {\n        attributes: [\'createdAt\', \'startedAt\', \'finishedAt\'],\n        where: { completed: true }\n      }\n    }\n  ]\n})\n```\n\n## 参考\n\n- [模型（表）之间的关系/关联](https://itbilu.com/nodejs/npm/41qaV3czb.html#associations-naming)\n- [Associations - 关联](https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/associations.md)', 9, '2019-02-11 12:41:53', '2020-01-04 13:14:27', 1, 0, 'd15ab109e41711ec829a8c8caa87c861');
INSERT INTO `article` VALUES (27, 'Sequelize - 单表 CURD', '## Create\n\n### create - 创建保存新实例\n\n> create(values, [options]) -> Promise.<Instance>\n\n构建一个新的模型实例，并进行保存。与 `build()`方法不同的是，此方法除创建新实例外，还会将其保存到对应数据库表中。\n\n```js\n// 直接操作db\nconst user = await UserModel.create({\n  name: \'guodada\',\n  age: 23,\n  sex: 1,\n  score: 99\n})\n```\n<!-- more -->\n\n| 名称                         | 类型          | 说明                                        |\n| ---------------------------- | ------------- | ------------------------------------------- |\n| values                       | `Object`      | 无                                          |\n| [options]                    | `Object`      | 无                                          |\n| [options.raw=false]          | `Boolean`     | 设置为true时，值会忽略字段和虚拟设置器      |\n| [options.isNewRecord=true]   | `Boolean`     | 无                                          |\n| [options.fields]             | `Array`       | 如果设置后，只有列表中区别的列才会进行保存  |\n| [options.include]            | `Array`       | 用于构建prefetched/included模型，参见 set   |\n| [options.onDuplicate]        | `String`      | 无                                          |\n| [options.transaction]        | `Transaction` | 在事务中执行查询                            |\n| [options.logging=false]      | `Function`    | 一个用于打印查询时所执行sql的函数           |\n| [options.searchPath=DEFAULT] | `String`      | 指定schema的 search_path (仅 Postgres)      |\n| [options.benchmark=false]    | `Boolean`     | 当打印SQL日志时同时输出查询执行时间（毫秒） |\n\n### build - 创建新实例\n\n> build(values, [options]) -> Instance\n\n```js\n// build后对象只存在于内存中，调用save后才操作db\nconst user = UserModel.build({\n  name: \'guodada\',\n  age: 23,\n  sex: 1,\n  score: 99\n})\nconst result = await user.save()\nconsole.log(user.get({ plain: true })) \n```\n\n| 名称                       | 类型    | 说明                                        |\n| -------------------------- | ------- | ------------------------------------------- |\n| values                     | Object  | 无                                          |\n| [options]                  | Object  | 无                                          |\n| [options.raw=false]        | Boolean | 设置为true时，值会忽略字段和虚拟设置器      |\n| [options.isNewRecord=true] | Boolean | 无                                          |\n| [options.include]          | Array   | 用于构建`prefetched/included`模型，参见 set |\n\n## Update\n\n### update - 更新记录\n\n> update(values, options) -> Promise.<Array.<affectedCount, affectedRows>>\n\n更新所匹配的多个实例。promise 回调中会返回一个包含一个或两个元素的数组，第一个元素始终表示受影响的行数，\n第二个元素表示实际影响的行（仅 Postgreoptions.returning 为 true 时受支持）\n\n\n```js\nawait UserModel.update({ name: \'guoxiaoxiao\', age: 18 }, { where: { id: 1 } })\n```\n\n| 名称                            | 类型          | 说明                                     |\n| ------------------------------- | ------------- | ---------------------------------------- |\n| values                          | `Object`      | 无                                       |\n| options                         | `Object`      | 无                                       |\n| options.where                   | `Object`      | 筛选条件                                 |\n| [options.fields]                | `Array`       | 要更新字段，默认为全部                   |\n| [options.validate=true]         | `Boolean`     | 更新每条记录前进行验证                   |\n| [options.hooks=true]            | `Boolean`     | 在执行更新前/后创建钩子                  |\n| [options.individualHooks=false] | `Boolean`     | 在执行更新前/后为每个实例创建钩子        |\n| [options.sideEffects=true]      | `Boolean`     | 是否更新任何虚拟设置                     |\n| [options.returning=false]       | `Boolean`     | 返回受影响的行 (仅适用于 postgres)       |\n| [options.limit]                 | `Number`      | 要更新的行数 (仅适用于 mysql 和 mariadb) |\n| [options.transaction]           | `Transaction` | 在事务中执行查询                         |\n| [options.silent=false]          | `Boolean`     | 如果为true，updatedAt字段将不会更新      |\n\n\n## Read\n\n详见 [Sequelize - 使用 model 查询数据](https://gershonv.github.io/2019/01/03/sequelize-query/)\n\n## Delete\n\n### destroy - 删除记录\n\n> destroy(options) -> Promise.<Integer>\n\n删除多个实例，或设置 `deletedAt` 的时间戳为当前时间（当启用 `paranoid` 时）\n\n执行成功后返回被删除的行数\n\n```js\nconst deleteRowsCount = await UserModel.destroy({\n  where: { id: 2 }\n})\nconsole.log(deleteRowsCount) // 执行成功后返回被删除的行数\n```\n\n| 名称                            | 类型          | 说明                                                                    |\n| ------------------------------- | ------------- | ----------------------------------------------------------------------- |\n| options                         | Object        |\n| [options.where]                 | `Object`      | 筛选条件                                                                |\n| [options.hooks=true]            | `Boolean`     | 在执行前/后创建钩子                                                     |\n| [options.individualHooks=false] | `Boolean`     | 在执行前/后为每个实例创建钩子                                           |\n| [options.limit]                 | `Number`      | 要删除的行数                                                            |\n| [options.force=false]           | `Boolean`     | 删除而不是设置 deletedAt 为当前时间戳 (仅启用 paranoid 时适用)          |\n| [options.truncate=false]        | `Boolean`     | 设置为true时，会使用TRUNCATE代替DELETE FROM，这时会忽略where和limit选项 |\n| [options.cascade=false]         | `Boolean`     | 仅适用于连接查询时的TRUNCATE操作，截断所有外键匹配的表                  |\n| [options.transaction]           | `Transaction` | 在事务中执行查询                                                        |\n\n## findOrCreate - 查找或创建\n\n> findOrCreate(options) -> Promise.<Instance, created>\n\n查找一行记录，如果不存在则创建实例并保存到数据库中\n\n在这个方法中，如果options对象中没有传入事务，那么会在内部自动创建一个新的事务，以防止在创建完成之前有新匹配查询进入。\n\n```js\n// findOrCreate 返回一个包含已找到或创建的对象的数组，找到或创建的对象和一个布尔值\nUserModel.findOrCreate({\n  defaults: { name: \'guoxiaoxiao\' },\n  where: { name: \'guoxiaoxiao\' }\n}).spread((user, created) => {\n  console.log(user.name, created)\n})\n\n// 在上面的例子中，\".spread\" 将数组分成2部分，并将它们作为参数传递给回调函数，在这种情况下将它们视为 \"user\" 和 \"created\" 。\n// 所以“user”将是返回数组的索引0的对象，并且 \"created\" 将等于 \"true\"。）\n\n```\n| 名称                  | 类型          | 说明                   |\n| --------------------- | ------------- | ---------------------- |\n| options               | `Object`      | 无                     |\n| options.where         | `Object`      | 查询属性               |\n| [options.defaults]    | `Object`      | 用于创建新实例的默认值 |\n| [options.transaction] | `Transaction` | 在事务中执行查询       |\n\n## findCreateFind - 查找或创建\n\n> findCreateFind(options) -> Promise.<Instance, created>\n\n效率更高的 `findOrCreate`，不会在事务中执行。首先会尝试进行查询，如果为空则尝试创建，如果是唯一约束则尝试再次查找。\n\n| 名称                  | 类型          | 说明                   |\n| --------------------- | ------------- | ---------------------- |\n| options               | `Object`      | 无                     |\n| options.where         | `Object`      | 查询属性               |\n| [options.defaults]    | `Object`      | 用于创建新实例的默认值 |\n| [options.transaction] | `Transaction` | 在事务中执行查询       |\n\nps: `findOrInitialize`  - 查找或初始化: 查找一行记录，如果不存在则创建（不保存）实例\n\n## insertOrUpdate - 更新或创建\n\n> upsert(values, [options]) -> Promise.<created>\n\n创建或更新一行。如果匹配到主键或唯一约束键时会进行更新。\n\n```js\nconst isCreate = await TaskModel.insertOrUpdate({ title: \'11\', content: \'adfadf\' })\n// isCreate true 创建成功 false 修改成功~\n```\n\n| 名称                                          | 类型          | 说明                      |\n| --------------------------------------------- | ------------- | ------------------------- |\n| values                                        | `Object`      | 无                        |\n| [options]                                     | `Object`      | 无                        |\n| [options.validate=true]                       | `Boolean`     | 插入前进行验证            |\n| [options.fields=Object.keys(this.attributes)] | `Array`       | 要插入/更新字段。默认全部 |\n| [options.transaction]                         | `Transaction` | 在事务中执行查询          |\n\n## bulkCreate - 创建多条记录\n\n> bulkCreate(records, [options]) -> Promise.<Array.<Instance>>\n\n批量创建并保存多个实例。\n\n处理成功后，会在回调函数中返回一个包含多个实例的数组。\n\n```js\n const users = await UserModel.bulkCreate([\n  { name: \'guo\', age: 22, sex: 1 },\n  { name: \'guo2\', age: 12, sex: 0 },\n  { name: \'guo3\', age: 32, sex: 1 }\n])\n```\n\n| 名称                             | 类型          | 说明                                                      |\n| -------------------------------- | ------------- | --------------------------------------------------------- |\n| records                          | `Array`       | 要创建实例的对象（键/值 对）列表                          |\n| [options]                        | `Object`      | 无                                                        |\n| [options.fields]                 | `Array`       | 要插入的字段。默认全部                                    |\n| [options.validate=true]          | `Boolean`     | 插入每条记录前进行验证                                    |\n| [options.hooks=true]             | `Boolean`     | 在执行前/后创建钩子                                       |\n| [options.individualHooks=false]  | `Boolean`     | 在执行前/后为每个实例创建钩子                             |\n| [options.ignoreDuplicates=false] | `Boolean`     | 忽略重复主键（Postgres不支持）                            |\n| [options.updateOnDuplicate]      | `Array`       | 如果行键已存在是否更新（mysql & mariadb支持）. 默认为更新 |\n| [options.transaction]            | `Transaction` | 在事务中执行查询                                          |', 8, '2019-02-11 12:42:16', '2020-01-14 16:17:00', 1, 0, 'd15ab109e41711ec829a8c8caa87c861');
INSERT INTO `article` VALUES (28, 'Sequelize - 多表 CURD', '## 一对一\n\n```js\nconst UserModel = sequelize.define(\'user\', {\n  uuid: {\n    type: Sequelize.INTEGER,\n    allowNull: false,\n    unique: true\n  }\n})\n\nconst AccountModel = sequelize.define(\'account\', {\n  email: {\n    type: Sequelize.CHAR(60),\n    allowNull: false\n  }\n})\n\n//  User的实例对象将拥有 getAccount、setAccount、createAccount 方法\nUserModel.hasOne(AccountModel)\n\n// Account的实例对象将拥有getUser、setUser、addUser 方法\nAccountModel.belongsTo(UserModel, {\n  foreignKey: \'userId\',\n  targetKey: \'uuid\'\n})\n```\n\n<!-- more -->\n\n### 增 - createAccount\n\n```js\n// 增\nconst user = await UserModel.create({ uuid: 666 })\nconst account = await user.createAccount({ email: \'12306@qq.com\' }) // 增\n\nconsole.log(account.get({ plain: true }))\n```\n\n使用对应的的 `userId` 作为外键在 `accounts` 表里插入一条数据。\n\n```js\nmysql> select * from users;\n+----+------+---------------------+---------------------+\n| id | uuid | createdAt           | updatedAt           |\n+----+------+---------------------+---------------------+\n|  1 |  666 | 2019-01-11 05:23:05 | 2019-01-11 05:23:05 |\n+----+------+---------------------+---------------------+\n1 row in set (0.00 sec)\n\nmysql> select * from accounts;\n+----+--------------+---------------------+---------------------+--------+\n| id | email        | createdAt           | updatedAt           | userId |\n+----+--------------+---------------------+---------------------+--------+\n|  1 | 12306@qq.com | 2019-01-11 05:23:05 | 2019-01-11 08:05:38 |      1 |\n+----+--------------+---------------------+---------------------+--------+\n1 row in set (0.00 sec)\n```\n\n### 改 - setAccount\n\n```js\nconst user = await UserModel.findByPk(1)\nconst antherAccount = await AccountModel.create({ email: \'aaa\' })\nconst account = await user.setAccount(antherAccount)\n```\n\n1. 插入一条 `account` 数据，此时外键 `userId` 是空的，还没有关联 `user`\n2. 找出当前 `user` 所关联的 `account` 并将其 `userId` 置为 `NULL`（为了保证一对一关系）\n3. 设置新的 `acount` 的外键 `userId` 为 `user` 的属性 `id`，生成关系\n\n```js\nmysql> select * from accounts;\n+----+--------------+---------------------+---------------------+--------+\n| id | email        | createdAt           | updatedAt           | userId |\n+----+--------------+---------------------+---------------------+--------+\n|  1 | 12306@qq.com | 2019-01-11 05:23:05 | 2019-01-11 08:11:59 |   NULL |\n|  2 | aaa          | 2019-01-11 08:11:59 | 2019-01-11 08:11:59 |      1 |\n+----+--------------+---------------------+---------------------+--------+\n2 rows in set (0.00 sec)\n```\n\n### 软删 - setAccount(null)\n\n```js\nconst user = await UserModel.findByPk(1)\nconst account = await user.setAccount(null)\n```\n\n这里的删除实际上只是“切断”关系，并不会真正的物理删除记录。\nSQL 执行逻辑是：\n\n1. 找出 `user` 所关联的 `account` 数据\n2. 将其外键 `userId` 设置为 `NULL`，完成关系的“切断”\n\n### 查 - getAccount\n\n```js\nconst user = await UserModel.findByPk(1)\nconst account = await user.getAccount()\nconsole.log(account.get({ plain: true }))\n```\n\nor\n\n```js\nconst user = await UserModel.findByPk(1, {\n  include: [AccountModel]\n})\nconsole.log(user.get({ plain: true }))\n// { id: 1,\n//   uuid: 666,\n//   createdAt: 2019-01-11T05:23:05.000Z,\n//   updatedAt: 2019-01-11T05:23:05.000Z,\n//   account:\n//    { id: 2,\n//      email: \'aaa\',\n//      createdAt: 2019-01-11T08:11:59.000Z,\n//      updatedAt: 2019-01-11T08:11:59.000Z,\n//      userId: 1 } }\n```\n\n```js\nmysql> SELECT `user`.`id`, `user`.`uuid`, `user`.`createdAt`, `user`.`updatedAt`,\n`account`.`id` AS `account.id`, `account`.`email` AS `account.email`, `account`.`createdAt` AS `account.createdAt`,\n`account`.`updatedAt` AS `account.updatedAt`, `account`.`userId` AS `account.userId` FROM `users` AS `user`\nLEFT OUTER JOIN `accounts` AS `account` ON `user`.`id` = `account`.`userId` WHERE `user`.`id` = 1;\n\n+----+------+---------------------+---------------------+------------+---------------+---------------------+---------------------+----------------+\n| id | uuid | createdAt           | updatedAt           | account.id | account.email | account.createdAt   | account.updatedAt   | account.userId |\n+----+------+---------------------+---------------------+------------+---------------+---------------------+---------------------+----------------+\n|  1 |  666 | 2019-01-11 05:23:05 | 2019-01-11 05:23:05 |          9 | aaa           | 2019-01-11 08:11:59 | 2019-01-11 08:11:59 |              1 |\n+----+------+---------------------+---------------------+------------+---------------+---------------------+---------------------+----------------+\n1 row in set (0.00 sec)\n```\n\n可以看到，我们对 2 个表进行了一个外联接，从而在取 `user` 的同时也获取到了 `account`。\n\n## 一对多\n\n```js\nconst UserModel = sequelize.define(\n  \'user\',\n  {\n    uuid: {\n      type: Sequelize.INTEGER,\n      allowNull: false,\n      unique: true\n    }\n  },\n  { timestamps: false }\n)\n\nconst NoteModel = sequelize.define(\'note\', {\n  title: {\n    type: Sequelize.CHAR(64),\n    allowNull: false\n  }\n})\n\n// User的实例对象将拥有getNotes、setNotes、addNote、createNote、removeNote、hasNote方法\nUserModel.hasMany(NoteModel)\n\n// Note的实例对象将拥有getUser、setUser、createUser方法\nNoteModel.belongsTo(UserModel)\n```\n\n生成的 sql 语句：\n\n```sql\nCREATE TABLE IF NOT EXISTS `users` (\n    `id` INTEGER NOT NULL auto_increment ,\n    `uuid` INTEGER NOT NULL UNIQUE, PRIMARY KEY (`id`)\n  ) ENGINE=InnoDB;\n\nCREATE TABLE IF NOT EXISTS `notes` (\n    `id` INTEGER NOT NULL auto_increment,\n    `title` CHAR(64) NOT NULL,\n    `createdAt` DATETIME NOT NULL,\n    `updatedAt` DATETIME NOT NULL,\n    `userId` INTEGER,\n    PRIMARY KEY (`id`),\n    FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE\n    SET\n        NULL ONUPDATE CASCADE\n) ENGINE = InnoDB;\n```\n\n可以看到这种关系中，外键 `userId` 加在了多的一端（`notes` 表）。同时相关的模型也自动获得了一些方法。\n\n### 增\n\n#### createNote\n\n```js\nconst user = await UserModel.create({ uuid: 1234 })\nconst note1 = await user.createNote({ title: \'aa\' }) // 增\n\nconsole.log(note1.get({ plain: true }))\n```\n\nSQL 执行逻辑：\n\n> 使用 `user` 的主键 `id` 值作为外键直接在 `notes` 表里插入一条数据。\n\n```js\nINSERT INTO `notes` (`id`,`title`,`createdAt`,`updatedAt`,`userId`)\nVALUES (DEFAULT,\'aa\',\'2019-01-12 05:32:50\',\'2019-01-12 05:32:50\',1);\n```\n\n#### addNote\n\n```js\nconst user = await UserModel.create({ uuid: 1234 })\nconst note = await NoteModel.create({ title: \'bb\' })\nawait user.addNote(note)\n```\n\n`SQL`:\n\n```sql\nINSERT INTO `users` (`id`,`uuid`) VALUES (DEFAULT,1234);\nINSERT INTO `notes` (`id`,`title`,`createdAt`,`updatedAt`) VALUES (DEFAULT,\'bb\',\'2019-01-12 05:40:34\',\'2019-01-12 05:40:34\');\nUPDATE `notes` SET `userId`=1,`updatedAt`=\'2019-01-12 05:40:34\' WHERE `id` IN (1)\n```\n\n1. 插入一条 `note` 数据，此时该条数据的外键 `userId` 为空\n2. 使用 `user` 的属性 `id` 值再更新该条 `note` 数据，设置好外键，完成关系建立\n\n#### addNotes\n\n```js\nconst user = await UserModel.create({ uuid: 1234 })\nconst note1 = await NoteModel.create({ title: \'aa\' })\nconst note2 = await NoteModel.create({ title: \'bb\' })\n\nawait user.addNotes([note1, note2])\n```\n\n### 改 - setNotes\n\n```js\nconst user = await UserModel.create({ uuid: 1234 })\nconst note1 = await user.createNote({ title: \'aa\' })\nconst note2 = await user.createNote({ title: \'bb\' })\n\nconst note3 = await NoteModel.create({ title: \'cc\' })\nconst note4 = await NoteModel.create({ title: \'dd\' })\n\nawait user.setNotes([note3, note4])\n```\n\n1. 根据 `user` 的属性 id 查询所有相关的 `note` 数据\n2. 将 `note1`、`note2` 的外键 `userId` 置为 `NULL`，切断关系\n3. 将 `note3`、`note4` 的外键 `userId` 置为 `user` 的属性 `id`，完成关系建立\n\n```js\nmysql> select * from notes;\n+----+-------+---------------------+---------------------+--------+\n| id | title | createdAt           | updatedAt           | userId |\n+----+-------+---------------------+---------------------+--------+\n|  1 | aa    | 2019-01-12 05:53:11 | 2019-01-12 05:53:11 |   NULL |\n|  2 | bb    | 2019-01-12 05:53:11 | 2019-01-12 05:53:11 |   NULL |\n|  3 | cc    | 2019-01-12 05:53:11 | 2019-01-12 05:53:11 |      1 |\n|  4 | dd    | 2019-01-12 05:53:11 | 2019-01-12 05:53:11 |      1 |\n+----+-------+---------------------+---------------------+--------+\n4 rows in set (0.00 sec)\n```\n\n### 软删\n\n#### removeNote\n\n```js\nconst user = await UserModel.create({ uuid: 1234 })\nconst note1 = await user.createNote({ title: \'aa\' })\nconst note2 = await user.createNote({ title: \'bb\' })\n\nawait user.removeNote(note1)\n```\n\n```js\nmysql> select * from notes;\n+----+-------+---------------------+---------------------+--------+\n| id | title | createdAt           | updatedAt           | userId |\n+----+-------+---------------------+---------------------+--------+\n|  1 | aa    | 2019-01-12 06:05:40 | 2019-01-12 06:05:40 |   NULL |\n|  2 | bb    | 2019-01-12 06:05:40 | 2019-01-12 06:05:40 |      1 |\n+----+-------+---------------------+---------------------+--------+\n2 rows in set (0.00 sec)\n```\n\n#### setNotes([])\n\n```js\nconst user = await UserModel.create({ uuid: 1234 })\nconst note1 = await user.createNote({ title: \'aa\' })\nconst note2 = await user.createNote({ title: \'bb\' })\nawait user.setNotes([])\n```\n\n### 查\n\n#### getNotes\n\n```js\nconst user = await UserModel.create({ uuid: 1234 })\nconst note1 = await user.createNote({ title: \'aa\' })\nconst note2 = await user.createNote({ title: \'bb\' })\n\nconst notes = await user.getNotes({\n  where: {\n    title: { $like: \'%a%\' }\n  }\n})\nnotes.map(note => console.log(note.title))\n```\n\n#### findAll\n\n> 场景 1： 查询所有满足条件的 `note`，同时获取 `note` 属于哪个 `user`。\n\n```js\nconst notes = await NoteModel.findAll({\n  include: UserModel, // or [UserModel, ...]\n  where: {\n    title: { $like: \'%a%\' }\n  }\n})\n\nnotes.map(note => {\n  console.log(note.get({ plain: true }))\n})\n\n// result\n\n// { id: 1,\n//   title: \'aa\',\n//   createdAt: 2019-01-12T06:12:33.000Z,\n//   updatedAt: 2019-01-12T06:12:33.000Z,\n//   userId: 1,\n//   user: { id: 1, uuid: 1234 } }\n```\n\n> 场景 2 查询所有满足条件的 `note`，同时获取 `note` 属于哪个`user`。\n\n```js\nconst user = await UserModel.create({ uuid: 1234 })\nconst note1 = await user.createNote({ title: \'aa\' })\nconst note2 = await user.createNote({ title: \'bb\' })\n\nconst users = await UserModel.findAll({\n  include: [NoteModel], // or [UserModel, ...]\n  where: { uuid: 1234 }\n})\nusers.map(note => {\n  console.log(note.get({ plain: true }))\n})\n\n// result\n// { id: 1,\n//   uuid: 1234,\n//   notes:\n//    [ { id: 1,\n//        title: \'aa\',\n//        createdAt: 2019-01-12T06:17:39.000Z,\n//        updatedAt: 2019-01-12T06:17:39.000Z,\n//        userId: 1 },\n//      { id: 2,\n//        title: \'bb\',\n//        createdAt: 2019-01-12T06:17:39.000Z,\n//        updatedAt: 2019-01-12T06:17:39.000Z,\n//        userId: 1 } ] }\n```\n\n```js\n// 查询创建时间在今天之前的所有user，同时获取他们note的标题中含有关键字css的所有note\nconst users = await UserModel.findAll({\n  include: [\n    {\n      model: NoteModel,\n      where: {\n        title: { $like: \'%aa%\' }\n      }\n    }\n  ],\n  where: { uuid: 1234 }\n})\n```\n\n## 多对多\n\n```js\nconst NoteModel = sequelize.define(\'note\', {\n  title: {\n    type: Sequelize.CHAR(64),\n    allowNull: false\n  }\n})\n\nconst TagModel = sequelize.define(\'tag\', {\n  name: Sequelize.CHAR(64)\n})\n\nconst TaggingModel = sequelize.define(\'tagging\', {\n  type: Sequelize.INTEGER\n})\n\n// Note的实例拥有getTags、setTags、addTag、addTags、createTag、removeTag、hasTag方法\nNoteModel.belongsToMany(TagModel, {\n  through: TaggingModel\n})\n\n// Tag的实例拥有getNotes、setNotes、addNote、addNotes、createNote、removeNote、hasNote方法\nTagModel.belongsToMany(NoteModel, {\n  through: TaggingModel\n})\n```\n\n`tagging` 表连接两个表：\n\n```js\nmysql> show columns from taggings;\n+-----------+----------+------+-----+---------+-------+\n| Field     | Type     | Null | Key | Default | Extra |\n+-----------+----------+------+-----+---------+-------+\n| type      | int(11)  | YES  |     | NULL    |       |\n| createdAt | datetime | NO   |     | NULL    |       |\n| updatedAt | datetime | NO   |     | NULL    |       |\n| noteId    | int(11)  | NO   | PRI | NULL    |       |\n| tagId     | int(11)  | NO   | PRI | NULL    |       |\n+-----------+----------+------+-----+---------+-------+\n5 rows in set (0.00 sec)\n```\n\n### 增\n\n#### createTag\n\n```js\nconst note = await NoteModel.create({ title: \'aa\' })\nawait note.createTag({ name: \'react.js\' }, { through: { type: 0 } })\n```\n\nSQL:\n\n```sql\nINSERT INTO `notes`\n  (`id`,`title`,`createdAt`,`updatedAt`) VALUES (DEFAULT,\'aa\',\'2019-01-12 06:38:09\',\'2019-01-12 06:38:09\');\n\nINSERT INTO `tags`\n  (`id`,`name`,`createdAt`,`updatedAt`) VALUES (DEFAULT,\'react.js\',\'2019-01-12 06:38:09\',\'2019-01-12 06:38:09\');\n\nINSERT INTO `taggings`\n  (`type`,`createdAt`,`updatedAt`,`noteId`,`tagId`) VALUES (0,\'2019-01-12 06:51:10\',\'2019-01-12 06:51:10\',1,1);\n```\n\n1. 在 `notes` 表插入记录\n2. 在 `tags` 表中插入记录\n3. 使用对应的值设置外键 `tagId` 和 `noteId` 以及关系模型本身需要的属性（`type: 0`）在关系表 tagging 中插入记录\n\n```js\nmysql> select * from notes;\n+----+-------+---------------------+---------------------+\n| id | title | createdAt           | updatedAt           |\n+----+-------+---------------------+---------------------+\n|  1 | aa    | 2019-01-12 06:51:10 | 2019-01-12 06:51:10 |\n+----+-------+---------------------+---------------------+\n1 row in set (0.00 sec)\n\nmysql> select * from taggings;\n+------+---------------------+---------------------+--------+-------+\n| type | createdAt           | updatedAt           | noteId | tagId |\n+------+---------------------+---------------------+--------+-------+\n|    0 | 2019-01-12 06:51:10 | 2019-01-12 06:51:10 |      1 |     1 |\n+------+---------------------+---------------------+--------+-------+\n1 row in set (0.00 sec)\n\nmysql> select * from tags;\n+----+----------+---------------------+---------------------+\n| id | name     | createdAt           | updatedAt           |\n+----+----------+---------------------+---------------------+\n|  1 | react.js | 2019-01-12 06:55:00 | 2019-01-12 06:55:00 |\n+----+----------+---------------------+---------------------+\n1 row in set (0.00 sec)\n```\n\n#### addTag\n\n```js\nconst note = await NoteModel.create({ title: \'aa\' })\nconst tag = await TagModel.create({ name: \'react.js\' })\nawait note.addTag(tag, { through: { type: 1 } })\n```\n\n#### addTags\n\n```js\nconst note = await NoteModel.create({ title: \'aa\' })\nconst tag1 = await TagModel.create({ name: \'react.js\' })\nconst tag2 = await TagModel.create({ name: \'vue.js\' })\nawait note.addTags([tag1, tag2], { through: { type: 1 } })\n```\n\n### 改 - setTags\n\n```js\nconst note = await NoteModel.create({ title: \'aa\' })\nconst tag1 = await TagModel.create({ name: \'react.js\' })\nconst tag2 = await TagModel.create({ name: \'vue.js\' })\n\nawait note.addTags([tag1, tag2], { through: { type: 1 } })\n\nconst tag3 = await TagModel.create({ name: \'angular.js\' })\nconst tag4 = await TagModel.create({ name: \'ant-desgin\' })\n\nawait note.setTags([tag3, tag4], { through: { type: 2 } })\n```\n\n```js\nmysql> select * from taggings;\n+------+---------------------+---------------------+--------+-------+\n| type | createdAt           | updatedAt           | noteId | tagId |\n+------+---------------------+---------------------+--------+-------+\n|    2 | 2019-01-12 07:02:52 | 2019-01-12 07:02:52 |      1 |     3 |\n|    2 | 2019-01-12 07:02:52 | 2019-01-12 07:02:52 |      1 |     4 |\n+------+---------------------+---------------------+--------+-------+\n2 rows in set (0.00 sec)\n\nmysql> select * from tags;\n+----+------------+---------------------+---------------------+\n| id | name       | createdAt           | updatedAt           |\n+----+------------+---------------------+---------------------+\n|  1 | react.js   | 2019-01-12 07:02:51 | 2019-01-12 07:02:51 |\n|  2 | vue.js     | 2019-01-12 07:02:51 | 2019-01-12 07:02:51 |\n|  3 | angular.js | 2019-01-12 07:02:52 | 2019-01-12 07:02:52 |\n|  4 | ant-desgin | 2019-01-12 07:02:52 | 2019-01-12 07:02:52 |\n+----+------------+---------------------+---------------------+\n4 rows in set (0.00 sec)\n```\n\n### 删\n\n#### removeTag\n\n```js\nconst note = await NoteModel.create({ title: \'aa\' })\nconst tag1 = await TagModel.create({ name: \'react.js\' })\nconst tag2 = await TagModel.create({ name: \'vue.js\' })\n\nawait note.addTags([tag1, tag2], { through: { type: 1 } })\n\nawait note.removeTag(tag2)\n\n// DELETE FROM `taggings` WHERE `noteId` = 1 AND `tagId` IN (2)\n```\n\n--> 软删:\n\n```js\nmysql> select * from tags;\n+----+----------+---------------------+---------------------+\n| id | name     | createdAt           | updatedAt           |\n+----+----------+---------------------+---------------------+\n|  1 | react.js | 2019-01-12 07:06:18 | 2019-01-12 07:06:18 |\n|  2 | vue.js   | 2019-01-12 07:06:18 | 2019-01-12 07:06:18 |\n+----+----------+---------------------+---------------------+\n2 rows in set (0.00 sec)\n\nmysql> select * from taggings;\n+------+---------------------+---------------------+--------+-------+\n| type | createdAt           | updatedAt           | noteId | tagId |\n+------+---------------------+---------------------+--------+-------+\n|    1 | 2019-01-12 07:06:18 | 2019-01-12 07:06:18 |      1 |     1 |\n+------+---------------------+---------------------+--------+-------+\n1 row in set (0.00 sec)\n```\n\n#### setTags([])\n\n```js\nconst note = await NoteModel.create({ title: \'aa\' })\nconst tag1 = await TagModel.create({ name: \'react.js\' })\nconst tag2 = await TagModel.create({ name: \'vue.js\' })\n\nawait note.addTags([tag1, tag2], { through: { type: 1 } })\n\nawait note.setTags([])\n```\n\n### 查\n\n#### getTags\n\n```js\nconst note = await NoteModel.create({ title: \'aa\' })\nconst tag1 = await TagModel.create({ name: \'react.js\' })\nconst tag2 = await TagModel.create({ name: \'vue.js\' })\n\nawait note.addTags([tag1, tag2], { through: { type: 1 } })\n\nconst notes = await note.getTags({\n  // 这里可以对tags进行where\n})\nnotes.map(d => {\n  console.log(d.get({ plain: true }))\n})\n\n// { id: 1,\n//   name: \'react.js\',\n//   createdAt: 2019-01-12T07:11:26.000Z,\n//   updatedAt: 2019-01-12T07:11:26.000Z,\n//   tagging:\n//    { type: 1,\n//      createdAt: 2019-01-12T07:11:26.000Z,\n//      updatedAt: 2019-01-12T07:11:26.000Z,\n//      noteId: 1,\n//      tagId: 1 } }\n// { id: 2,\n//   name: \'vue.js\',\n//   createdAt: 2019-01-12T07:11:26.000Z,\n//   updatedAt: 2019-01-12T07:11:26.000Z,\n//   tagging:\n//    { type: 1,\n//      createdAt: 2019-01-12T07:11:26.000Z,\n//      updatedAt: 2019-01-12T07:11:26.000Z,\n//      noteId: 1,\n//      tagId: 2 } }\n```\n\n可以看到这种查询，就是执行一个 `inner join`。\n\n#### findAll\n\n```js\nconst note = await NoteModel.create({ title: \'aa\' })\nconst tag1 = await TagModel.create({ name: \'react.js\' })\nconst tag2 = await TagModel.create({ name: \'vue.js\' })\n\nawait note.addTags([tag1, tag2], { through: { type: 1 } })\n\nconst notes = await NoteModel.findAll({\n  include: TagModel\n})\n\nnotes.map(d => {\n  console.log(d.get({ plain: true }))\n})\n\n// { id: 1,\n//   title: \'aa\',\n//   createdAt: 2019-01-12T07:14:43.000Z,\n//   updatedAt: 2019-01-12T07:14:43.000Z,\n//   tags:\n//    [ { id: 1,\n//        name: \'react.js\',\n//        createdAt: 2019-01-12T07:14:43.000Z,\n//        updatedAt: 2019-01-12T07:14:43.000Z,\n//        tagging: [Object] },\n//      { id: 2,\n//        name: \'vue.js\',\n//        createdAt: 2019-01-12T07:14:43.000Z,\n//        updatedAt: 2019-01-12T07:14:43.000Z,\n//        tagging: [Object] } ] }\n```', 14, '2019-02-11 12:42:39', '2020-01-19 13:56:15', 1, 0, 'd15ab109e41711ec829a8c8caa87c861');
INSERT INTO `article` VALUES (30, '实现简易的 VUE-MVVM', '## 前言\n这是本人的学习的记录，因为最近在准备面试，很多情况下会被提问到：请简述 `mvvm` ?\n一般情况下我可能这么答：`mvvm` 是视图和逻辑的一个分离，是`model view view-model` 的缩写，通过虚拟dom的方式实现双向数据绑定（我随便答得）\n\n那么问题来了，你知道 `mvvm` 是怎么实现的？\n回答: `mvvm` 主要通过 `Object` 的 `defineProperty` 属性，重写 `data` 的 `set` 和`get` 函数来实现。 ok，回答得60分，那么你知道具体实现过程么？想想看，就算他没问到而你答了出来是不是更好？前提下，一定要手撸一下简单的`mvvm`才会对它有印象~\n\n话不多说，接下来是参考自张仁阳老师的教学视频而作，采用的是[ES6](http://es6.ruanyifeng.com/#docs/class)语法，其中也包含了我个人的理解，如果能帮助到您，我将十分高兴。如有错误之处，请各位大佬指正出来，不胜感激~~~\n\n在实现之前，请先了解基本的`mvvm`的编译过程以及使用\n- 编译的流程图\n![](https://user-gold-cdn.xitu.io/2018/7/18/164ac9a02d21c8cb?w=700&h=374&f=jpeg&s=31670)\n\n- 整体分析\n![](https://user-gold-cdn.xitu.io/2018/7/18/164ac90097e68912?w=639&h=388&f=png&s=49631)\n\n可以发现`new MVVM()`后的编译过程主体分为两个部分：\n\n1. 一部分是模板的编译 `Compile`\n    - 编译元素和文本，最终渲染到页面中\n    - 其中标签中有模板指令的标签才执行编译 例如`<div>我很帅</div>` 不执行编译\n2. 一部分是数据劫持 `Observer`\n    - `Dep` 发布订阅，将所有需要通知变化的`data`添加到一个数组中\n    - `Watcher` 如果数据发生改变，在`Object`的`defineProperty`的`set`函数中调用`Watcher`的`update`方法\n\n#### 明确本文需要实现的目标\n1. **实现模板编译的过程 完成`Vue`实例中的属性可以正确绑定在标签中，并且渲染在页面中**\n   -  工作：指令的解析，正则替换双大括号\n   -  将节点的内容`node.textContent`或者`input`的`value`编译出来\n2. **完成数据的双向绑定**\n   - 工作：通过`observe`类劫持数据变化\n   - 添加发布与订阅：`Object.defineProperty` 在`get`钩子中`addSub`,`set`钩子中通知变化`dep.notify()`\n   - `dep.notify()`调用的是`Watcher`的`update`方法，也就是说需要在`input`变化时调用更新\n   \n<!--more-->\n\n##  分解 Vue 实例\n如何入手？首先从怎么使用`Vue`开始。让我们一步步解析`Vue`的使用：\n\n```js\nlet vm = new Vue({\n    el: \'#app\'\n    data: {\n        message: \'hello world\'\n    }\n})\n```\n上面代码可以看出使用`Vue`,我们是先`new` 一个`Vue` 实例，传一个对象参数，包含 `el` 和 `data`。\n\nok，以上得到了信息，接下来让我们实现**目标1**：将`Vue`实例的`data`编译到页面中\n\n## 实现 Complie 编译模板的过程\n先看看页面的使用：`index.html`\n```html\n<div id=\"app\">\n    <input type=\"text\" v-model=\"jsonText.text\">\n    <div>{{message}}</div>\n    {{jsonText.text}}\n</div>\n<script src=\"./watcher.js\"></script>\n<script src=\"./observer.js\"></script>\n<script src=\"./compile.js\"></script>\n<script src=\"./vue.js\"></script>\n<script>\n    let vm = new Vue({\n        el: \'#app\',\n        data: {\n            message: \'gershonv\',\n            jsonText:{\n                text: \'hello Vue\'\n            }\n        }\n    })\n</script>\n```\n\n> 第一步当然是添加`Vue`类作为一个入口文件。\n\n### vue 类-入口文件的添加\n新建一个`vue.js`文件，其代码如下\n构造函数中定义`$el`和`$data`，因为后面的编译要使用到\n\n```js\nclass Vue {\n    constructor(options) {\n        this.$el = options.el; // 挂载\n        this.$data = options.data;\n\n        // 如果有要编译的模板就开始编译\n        if (this.$el) {\n            // 用数据和元素进行编译\n            new Compile(this.$el, this)\n        }\n    }\n}\n```\n- 这里暂时未添加数据劫持`obeserve`，实现目标1暂时未用到，后续再添加\n- 编译需要 `el` 和相关数据，上面代码执行后会有编译，所以我们新建一个执行编译的类的文件\n\n> 这里在入口文件`vue.js`中`new`了一个`Compile`实例，所以接下来新建`compile.js`\n\n### Compile 类-模板编译的添加\n`Compile` 需要做什么？\n我们知道页面中操作`dom`会消耗性能，所以可以把`dom`移入内存处理：\n1. 先把真实的 `dom` 移入到内存中 （在内存中操作`dom`速度比较快）\n    - 怎么放在内存中？可以利用文档碎片 `fragment`\n2. 编译 `compile(fragment){}`\n    - 提取想要的元素节点和文本节点 `v-model` 双大括号，然后进行相关操作。\n3. 把编译好的`fragment`塞回页面里去\n```js\nclass Compile {\n    constructor(el, vm) {\n        this.el = this.isElementNode(el) ? el : document.querySelector(el);\n        this.vm = vm;\n        if (this.el) {// 如果这个元素能获取到 我们才开始编译\n            // 1.先把这些真实的DOM移入到内存中 fragment[文档碎片]\n            let fragment = this.node2fragment(this.el)\n            // 2.编译 => 提取想要的元素节点 v-model 和文本节点 {{}}\n            this.compile(fragment)\n            // 3.编译好的fragment在塞回页面里去\n            this.el.appendChild(fragment)\n        }\n    }\n\n    /* 专门写一些辅助的方法 */\n    isElementNode(node) { // 判断是否为元素及节点，用于递归遍历节点条件\n        return node.nodeType === 1;\n    }\n\n    /* 核心方法 */\n    node2fragment(el) { // 将el的内容全部放入内存中\n        // 文档碎片\n        let fragment = document.createDocumentFragment();\n        let firstChild;\n\n        while (firstChild = el.firstChild) { // 移动DOM到文档碎片中\n            fragment.appendChild(firstChild)\n        }\n        return fragment;\n    }\n    \n    compile(fragment) {\n    }\n}\n```\n> 编译的过程就是把我们的数据渲染好，表现在视图中\n\n#### 编译过程 compile(fragment)\n- 第一步：获取元素的节点，提取其中的指令或者模板双大括号\n    - 首先需要遍历节点，用到了**递归方法**，因为有节点嵌套的关系，`isElementNode` 代表是节点元素，也是递归的终止的判断条件。\n- 第二步：分类编译指令的方法`compileElement` 和 编译文本双大括号的方法\n    - `compileElement` 对`v-model`、`v-text`等指令的解析\n    - `compileText` 编译文本节点 双大括号\n```js\nclass Compile{\n    // ...\n    compile(fragment) {\n        // 遍历节点 可能节点套着又一层节点 所以需要递归\n        let childNodes = fragment.childNodes\n        Array.from(childNodes).forEach(node => {\n            if (this.isElementNode(node)) {\n                // 是元素节点 继续递归\n                // 这里需要编译元素\n                this.compileElement(node);\n                this.compile(node)\n            } else {\n                // 文本节点\n                // 这里需要编译文本\n                this.compileText(node)\n            }\n        })\n    }\n}\n```\n\n##### compileElement && compileText\n1. 取出元素的属性 `node.attributes` 先判断是否包含指令\n2. 判断指令类型(`v-html v-text v-model...`) 调用不一样的数据更新方法\n    - 这里提取了编译的工具对象 `CompileUtil`\n    - 调用方法: `CompileUtil[type](node, this.vm, expr)`\n        - `CompileUtil.类型(节点，实例，v-XX 绑定的属性值)`  \n\n```js\nclass Compile{\n    // ...\n    \n    // 判断是否是指令 ==> compileElement 中递归标签属性中使用\n    isDirective(name) {\n        return name.includes(\'v-\')\n    }\n    \n    compileElement(node) {\n        // v-model 编译\n        let attrs = node.attributes; // 取出当前节点的属性\n        Array.from(attrs).forEach(attr => {\n            let attrName = attr.name;\n            // 判断属性名是否包含 v-\n            if (this.isDirective(attrName)) {\n                // 取到对应的值，放到节点中\n                let expr = attr.value;\n                // v-model v-html v-text...\n                let [, type] = attrName.split(\'-\')\n                CompileUtil[type](node, this.vm, expr);\n            }\n        })\n    }\n    compileText(node) {\n        // 编译 {{}}\n        let expr = node.textContent; //取文本中的内容\n        let reg = /\\{\\{([^}]+)\\}\\}/g;\n        if (reg.test(expr)) {\n            CompileUtil[\'text\'](node, this.vm, expr)\n        }\n    }\n    \n    // compile(fragment){...}\n}\nCompileUtil = {\n    getVal(vm, expr) { // 获取实例上对应的数据\n        expr = expr.split(\'.\'); // 处理 jsonText.text 的情况\n        return expr.reduce((prev, next) => { \n            return prev[next] // 譬如 vm.$data.jsonText.text、vm.$data.message\n        }, vm.$data)\n    },\n    getTextVal(vm, expr) { // 获取文本编译后的结果\n        return expr.replace(/\\{\\{([^}]+)\\}\\}/g, (...arguments) => {\n            return this.getVal(vm, arguments[1])\n        })\n    },\n    text(node, vm, expr) { // 文本处理 参数 [节点, vm 实例, 指令的属性值]\n        let updateFn = this.updater[\'textUpdater\'];\n        let value = this.getTextVal(vm, expr)\n        updateFn && updateFn(node, value)\n    },\n    model(node, vm, expr) { // 输入框处理\n        let updateFn = this.updater[\'modelUpdater\'];\n        updateFn && updateFn(node, this.getVal(vm, expr))\n    },\n    updater: {\n        // 文本更新\n        textUpdater(node, value) {\n            node.textContent = value\n        },\n        // 输入框更新\n        modelUpdater(node, value) {\n            node.value = value;\n        }\n    }\n}\n```\n\n到现在为止 就完成了数据的绑定，也就是说`new Vue` 实例中的 `data` 已经可以正确显示在页面中了，现在要解决的就是**如何实现双向绑定**\n\n结合开篇的`vue`编译过程的图可以知道我们还少一个`observe` 数据劫持，`Dep`通知变化,添加`Watcher`监听变化, 以及最终重写`data`属性\n\n\n## 实现双向绑定\n\n### Observer 类-观察者的添加\n1. 在`vue.js` 中劫持数据\n```js\nclass Vue{\n    //...\n    if(this.$el){\n       new Observer(this.$data); // 数据劫持\n       new Compile(this.$el, this); // 用数据和元素进行编译\n    }  \n}\n```\n2. 新建 `observer.js` 文件\n\n代码步骤：\n- 构造器中添加直接进行 `observe`\n  - 判断`data` 是否存在, 是否是个对象（new Vue 时可能不写`data`属性）\n  - 将数据一一劫持，获取`data`中的`key`和`value`\n```js\nclass Observer {\n    constructor(data) {\n        this.observe(data)\n    }\n\n    observe(data) {\n        // 要对这个数据将原有的属性改成 set 和 get 的形式\n        if (!data || typeof data !== \'object\') {\n            return\n        }\n        // 将数据一一劫持\n        Object.keys(data).forEach(key => {\n            // 劫持\n            this.defineReactive(data, key, data[key])\n            this.observe(data[key]) //递归深度劫持\n        })\n    }\n\n    defineReactive(obj, key, value) {\n        let that = this\n        Object.defineProperty(obj, key, {\n            enumerable: true,\n            configurable: true,\n            get() { // 取值时调用的方法\n                return value\n            },\n            set(newValue) { // 当给data属性中设置的时候，更改属性的值\n                if (newValue !== value) {\n                    // 这里的this不是实例\n                    that.observe(newValue) // 如果是对象继续劫持\n                    value = newValue\n                }\n            }\n        })\n    }\n}\n```\n> 虽然有了`observer`，但是并未关联,以及通知变化。下面就添加`Watcher`类\n\n### Watcher 类的添加\n新建`watcher.js`文件\n- 观察者的目的就是给需要变化的那个元素增加一个观察者，当数据变化后执行对应的方法\n- \n\n先回忆下`watch`的用法：`this.$watch(vm, \'a\', function(){...})`\n我们在添加发布订阅者时需要传入参数有: **vm实例，v-XX绑定的属性, cb回调函数**\n（`getVal` 方法拷贝了之前 `CompileUtil` 的方法，其实可以提取出来的...）\n\n```js\nclass Watcher {\n    // 观察者的目的就是给需要变化的那个元素增加一个观察者，当数据变化后执行对应的方法\n    // this.$watch(vm, \'a\', function(){...})\n    constructor(vm, expr, cb) {\n        this.vm = vm;\n        this.expr = expr;\n        this.cb = cb;\n\n        // 先获取下老的值\n        this.value = this.get();\n    }\n\n    getVal(vm, expr) { // 获取实例上对应的数据\n        expr = expr.split(\'.\');\n        return expr.reduce((prev, next) => { //vm.$data.a\n            return prev[next]\n        }, vm.$data)\n    }\n\n    get() {\n        let value = this.getVal(this.vm, this.expr);\n        return value\n    }\n\n    // 对外暴露的方法\n    update(){\n        let newValue = this.getVal(this.vm, this.expr);\n        let oldValue = this.value\n\n        if(newValue !== oldValue){\n            this.cb(newValue); // 对应 watch 的callback\n        }\n    }\n}\n\n```\n`Watcher` 定义了但是还没有调用，模板编译的时候，需要调观察的时候观察一下\n`Compile`\n```js\nclass Compile{\n    //...\n}\nCompileUtil = {\n    //...\n    text(node, vm, expr) { // 文本处理 参数 [节点, vm 实例, 指令的属性值]\n        let updateFn = this.updater[\'textUpdater\'];\n        let value = this.getTextVal(vm, expr)\n        updateFn && updateFn(node, value)\n\n        expr.replace(/\\{\\{([^}]+)\\}\\}/g, (...arguments) => {\n            new Watcher(vm, arguments[1], () => {\n                // 如果数据变化了，文本节点需要重新获取依赖的属性更新文本中的内容\n                updateFn && updateFn(node, this.getTextVal(vm, expr))\n            })\n        })\n    },\n    //...\n    model(node, vm, expr) { // 输入框处理\n        let updateFn = this.updater[\'modelUpdater\'];\n        // 这里应该加一个监控，数据变化了，应该调用watch 的callback\n        new Watcher(vm, expr, (newValue) => {\n            // 当值变化后会调用cb 将newValue传递过来（）\n            updateFn && updateFn(node, this.getVal(vm, expr))\n        });\n\n        node.addEventListener(\'input\', e => {\n            let newValue = e.target.value;\n            this.setVal(vm, expr, newValue)\n        })\n        updateFn && updateFn(node, this.getVal(vm, expr))\n    },\n    \n    //...\n}\n```\n实现了监听后发现变化并没有通知到所有指令绑定的模板或是双大括号，所以我们需要`Dep` 监控、实例的发布订阅属性的一个类，我们可以添加到`observer.js`中\n\n### Dep 类的添加\n注意 第一次编译的时候不会调用`Watcher`，`dep.target`不存在,`new Watcher`的时候`target`才有值 \n有点绕，看下面代码：\n```js\nclass Watcher {\n    constructor(vm, expr, cb) {\n        //...\n        this.value = this.get()\n    }\n    get(){\n        Dep.target = this;\n        let value = this.getVal(this.vm, this.expr);\n        Dep.target = null;\n        return value\n    }\n    //...\n}\n\n// compile.js\nCompileUtil = {\n    model(node, vm, expr) { // 输入框处理\n        //...\n        new Watcher(vm, expr, (newValue) => {\n            // 当值变化后会调用cb 将newValue传递过来（）\n            updateFn && updateFn(node, this.getVal(vm, expr))\n        });\n    }\n}\n```\n\n```js\nclass Observer{\n    //...\n    defineReactive(obj, key, value){\n        let that = this;\n        let dep = new Dep(); // 每个变化的数据 都会对应一个数组，这个数组存放所有更新的操作\n        Object.defineProperty(obj, key, {\n            //...\n            get(){\n                Dep.target && dep.addSub(Dep.target)\n                //...\n            }\n             set(newValue){\n                 if (newValue !== value) {\n                    // 这里的this不是实例\n                    that.observe(newValue) // 如果是对象继续劫持\n                    value = newValue;\n                    dep.notify(); //通知所有人更新了\n                }\n             }\n        })\n    }\n}\nclass Dep {\n    constructor() {\n        // 订阅的数组\n        this.subs = []\n    }\n\n    addSub(watcher) {\n        this.subs.push(watcher)\n    }\n\n    notify() {\n        this.subs.forEach(watcher => watcher.update())\n    }\n}\n```\n\n以上代码 就完成了**发布订阅者**模式,简单的实现。。也就是说双向绑定的目标2已经完成了\n\n---\n## 结语\n板门弄斧了，本人无意哗众取宠，这只是一篇我的学习记录的文章。想分享出来，这样才有进步。\n如果这篇文章帮助到您，我将十分高兴。有问题可以提`issue`，有错误之处也希望大家能提出来，非常感激。\n\n具体源码我放在了我的github了，有需要的自取。\n[源码链接](https://github.com/gershonv/my-code-store)', 158, '2019-06-04 11:29:39', '2020-01-18 16:27:26', 1, 0, 'd15ab109e41711ec829a8c8caa87c861');
INSERT INTO `article` VALUES (32, '封装组件系列 - el 分页表格', '## 前言\n\n本次封装基于 `antd` 风格, 实现高度可配置的表格封装配置。本来想通过 `vue.extends` 去封装的，奈何几个月没写过 `vue` ，而且对 `vue` 的 `extends` 不熟悉所以放弃了...\n\n之前有小伙伴确实引用了我的代码，发现封装出现了一些纰漏，对此十分抱歉，之前封装的太仓促了。几个月前的代码，现在重新封装又有了新的体会。\n\n更新时间 【2018.11.09】，效果如下：\n\n![](https://user-gold-cdn.xitu.io/2018/11/9/166f7e2fa283341b?w=1896&h=761&f=png&s=84208)\n\n## API 说明\n\n- `columns` : **必选**, 列描述数据对象， Array\n- `dataSource` : **必选**, 数据数组\n- `options` : **必选**, 表格参数控制, maxHeight、stripe 等等..\n- `fetch` : 获取数据的 Function\n- `pagination` : 分页信息，不传则不显示分页\n- `row-click` ：当某一行被点击时会触发该事件\n- `selection-change` : 当选择项发生变化时会触发该事件\n- 其他的 api 可以自行添加\n\n其他说明我在代码注释中写的很清楚了，请自行查看。\n\n根据条件渲染: 只通过 `render` 去判断参数不同而渲染不一样的表格数据。 `render` 函数可以渲染任何你想要的组件\n\n值得注意的是，`this` 对象的绑定不要出错了,如果需要更多增强的功能，各位可以自行添加...\n\n<!--more-->\n\n## Home.vue 组件\n\n```html\n<template>\n    <div>\n      <h2>Home</h2>\n      <CommonTable\n        :columns=\"columns\"\n        :dataSource=\"tableData\"\n        :options=\"options\"\n        :fetch=\"fetchTableData\"\n        :pagination=\"pagination\"\n        @row-click=\"handleRowClick\"\n        @selection-change=\"handleSelectionChange\"\n        />\n    </div>\n</template>\n\n<script>\nimport axios from \'axios\'\nimport CommonTable from \'../components/Table\'\n\nexport default{\n  components:{\n    CommonTable\n  },\n  data(){\n    return {\n      columns: [\n         {\n          prop: \'id\',\n          label: \'编号\',\n          width: 60\n        },\n        {\n          prop: \'title\',\n          label: \'标题\',\n          // render 可以根据你想要渲染的方式渲染\n          // jsx 不提供 v-model 指令，若你想要使用，，推荐使用插件 babel-plugin-jsx-v-model\n          // jsx https://github.com/vuejs/babel-plugin-transform-vue-jsx\n          render: (row, index) => {\n            return (\n              <span style=\"color: blue\" onClick={e => this.handleClick(e, row)}>{row.title}</span>\n            )\n          }\n        },\n        {\n          prop: \'author\',\n          label: \'作者\'\n        },\n        {\n          button: true,\n          label: \'按钮组\',\n          group: [{\n            // you can props => type size icon disabled plain\n            name: \'编辑\',\n            type: \'warning\',\n            icon: \'el-icon-edit\',\n            plain: true,\n            onClick: (row, index) => { // 箭头函数写法的 this 代表 Vue 实例\n              console.log(row, index)\n            }\n          }, {\n            name: \'删除\',\n            type: \'danger\',\n            icon: \'el-icon-delete\',\n            disabled: false,\n            onClick(row) { // 这种写法的 this 代表 group 里的对象\n              this.disabled = true\n              console.log(this)\n            }\n          }]\n        }\n      ],\n      tableData: [\n        {\n          id: 1,\n          title: \'标题1\',\n          author: \'郭大大\'\n        },\n        {\n          id: 2,\n          title: \'标题2\',\n          author: \'郭大大2\'\n        }\n      ],\n      pagination: {\n        total: 0,\n        pageIndex: 1,\n        pageSize: 15\n      },\n      options: {\n        mutiSelect: true,\n        index: true, // 显示序号， 多选则 mutiSelect\n        loading: false, // 表格动画\n        initTable: true, // 是否一挂载就加载数据\n      }\n    }\n  },\n  methods: {\n    handleClick(e, row){\n      //transform-vue-jsx 的nativeOnClick 失效 , 所以采用 event.cancelBubble 控制点击事件的冒泡... 如果点击事件不影响你的点击行事件，可以不传\n      e.cancelBubble = true // 停止冒泡，否则会触发 row-click\n      console.log(row)\n    },\n    fetchTableData() {\n       this.options.loading = true\n       axios.post(\'https://www.easy-mock.com/mock/5b3f80edfa972016b39fefbf/example/tableData\', {\n        pageIndex: this.pagination.pageIndex,\n        pageSize: this.pagination.pageSize\n      }).then(res => {\n        const { list, total } = res.data.data\n        this.tableData = list\n        this.pagination.total = total\n        this.options.loading = false\n      }).catch((error) => {\n        console.log(error)\n        this.options.loading = false\n      })\n    },\n    handleRowClick(row, event, column){ // 点击行的事件，同理可以绑定其他事件\n      console.log(\'click row:\',row, event, column)\n    },\n    handleSelectionChange(selection){\n      console.log(selection)\n    }\n  }\n}\n</script>\n```\n\n## Table.vue 组件\n\n```html\n<template>\n  <div>\n    <el-table\n      v-loading=\"options.loading\"\n      :data=\"dataSource\"\n      :max-height=\"options.maxHeight\"\n      :stripe=\"options.stripe\"\n      :border=\"options.border\"\n      @row-click=\"handleRowClick\"\n      @selection-change=\"handleSelectionChange\"\n      header-row-class-name=\"table-header-row\">\n\n      <!--selection选择框-->\n      <el-table-column v-if=\"options.mutiSelect\" type=\"selection\" style=\"width:50px\" align=\"center\"></el-table-column>\n\n      <!--序号-->\n      <el-table-column v-if=\"options.index\" label=\"序号\" type=\"index\" width=\"50\" align=\"center\"></el-table-column>\n\n      <!--数据列-->\n      <template v-for=\"(column, index) in columns\">\n        <el-table-column\n          :key=\"index\"\n          :prop=\"column.prop\"\n          :label=\"column.label\"\n          :align=\"column.align||\'center\'\"\n          :width=\"column.width\"\n          :fixed=\"column.fixed\">\n          <template slot-scope=\"scope\">\n\n            <template v-if=\"!column.render\">\n              {{scope.row[column.prop]}}\n            </template>\n\n             <!-- render -->\n            <template v-else>\n              <RenderDom :row=\"scope.row\" :index=\"index\" :render=\"column.render\" />\n            </template>\n\n            <!-- render button -->\n            <template v-if=\"column.button\">\n              <template v-for=\"(btn, i) in column.group\">\n                <el-button\n                  :key=\"i\"\n                  :type=\"btn.type\" :size=\"btn.size || \'mini\'\" :icon=\"btn.icon\" :disabled=\"btn.disabled\" :plain=\"btn.plain\"\n                   @click.stop=\"btn.onClick(scope.row, scope.$index)\"\n                  >{{btn.name}}</el-button>\n              </template>\n            </template>\n\n            <!-- slot 你可以其他常用项 -->\n\n          </template>\n\n        </el-table-column>\n      </template>\n\n    </el-table>\n\n     <!-- 分页 -->\n    <el-pagination\n        v-if=\"pagination\"\n        :total=\"pagination.total\"\n        :page-sizes=\"[20, 50, 100, 500, 5000]\"\n        layout=\"total, sizes, prev, pager, next, jumper\"\n        @size-change=\"handleSizeChange\"\n        @current-change=\"handleIndexChange\"\n        style=\"margin-top: 20px;text-align: right\"\n    ></el-pagination>\n\n  </div>\n</template>\n\n<script>\n  export default {\n    components: {\n      RenderDom: {\n        functional: true, // 函数式组件 - 无 data 和 this 上下文 => better render\n        props: {\n          row: Object,\n          index: Number,\n          render: Function\n        },\n        /**\n         * @param {Function} createElement - 原生创建dom元素的方法， 弃用，推荐使用 jsx\n         * @param {Object} ctx - 渲染的节点的this对象\n         * @argument 传递参数 row index\n         */\n        render(createElement, ctx){\n          const { row, index } = ctx.props\n          return ctx.props.render(row, index)\n        }\n      }\n    },\n    props:{\n      dataSource: Array,\n      options: Object,   // 表格参数控制 maxHeight、stripe 等等...\n      columns: Array,\n      fetch: Function,   // 获取数据的函数\n      pagination: Object // 分页，不传则不显示\n    },\n    created() {\n      // 传入的options覆盖默认设置\n      this.$parent.options = Object.assign({\n          maxHeight: 500,\n          stripe: true, // 是否为斑马纹\n          border: true\n      }, this.options)\n\n      this.options.initTable && this.fetch()\n    },\n    methods: {\n      handleSizeChange(size) { // 切换每页显示的数量\n        this.pagination.pageSize = size\n        this.fetch()\n      },\n      handleIndexChange(current) { // 切换页码\n        this.pagination.pageIndex = current\n        this.fetch()\n      },\n      handleSelectionChange(selection) {\n        this.$emit(\'selection-change\', selection)\n      },\n      handleRowClick(row, event, column) {\n        this.$emit(\'row-click\', row, event, column)\n      }\n    }\n  }\n</script>\n\n<style>\n.el-table th,\n.el-table tr.table-header-row {\n  background: #e5c5d2; /* 示例， 对表格样式上的修饰 */\n}\n</style>\n```\n\n## 结语\n\n上述代码封装完整性可能不是这么高，但思路在呢，如果需要更多配置，各位可以在进行加强...\n\n吐槽一下，本来是想 `props` 数据来重写 `table` 参数，类似 `react`:\n\n```jsx\n<Home>\n  <ComonTable {...props} >\n</Home>\n\n// ComonTable\n<el-table {...props.options}>\n</el-table>\n```\n\n所以想到继承，自己又不熟悉。 而且发现 `vue` 展开绑定多个属性是不可以的： 可能是我没 `google` 到。如果可以，请大佬告知一声，谢谢\n\n[jsx 语法快速入门](https://github.com/vuejs/babel-plugin-transform-vue-jsx)', 39, '2019-06-03 13:39:30', '2020-01-20 11:50:22', 1, 0, 'd15ab109e41711ec829a8c8caa87c861');
INSERT INTO `article` VALUES (37, 'HTTP - 导学', '## 经典五层网络模型\n\n![](https://user-gold-cdn.xitu.io/2018/11/20/16730e533ec09d3a?w=1360&h=947&f=png&s=282764)\n\n在每一台电脑，每个服务器都有这这几个网络模型层级来维护整个网络数据传输过程。\n\n### 一张图了解 TCP/IP 五层网络模型\n\n![](https://user-gold-cdn.xitu.io/2018/11/20/167316845f6dde61?w=1255&h=629&f=jpeg&s=180804)\n\n- **物理层**：将信息编码成电流脉冲或其它信号用于网上传输；（电线、光缆等）\n- **数据链路层**：数据链路层通过物理网络链路供数据传输。可以简单的理解为：规定了 0 和 1 的分包形式，确定了网络数据包的形式。\n- **网络层**：网络层负责在源和终点之间建立连接;（路由器等）\n- **传输层**： 敲重点！\n  > 传输层向用户提供可靠的端对端(`End-to-End`)服务。 常用的（`TCP／IP`）协议 、`UDP` 协议；\n- **应用层**：敲重点！\n  > 为应用软件提供了很多服务，帮我们实现了 `HTTP` 协议，我们只要按照规则去使用 `HTTP` 协议；它构建于 `TCP` 协议之上；屏蔽了网络传输相关细节。\n\n重点在 **应用层** 和 **传输层** 上：`http` 是在应用层上去实现的，而 `http` 协议基于传输层的 `TCP` `UDP` 协议。\n\n<!--more-->\n\n## HTTP 发展历史\n\n### HTTP/0.9\n\n> 1. `HTTP/0.9` 只支持一种方法—— `Get`，请求只有一行\n> 2. 没有 `header` 等描述数据的信息\n> 3. 服务器发送完毕，就关闭 `TCP` 连接\n\n### HTTP/1.0\n\n> 1. 请求与响应支持 `header`，增加了`状态码`，响应对象的一开始是一个响应状态行\n> 2. 协议版本信息需要随着请求一起发送，支持 `HEAD`，`POST` 方法\n\n### HTTP/1.1\n\n在 `HTTP/1.0` 上增加了一些功能来优化网络链接的过程：\n\n1. **持久连接**\n   > `HTTP/1.0` 版本里一个 HTTP 请求就要在客户端和服务端之间创建一次 `TCP` 连接，在服务器返回完内容后就关闭了。相对来说消耗比较高。\n2. **pipeline**\n   > 我们可以在同个连接里发送多个请求，但是服务端要对这些请求都是要按照顺序进行内容的返回。\n   > 前一个请求等待时间较长，后一个请求处理较快，后一个请求也不能进行内容响应，需要等前一个请求完成后才可响应下次请求，这也是**串行/并行**的概念，而这个在 `HTTP/2.0` 中做了优化\n3. **host 和其他一些命令**\n   > 有了 `host` 之后可以在同一台服务器（物理服务器）同时跑多个不同的 web 服务 ，比如说 `node.js` 的服务、`java` 的服务。\n4. **引入更多缓存控制机制**：如 `etag`，`cache-control`\n5. ...\n\n### HTTP/2.0\n\n1. 使用二进制分帧层\n   > 在 `HTTP/1.1` 中大部分的数据传输都是以字符串方式进行的，`HTTP/2.0` 则在应用层与传输层之间增加一个二进制分帧层。\n   > 同样因为这个好处，`pipeline` 在同个连接里发送多个请求不再需要按照顺序来返回处理。\n2. 头部压缩\n   > 头信息压缩：在 `HTTP/1.1` 里面，我们每次发送和返回请求 `http header` 都是必须要进行完整的发送和返回的，占用带宽。\n   > 使用首部表来跟踪和存储之前发送的键值对，对于相同的内容，不会再每次请求和响应时发送。\n3. 服务端推送\n   > 在 `HTTP/2.0` 中，服务器可以向客户发送请求之外的内容，比如正在请求一个页面时，服务器会把页面相关的 `logo`，`CSS` 等文件直接推送到客户端，而不会等到请求来的时候再发送，因为服务器认为客户端会用到这些东西。这相当于在一个 `HTML` 文档内集合了所有的资源。\n4. ...\n\n## HTTP 的三次握手\n\n[http-tcp 的三次握手四次挥手](https://gershonv.github.io/2018/11/20/http-TCP/)\n\n## URI-URL 和 URN\n\n![](http://ww4.sinaimg.cn/mw690/6941baebgw1evu0o8swewj20go0avq3e.jpg)\n\n- `URI` : `Uniform Resource Identifier`/统一资源标志符\n  - `URL` 和 `URN` 都是 `URI` 的子集\n    > 统一资源标识符（`URI`）提供了一个简单、可扩展的资源标识方式。\n- `URL` : `Uniform Resource Locator`/统一资源定位器\n  - URL 是 Internet 上用来描述信息资源的字符串，主要用在各种 WWW 客户程序和服务器程序上。\n  - 采用 URL 可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等。\n  ```js\n  ;`http://user:pass@host.com:80/path?query=string#hash` // @example url 的组成\n  /**\n   * http:// ===> 协议，类似的还有 ftp、https 等\n   * user:pass@host.com:80 ===> 存有该资源的主机IP地址（有时也包括端口号）\n   * /path ===> 主机资源的具体地址。如目录和文件名等。\n   */\n  ```\n- `URN` : 永久统一资源定位符\n  - 在资源移动之后还能被找到\n\n## HTTP 报文\n\n### 请求行\n\n> 声明 请求方法 、主机域名、资源路径 & 协议版本\n\n请求行的组成 = 请求方法 + 请求路径 + 协议版本\n\n```js\nGET /test/hi-there.txt HTTP/1.0\n// 请求行的组成 = 请求方法 + 请求路径 + 协议版本\n```\n\n![](https://user-gold-cdn.xitu.io/2018/9/10/165c0f27ea8bff3b?imageslim)\n\n### 请求头\n\n> 声明 客户端、服务器 / 报文的部分信息\n\n1. 请求和响应报文的通用 Header\n   ![](https://user-gold-cdn.xitu.io/2018/9/10/165c0f27eb051d58?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n2. 常见请求 Header\n   ![](https://user-gold-cdn.xitu.io/2018/9/10/165c0f27ebf1b79f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n### 请求体\n\n> 存放 需发送给服务器的数据信息\n\n![](https://user-gold-cdn.xitu.io/2018/9/10/165c0f28437eb63d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n除此外还有响应报文，略\n\n## 创建一个简单的 http 服务\n\n```js\nconst http = require(\'http\')\n\nhttp\n  .createServer(function(request, response) {\n    console.log(\'request come\', request.url)\n    response.end(\'123\')\n  })\n  .listen(8888)\n```', 6, '2019-02-11 12:52:15', '2020-01-15 00:53:34', 1, 0, 'd15ab109e41711ec829a8c8caa87c861');
INSERT INTO `article` VALUES (38, 'HTTP - TCP 三次握手四次挥手', '## TCP 的三次握手\n\n> `HTTP` 请求与 `TCP` 链接之间的关系，在客户端向服务端请求和返回的过程中，是需要去创建一个 `TCP connection`，因为 `HTTP` 是不存在链接这样一个概念的，它只有请求和响应这样一个概念，请求和响应都是一个数据包，中间要通过一个传输通道，这个传输通道就是在 `TCP` 里面创建了一个从客户端发起和服务端接收的一个链接，`TCP` 链接在创建的时候是有一个三次握手(三次网络传输)这样一个消耗在的。\n\n下面是 `TCP` 报文格式图：\n\n![](https://user-gold-cdn.xitu.io/2018/11/21/1673405dad1eced0?w=500&h=380&f=jpeg&s=32339)\n↓↓↓↓\n![](https://user-gold-cdn.xitu.io/2018/11/21/1673405e30495223?w=1046&h=402&f=png&s=27889)\n\n有几个字段需要重点介绍下：\n\n1. Seq 序号: `sequeence number`，用来标识从 TCP 源端向目的端发送的字节流，发起方发送数据时对此进行标记。\n2. 确认序号：`acknowledgment number`，只有 ACK 标志位为 1 时，确认序号字段才有效，`Ack=Seq+1`。\n3. 标志位：共 6 个，即 URG、ACK、PSH、RST、SYN、FIN 等，具体含义如下：\n   - `URG`：紧急指针（urgent pointer）有效。\n   - `ACK`：确认序号有效。\n   - `PSH`：接收方应该尽快将这个报文交给应用层。\n   - `RST`：重置连接。\n   - `SYN`：发起一个新连接。\n   - `FIN`：释放一个连接。\n\n<!--more-->\n\n### 第一次握手\n\n> 客户端发送一个 `TCP` 的 `SYN` 标志位置 1 的包指明客户打算连接的服务器的端口，以及初始序号 X,保存在包头的序列号(`Sequence Number`)字段里。\n\n- **简单记忆： 建立连接，等待服务器确认**\n\n![](https://user-gold-cdn.xitu.io/2017/11/9/6b568a608edadc13bc9be7721b00e48a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n- `Sequeence Number` = X => 标识字节流字段为 X\n- `SYN` = 1 => 发起一个新连接，序号为 1\n\n### 第二次握手\n\n> 服务器发回确认包(ACK)应答。即 SYN 标志位和 ACK 标志位均为 1 同时，将确认序号(Acknowledgement Number)设置为客户的 I S N 加 1 以.即 X+1。\n\n- **简单记忆： 服务器收到请求后确认联机**\n\n![](https://user-gold-cdn.xitu.io/2017/11/9/02f7809aa0b7b0b5db477e180f408535?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n- `Sequeence Number` = Y => 标识字节流字段为 Y\n- `acknowledgment number` = X + 1 => 确认序号为 X + 1\n- `SYN` = 1 => 发起一个新连接，序号为 1\n- `ACK` = 1 => 确认序号有效\n\n### 第三次握手\n\n> 客户端再次发送确认包(ACK)SYN 标志位为 0,ACK 标志位为 1.并且把服务器发来 ACK 的序号字段+1,放在确定字段中发送给对方.并且在数据段放写 ISN 的+1\n\n- **简单记忆：检查 ACK 是否正确, 若正确则建立连接。**\n\n![](https://user-gold-cdn.xitu.io/2017/11/9/c052d0061d70d359e1ac0b5fc48d844a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n- `acknowledgment number` = Y + 1 => 确认序号为 Y + 1\n- `ACK` = 1 => 确认序号有效\n\n## TCP 四次挥手\n\n`TCP`的连接的拆除需要发送四个包，因此称为四次挥手(`four-way handshake`)。客户端或服务器均可主动发起挥手动作，在 socket 编程中，任何一方执行 close()操作即可产生挥手操作。\n\n![](https://user-gold-cdn.xitu.io/2017/11/9/8c7874fafe233c9278509e40e906055c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n### 为什么建立连接是三次握手，而关闭连接却是四次挥手呢？\n\n这是因为服务端在 `LISTEN` 状态下，收到建立连接请求的 `SYN` 报文后，把 `ACK` 和 `SYN` 放在一个报文里发送给客户端。\n而关闭连接时，当收到对方的 `FIN` 报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方也未必全部数据都发送给对方了，所以己方可以立即 `close`，也可以发送一些数据给对方后，再发送 `FIN` 报文给对方来表示同意现在关闭连接，因此，己方 `ACK` 和 `FIN` 一般都会分开发送。', 8, '2019-02-11 12:53:20', '2020-01-01 14:13:15', 1, 0, 'd15ab109e41711ec829a8c8caa87c861');
INSERT INTO `article` VALUES (39, 'HTTP - 跨域', '## 什么是跨域\n\n> 跨域，是指浏览器不能执行其他网站的脚本。它是由**浏览器的同源策略**造成的，是浏览器对 JavaScript 实施的安全限制。\n\n我们可以简单的重现浏览器的跨域问题：\n\n- `server.js` 模拟客户端：\n\n```js\nconst http = require(\'http\')\nconst fs = require(\'fs\')\n\nhttp\n  .createServer(function(request, response) {\n    console.log(\'request come\', request.url)\n    const html = fs.readFileSync(\'demo.html\', \'utf8\')\n    response.writeHead(200, {\n      \'Content-Type\': \'text/html\'\n    })\n    response.end(html)\n  })\n  .listen(3300) // http://127.0.0.1:3300\n```\n\n- `demo.html` 展示的页面：\n\n```html\n<body>\n  <div>demo.html</div>\n  <script>\n    const xhr = new XMLHttpRequest()\n    xhr.open(\'GET\', \'http://127.0.0.1:6060\')\n    xhr.send()\n  </script>\n</body>\n```\n\n- `server2.js` 模拟服务端：\n\n```js\nconst http = require(\'http\')\n\nhttp\n  .createServer(function(request, response) {\n    console.log(\'request come\', request.url)\n    response.end(\'server2 response\')\n  })\n  .listen(6060)\n\nconsole.log(\'server listening on 6060\')\n```\n\n打开 `http://127.0.0.1:3300` 即可看到\n\nAccess to XMLHttpRequest at \'`http://127.0.0.1:6060/`\' from origin \'`http://127.0.0.1:3300`\' has been blocked by CORS policy: No \'Access-Control-Allow-Origin\' header is present on the requested resource.\n\n后续将讲到如何去解决这个问题。\n\n<!--more-->\n\n## 常见的跨域场景\n\n> 所谓的同源是指，域名、协议、端口均为相同。\n\n```\nURL                                      说明                    是否允许通信\nhttp://www.domain.com/a.js\nhttp://www.domain.com/b.js         同一域名，不同文件或路径           允许\nhttp://www.domain.com/lab/c.js\n\nhttp://www.domain.com:8000/a.js\nhttp://www.domain.com/b.js         同一域名，不同端口                不允许\n\nhttp://www.domain.com/a.js\nhttps://www.domain.com/b.js        同一域名，不同协议                不允许\n\nhttp://www.domain.com/a.js\nhttp://192.168.4.12/b.js           域名和域名对应相同ip              不允许\n\nhttp://www.domain.com/a.js\nhttp://x.domain.com/b.js           主域相同，子域不同                不允许\nhttp://domain.com/c.js\n\nhttp://www.domain1.com/a.js\nhttp://www.domain2.com/b.js        不同域名                         不允许\n```\n\n跨域的解决方法如下\n\n## JSONP\n\n> `HTML` 标签里，一些标签比如 `script、img` 这样的获取资源的标签是没有跨域限制的\n\n`jsonp` 原生的实现方式（以前面的代码为例）\n\n- `demo.html`\n\n```html\n<body>\n  <div>demo.html</div>\n  <script>\n    // 1. 动态创建 script，并引入地址；2. 插入html中；3.通过callback 回调得到数据\n    let script = document.createElement(\'script\')\n    script.src = \'http://127.0.0.1:6060/login?username=guodada&callback=onBack\'\n    document.body.appendChild(script)\n    function onBack(res) {\n      console.log(res)\n    }\n  </script>\n</body>\n```\n\n- `server2.js` 服务端：\n\n```js\nconst http = require(\'http\')\nconst url = require(\'url\')\n\nhttp\n  .createServer(function(request, response) {\n    console.log(\'request come\', request.url)\n    const data = { name: \'guodada\' } // 需要传递的数据\n\n    const { callback } = url.parse(request.url, true).query // 处理 get 请求, 拿到callback\n\n    response.writeHead(200, { \'Content-Type\': \'application/json;charset=utf-8\' })\n    const jsonpCallback = callback + `(${JSON.stringify(data)})` // 相当于 onBack({\"name\":\"guodada\"})\n    response.end(jsonpCallback)\n  })\n  .listen(6060)\n\nconsole.log(\'server listening on 6060\')\n```\n\n虽然这种方式非常好用，但是一个最大的缺陷是，只能够实现 `get` 请求\n\n## CORS\n\n### 简介\n\n因为是目前主流的跨域解决方案。`CORS` 是一个 W3C 标准，全称是\"跨域资源共享\"（`Cross-origin resource sharing`）。它允许浏览器向跨源服务器，发出 `XMLHttpRequest` 请求，从而克服了 `AJAX` 只能同源使用的限制。\n\n`CORS` 需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE 浏览器不能低于 `IE10`。IE8+：IE8/9 需要使用 `XDomainRequest` 对象来支持 `CORS`。\n\n整个 `CORS` 通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，`CORS` 通信与同源的 `AJAX` 通信没有差别，代码完全一样。浏览器一旦发现 `AJAX` 请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。因此，实现 `CORS` 通信的关键是服务器。只要服务器实现了 `CORS` 接口，就可以跨源通信。\n\n浏览器将 `CORS` 请求分成两类：简单请求（`simple request`）和非简单请求（`not-so-simple request`）。\n只要同时满足以下两大条件，就属于简单请求。\n\n1. 请求方式为 `HEAD`、`POST` 或者 `GET`\n2. HTTP 的头信息不超出以下几种字段：\n   - `Accept`\n   - `Accept-Language`\n   - `Content-Language`\n   - `Last-Event-ID`\n   - Content-Type：只限于三个值 `application/x-www-form-urlencoded`、`multipart/form-data`、`text/plain`\n\n### 简单请求\n\n> 对于简单请求，浏览器直接发出 `CORS` 请求。具体来说，就是在头信息之中，增加一个 `Origin` 字段。 下面是一个例子，浏览器发现这次跨源 `AJAX` 请求是简单请求，就自动在头信息之中，添加一个 `Origin` 字段。\n\n`server2.js`\n\n```js\nconst http = require(\'http\')\n\nhttp\n  .createServer(function(request, response) {\n    console.log(\'request come\', request.url)\n\n    response.writeHead(200, {\n      \'Access-Control-Allow-Origin\': \'http://127.0.0.1:3300\', // 只有 http://127.0.0.1:3300 才能访问\n      \'Access-Control-Allow-Credentials\': true, // 允许携带 cookie\n      \'Content-Type\': \'text/html; charset=utf-8\'\n    })\n\n    response.end(\'hello cors\')\n  })\n  .listen(6060)\n\nconsole.log(\'server listening on 6060\')\n```\n\n- `demo.html`\n\n```html\n<body>\n  <div>demo.html</div>\n  <script>\n    const xhr = new XMLHttpRequest()\n    xhr.withCredentials = true // server: \'Access-Control-Allow-Credentials\': true\n\n    xhr.open(\'GET\', \'http://127.0.0.1:6060\')\n    xhr.setRequestHeader(\'Content-Type\', \'application/x-www-form-urlencoded\')\n    xhr.send()\n  </script>\n</body>\n```\n\n- `Access-Control-Allow-Origin` : 该字段是必须的。它的值要么是请求时 `Origin` 字段的值，要么是一个`*`，表示接受任意域名的请求\n- `Access-Control-Allow-Credentials`: 表示是否允许发送 `Cookie`\n- `Access-Control-Expose-Headers`: CORS 请求时，`XMLHttpRequest` 对象的 `getResponseHeader()`方法只能拿到 6 个基本字段：`Cache-Control`、`Content-Language`、`Content-Type`、`Expires`、`Last-Modified`、`Pragma`。如果想拿到其他字段，就必须在 `Access-Control-Expose-Headers` 里面指定。\n\n#### withCredentials 属性\n\n上面说到，CORS 请求默认不发送 `Cookie` 和 `HTTP` 认证信息。如果要把 `Cookie` 发到服务器，一方面要服务器同意，指定 `Access-Control-Allow-Credentials` 字段。\n\n否则，即使服务器同意发送 `Cookie`，浏览器也不会发送。或者，服务器要求设置 `Cookie`，浏览器也不会处理。 但是，如果省略 `withCredentials` 设置，有的浏览器还是会一起发送 `Cookie`。这时，可以显式关闭 `withCredentials`。\n\n需要注意的是，如果要发送 `Cookie`，`Access-Control-Allow-Origin` 就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，`Cookie` 依然遵循同源政策，只有用服务器域名设置的 `Cookie` 才会上传，其他域名的 `Cookie` 并不会上传，且（跨源）原网页代码中的 `document.cookie` 也无法读取服务器域名下的 `Cookie`。\n\n### 非简单请求\n\n> 非简单请求是那种对服务器有特殊要求的请求，比如请求方法是 `PUT` 或 `DELETE`，或者 `Content-Type` 字段的类型是 `application/json`。\n\n非简单请求的 `CORS` 请求，会在正式通信之前，增加一次 `HTTP` 查询请求，称为\"预检\"请求（`preflight`）。\n\n浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些 `HTTP` 动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的 `XMLHttpRequest` 请求，否则就报错。\n\n- `demo.html`\n\n```js\n// 部分代码\nconst xhr = new XMLHttpRequest()\nxhr.withCredentials = true // 允许携带 cookie\n\nxhr.open(\'PUT\', \'http://127.0.0.1:6060\') // 使用 put 请求，server：\'Access-Control-Request-Method\': \'PUT\'\nxhr.setRequestHeader(\'X-Test-Cors\', \'123\') // 设置预检头\nxhr.send()\n```\n\n- `server2.js`\n\n```js\nconst http = require(\'http\')\n\nhttp\n  .createServer(function(request, response) {\n    response.writeHead(200, {\n      \'Access-Control-Allow-Origin\': \'http://127.0.0.1:3300\', // 只有 http://127.0.0.1:3300 才能访问\n      \'Access-Control-Allow-Credentials\': true, // 允许携带 cookie\n      \'Access-Control-Allow-Headers\': \'X-Test-Cors\', // 预检\n      \'Access-Control-Allow-Methods\': \'POST, PUT, DELETE\', // 支持\n      \'Access-Control-Max-Age\': \'1000\' // 指定本次预检请求的有效期，单位为秒\n    })\n\n    response.end(\'hello cors\')\n  })\n  .listen(6060)\n\nconsole.log(\'server listening on 6060\')\n```\n\n- `Access-Control-Allow-Methods`: 返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次\"预检\"请求。\n- `Access-Control-Allow-Headers`: 如果浏览器请求包括 `Access-Control-Request-Headers` 字段，则 `Access-Control-Allow-Headers` 字段是必需的。\n- `Access-Control-Max-Age`: 用来指定本次预检请求的有效期，单位为秒。\n\n`CORS` 与 `JSONP` 的使用目的相同，但是比 `JSONP` 更强大。`JSONP` 只支持 `GET` 请求，`CORS` 支持所有类型的 `HTTP` 请求。`JSONP` 的优势在于支持老式浏览器，以及可以向不支持 `CORS` 的网站请求数据。\n\n## postMessage\n\n.... 略\n\n## window.name + iframe\n\n.... 略\n\n\n## 参考\n\n- [正确面对跨域，别慌](https://juejin.im/post/5a2f92c65188253e2470f16d#heading-5)', 13, '2019-02-11 12:53:54', '2019-12-29 13:14:37', 1, 0, 'd15ab109e41711ec829a8c8caa87c861');
INSERT INTO `article` VALUES (40, 'HTTP - 缓存机制', '## 缓存实现的步骤\n\n- 首先是当用户请求资源时，会判断是否有缓存，如果没有，则会向原服务器请求资源。\n- 如果有缓存，则会进入强缓存的范畴，判断缓存是否新鲜\n  - 如果缓存新鲜，则会直接返回缓存副本给客户端。\n  - 如果缓存不新鲜了，则表示强缓存失败，将会进入到**协商缓存**。\n- 协商缓存将判断是否存在 `Etag` 和 `Last-Modified` 首部\n  - 如果未发生变化，则表示命中了协商缓存，会重定向到缓存副本，将资源返回给客户端\n  - 否则的话表示协商缓存未命中，服务器会返回新的资源。\n\n![](https://user-gold-cdn.xitu.io/2018/11/4/166de9f3ae4b1f20?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n## 强缓存\n\n> 服务端告知客户端缓存时间后，由客户端判断并决定是否使用缓存。\n\n强缓存是通过 `Expires` 首部或 `Cache-Control: max-age` 来实现的。\n\n- `Expires`: 响应头，代表该资源的过期时间。\n- `Cache-Control`: 请求/响应头，缓存控制字段，精确控制缓存策略。\n\n<!--more-->\n\n`server.js` - demo\n\n```js\nconst http = require(\'http\')\n\nhttp\n  .createServer(function(request, response) {\n    response.writeHead(200, {\n      \'Content-Type\': \'text/javascript\',\n      \'Conche-Control\': \'max-age=2000, public\' // 缓存时间 2000s；public: 资源允许被中间服务器缓存\n    })\n    response.end(\"console.log(\'script loaded\')\")\n  })\n  .listen(3301)\n\nconsole.log(\'http://127.0.0.1:3301\')\n```\n\n### Expires(HTTP/1.0)\n\n`Expires` 和 `Cache-Control: max-age` 都是用来标识资源的过期时间的首部。\n\n由于 `expires` 是一个绝对时间，如果人为的更改时间，会对缓存的有效期造成影响，使缓存有效期的设置失去意义。因此在 `http1.1` 中我们有了 `expires` 的完全替代首部 `cache-control：max-age`\n\n### Cache-Control(HTTP/1.1)\n\n除了可以设置 `max-age` 相对过期时间以外，还可以设置成如下几种值：\n\n- `public`，资源允许被中间服务器缓存。\n\n  > 浏览器请求服务器时，如果缓存时间没到，中间服务器直接返回给浏览器内容，而不必请求源服务器。\n\n- `private`，资源不允许被中间代理服务器缓存\n\n  > 浏览器请求服务器时，中间服务器都要把浏览器的请求透传给服务器。\n\n- `no-cache`，浏览器不做缓存检查。\n\n  > 每次访问资源，浏览器都要向服务器询问，如果文件没变化，服务器只告诉浏览器继续使用缓存（304）。\n\n- `no-store`，浏览器和中间代理服务器都不能缓存资源。\n  > 每次访问资源，浏览器都必须请求服务器，并且，服务器不去检查文件是否变化，而是直接返回完整的资源。\n- `must-revalidate`，可以缓存，但是使用之前必须先向源服务器确认。\n- `proxy-revalidate`，要求缓存服务器针对缓存资源向源服务器进行确认。\n- `s-maxage`：缓存服务器对资源缓存的最大时间。\n\n`Cache-Control` 对缓存的控制粒度更细，包括缓存代理服务器的缓存控制。\n\n## 协商缓存\n\n> 由服务端决定并告知客户端是否使用缓存。\n\n协商缓存机制下，浏览器需要向服务器去询问缓存的相关信息，进而判断是重新发起请求、下载完整的响应，还是从本地获取缓存的资源。\n协商缓存是通过请求头 `Last-Modified` 或 `Etag` 来实现的。\n\n- `Last-Modified` 标识的是文档最后修改时间\n- `Etag` 则是以文档内容来进行编码的。\n\n### Last-Modified\n\n> 响应头，资源最近修改时间，由服务器告诉浏览器。\n\n`Last-Modified` （上次修改时间）主要配合 `If-Modified-Since` 或者 `If-Unmodified-Since` 使用， 对比上次修改时间以验证资源是否需要更新\n\nIf-Modified-Since: 请求头\n\n![](https://user-gold-cdn.xitu.io/2018/11/4/166de151763c87aa?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n- 首次请求资源时，服务器在返回资源的同时，会在 `Response Headers` 中写入 `Last-Modified` 首部，表示该资源在服务器上的最后修改时间。\n- 当再次请求该资源时，会在 `Request Headers` 中写入 `If-Modified-Since` 首部，此时的 `If-Modified-Since` 的值是首次请求资源时所返回的 `Last-Modified` 的值。\n- 服务器接收到请求后，会根据 `If-Modified-Since` 的值判断资源在该日期之后是否发生过变化。\n- 如果没有，则会返回 `304 Not Modified`;如果变化了，则会返回变化过后的资源，同时更新 `Last-Modified` 的值。\n\n1. 资源未更新 network 面板截图\n   ![](https://user-gold-cdn.xitu.io/2018/11/23/1673e75620b00e06?w=848&h=520&f=png&s=224745)\n\n2. 资源发生更新 network 面板截图\n   ![](https://user-gold-cdn.xitu.io/2018/11/23/1673e7991fe685a1?w=935&h=484&f=png&s=245226)\n   可以看到 `Last-Modified` 和 `If-Modified-Since` 标识的时间不一样\n\n- `server.js` - demo\n\n```js\nconst http = require(\'http\')\n\nhttp\n  .createServer(function(request, response) {\n    response.writeHead(200, {\n      \'Content-Type\': \'text/javascript\',\n      \'Conche-Control\': \'max-age=2000, public\', // 缓存时间 2000s；public: 资源允许被中间服务器缓存\n      \'Last-Modified\': \'123\'\n    })\n    response.end(\"console.log(\'script loaded\')\")\n  })\n  .listen(3301)\n\nconsole.log(\'http://127.0.0.1:3301\')\n```\n\n### Etag\n\n> 响应头，资源标识，由服务器告诉浏览器。\n\n`Etag` 和 `If-None-Match` 配合使用， （文件内容对比）对比资源的签名来决定是否使用缓存。\n\n- `server.js` - demo\n\n```js\nconst http = require(\'http\')\n\nhttp\n  .createServer(function(request, response) {\n    const etag = request.headers[\'if-none-match\']\n    if (etag === \'777\') {\n      response.writeHead(304, {\n        \'Content-Type\': \'text/javascript\',\n        \'Cache-Control\': \'max-age=120, no-cache\', // 缓存时间 120s；no-cache: 浏览器不做缓存检查\n        \'Last-Modified\': \'123\',\n        Etag: \'777\'\n      })\n      response.end()\n    } else {\n      // etag change\n      response.writeHead(200, {\n        \'Content-Type\': \'text/javascript\',\n        \'Conche-Control\': \'max-age=120, no-cache\', // 缓存时间 120s；no-cache: 浏览器不做缓存检查\n        \'Last-Modified\': \'123\',\n        Etag: \'777\'\n      })\n      response.end(\"console.log(\'script loaded\')\")\n    }\n  })\n  .listen(3301)\n\nconsole.log(\'http://127.0.0.1:3301\')\n```\n\n## 总结与缓存方案\n\n![](https://user-gold-cdn.xitu.io/2018/8/13/16531214dfa218be?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n1. 服务器和浏览器约定资源过期时间 `Cache-Control: expires=xxx`\n2. 服务器告诉浏览器资源上次修改时间 `Last-Modified`\n3. 增加相对时间的控制 `Cache-Control: max-age=xxx`\n4. 增加文件内容对比，引入`Etag`\n\n缓存优先级\n\n> `Pragma` > `Cache-Control` > `Expires` > `ETag` > `Last-Modified`\n\n参考与相关链接：\n\n- [浅谈 HTTP 缓存](https://juejin.im/post/5bdeabbbe51d4505466cd741#heading-25)\n- [面试精选之 http 缓存](https://juejin.im/post/5b3c87386fb9a04f9a5cb037#heading-0)', 4, '2019-02-11 12:54:29', '2019-12-29 13:36:16', 1, 0, 'd15ab109e41711ec829a8c8caa87c861');
INSERT INTO `article` VALUES (41, 'HTTP - keep-alive', '## HTTP 协议是无状态的\n\n`HTTP` 协议是无状态的，指的是协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。也就是说，打开一个服务器上的网页和你之前打开这个服务器上的网页之间没有任何联系。`HTTP` 是一个无状态的面向连接的协议，无状态不代表 `HTTP` 不能保持 `TCP` 连接，更不能代表 `HTTP` 使用的是 `UDP` 协议（无连接）。\n\n## 什么是长连接、短连接？\n\n在 `HTTP/1.0` 中，默认使用的是短连接。也就是说，浏览器和服务器每进行一次 `HTTP` 操作，就要经过[三次握手](https://gershonv.github.io/2018/11/21/http-TCP/)建立一次连接，但任务结束就中断连接。\n\n客户端浏览器访问的某个 `HTML` 或其他类型的 `Web` 页中包含有其他的 `Web` 资源，如 JavaScript 文件、图像文件、CSS 文件等；当浏览器每遇到这样一个 Web 资源，就会建立一个 HTTP 会话。但从  `HTTP/1.1` 起，默认使用长连接，用以保持连接特性。使用长连接的 HTTP 协议，会在响应头有加入这行代码：\n\n```js\n\'Connection\': \'keep-alive\'\n```\n<!--more-->\n\n## 实战\n\n- `test.html`\n\n```html\n<body>\n  <img src=\"/test1.jpg\" alt=\"\" /> <img src=\"/test2.jpg\" alt=\"\" />\n  <img src=\"/test3.jpg\" alt=\"\" /> <img src=\"/test4.jpg\" alt=\"\" />\n  <img src=\"/test5.jpg\" alt=\"\" /> <img src=\"/test6.jpg\" alt=\"\" />\n  <img src=\"/test7.jpg\" alt=\"\" /> <img src=\"/test11.jpg\" alt=\"\" />\n  <img src=\"/test12.jpg\" alt=\"\" /> <img src=\"/test13.jpg\" alt=\"\" />\n  <img src=\"/test14.jpg\" alt=\"\" /> <img src=\"/test15.jpg\" alt=\"\" />\n  <img src=\"/test16.jpg\" alt=\"\" /> <img src=\"/test17.jpg\" alt=\"\" />\n  <img src=\"/test111.jpg\" alt=\"\" /> <img src=\"/test112.jpg\" alt=\"\" />\n  <img src=\"/test113.jpg\" alt=\"\" /> <img src=\"/test114.jpg\" alt=\"\" />\n  <img src=\"/test115.jpg\" alt=\"\" /> <img src=\"/test116.jpg\" alt=\"\" />\n</body>\n```\n\n- `server.js`\n\n```js\nconst http = require(\'http\')\nconst fs = require(\'fs\')\n\nhttp\n  .createServer(function(request, response) {\n    console.log(\'request come\', request.url)\n\n    const html = fs.readFileSync(\'test.html\', \'utf8\')\n    const img = fs.readFileSync(\'test.jpg\')\n    if (request.url === \'/\') {\n      response.writeHead(200, {\n        \'Content-Type\': \'text/html\'\n      })\n      response.end(html)\n    } else {\n      response.writeHead(200, {\n        \'Content-Type\': \'image/jpg\',\n        Connection: \'keep-alive\' // or close HTTP/1.1 起 默认 keep-alive\n      })\n      response.end(img)\n    }\n  })\n  .listen(8888)\n\nconsole.log(\'server listening on 8888\')\n```', 4, '2019-02-11 12:55:47', '2019-12-06 08:12:24', 1, 0, 'd15ab109e41711ec829a8c8caa87c861');
INSERT INTO `article` VALUES (42, 'HTTP - 浏览器输入 url 后 http 请求返回的完整过程', '## 示意图\n\n![](https://user-gold-cdn.xitu.io/2018/11/20/167306e21f25ced5?w=1234&h=443&f=png&s=181984)\n\n## 检查缓存\n\n> 缓存就是把你之前访问的 web 资源，比如一些 js，css，图片什么的保存在你本机的内存或者磁盘当中。\n\n浏览器获取了这个 `url`，当然就去解析了，它先去缓存当中看看有没有，从 浏览器缓存-系统缓存-路由器缓存 当中查看，\n如果有从缓存当中显示页面， 如果没有缓存则进行 `DNS` 解析\n\n浏览器缓存相关链接：[HTTP - 缓存机制](https://gershonv.github.io/2018/11/23/http-cache/)\n\n这里重点介绍 浏览器中 [HTTP - 缓存机制](https://gershonv.github.io/2018/11/23/http-cache/)， 因为个人对系统缓存以及路由器缓存认识较少\n\n![](https://user-gold-cdn.xitu.io/2018/8/13/16531214dfa218be?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n- 缓存是否到时: `Cache-Control: max-age=xxx`\n- 缓存是否过期：`Expires` （如果设置）\n- 资源是否发生修改: `ETag`\n  - `If-None-Match` => 304 未修改\n- 文件的修改时间: `Last-Modified`\n  - `If-Modified-Since` => 304 未修改\n\n<!--more-->\n\n## DNS 解析\n\n> 在发送 `http` 之前，需要进行 `DNS` 解析即域名解析。\n> `DNS` 解析:域名到 `IP` 地址的转换过程。域名的解析工作由 `DNS` 服务器完成。解析后可以获取域名相应的 `IP` 地址\n\n根据 URL 找到对应的 IP 地址。这一步通常被称为 DNS 轮询，这里面是有缓存机制的。缓存的顺序依次为：浏览器缓存->操作系统缓存->路由器缓存->DNS 提供商缓存->DNS 提供商轮询。\n\n## 创建 TCP 链接\n\n[TCP 三次握手四次挥手](https://gershonv.github.io/2018/11/21/http-TCP/)\n\n- 第一次握手： `client` => `server`\n  - `SYN = 1` （SYN 代表发起一个新连接）； `Sequence Number` = 1 （请求的标记）\n- 第二次握手：`server` => `client`\n  - `SYN = 1` （SYN 代表发起一个新连接）；`Sequence Number` = Y （请求的标记）\n  - `acknowledgment number` = 1 （确认序号，只有 `ACK` 标志位为 1 时，确认序号字段才有效）\n  - `ACK` = 1 确认序号字段有效\n- 第三次握手：`client` => `server`\n  - `acknowledgment number` = Y + 1 => 确认序号为 Y + 1\n  - `ACK` = 1 确认序号字段有效\n\n这样 TCP 连接就建立了。\n在此之后，浏览器开始向服务器发送 `http` 请求，请求数据包。请求信息包含一个头部和一个请求体。\n\n## 发送请求\n\n相关链接：[HTTP - 导学](https://gershonv.github.io/2018/11/20/http-导学/)\n\n## 响应请求\n\n浏览器对于每一种请求类型的处理方式是不一样的，像 `text/html`、`application/JavaScript`、`text/plain` 等等这些是可以直接呈现的，而对于不能呈现的类型，浏览器会将该资源下载到本地。\n\n那么浏览器在确认这个 response 的状态不是 301（跳转）或者 401（未授权）或其它需要做特殊处理的状态，之后开始进入呈现过程。\n\n`Renderer` 进程开始解析 `css rule tree` 和 `dom tree`，这两个过程是并行的，所以一般我会把 link 标签放在页面顶部。\n\n解析绘制过程中，当浏览器遇到 `link` 标签或者 ` script``、img ` 等标签，浏览器会去下载这些内容，遇到时候缓存的使用缓存，不适用缓存的重新下载资源。\n\n`css rule tree` 和 `dom tree` 生成完了之后，开始合成 `render tree`，这个时候浏览器会进行 `layout`，开始计算每一个节点的位置，然后进行绘制。\n\n绘制结束后，关闭 `TCP` 连接，过程有四次挥手。', 10, '2019-02-11 12:56:10', '2020-01-14 15:43:45', 1, 0, 'd15ab109e41711ec829a8c8caa87c861');
INSERT INTO `article` VALUES (64, 'webpack - 入门篇', '\n![](https://user-gold-cdn.xitu.io/2018/9/29/1662310b4cdab44f?w=1071&h=604&f=png&s=62218)\n\n### 什么是 webpack\n\nwebpack 可以看做是模块打包机：他做的事情是，分析你的项目结构，找到 `JavaScript` 模块以及其他的一些浏览器不能直接运行的扩展语言（`Scss`、`TypeScript` 等），将其打包为合适的格式以供浏览器使用\n\n构建就是把源代码转换成发布到线上可执行的 `JavaScript`、CSS、HTML 代码，包括以下内容：\n\n- **代码转换**：`TypeScript` 编译成 `JavaScript`、`SCSS` 编译成 CSS 等等\n- **文件优化**：压缩 `JavaScript`、CSS、HTML 代码，压缩合并图片等\n- **代码分割**：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载\n- **模块合并**：在采用模块化的项目有很多模块和文件，需要构建功能把模块分类合并成一个文件\n- **自动刷新**：监听本地源代码的变化，自动构建，刷新浏览器\n- **代码校验**：在代码被提交到仓库前需要检测代码是否符合规范，以及单元测试是否通过\n- **自动发布**：更新完代码后，自动构建出线上发布代码并传输给发布系统。\n\n构建其实是工程化、自动化思想在前端开发中的体现。把一系列流程用代码去实现，让代码自动化地执行这一系列复杂的流程。\n\n<!--more-->\n\n#### webpack 的基本概念\n\n- [入口(entry point)](https://www.webpackjs.com/concepts/entry-points/): 指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始，webpack 会找出有哪些模块和 library 是入口起点（直接和间接）依赖的。\n\n  - 默认值是 `./src/index.js`，然而，可以通过在 webpack 配置中配置 entry 属性，来指定一个不同的入口起点（或者也可以指定多个入口起点）。\n\n- [出口 output](https://www.webpackjs.com/concepts/output/): 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件，主输出文件默认为 `./dist/main.js`，其他生成文件的默认输出目录是 `./dist`\n\n- [loader](https://www.webpackjs.com/concepts/loaders/): 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。\n\n> 注意，loader 能够 import 导入任何类型的模块（例如 .css 文件），这是 webpack 特有的功能，其他打包程序或任务执行器的可能并不支持。我们认为这种语言扩展是有很必要的，因为这可以使开发人员创建出更准确的依赖关系图。\n\n- [插件 plugins](https://www.webpackjs.com/concepts/plugins/): loader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。\n\n- [模式 mode](https://www.webpackjs.com/concepts/mode/): 通过选择 `development` 或 `production` 之中的一个，来设置 mode 参数，你可以启用相应模式下的 webpack 内置的优化\n\n#### webpack 构建过程\n\n1. 从 Entry 里配置的 Module 开始递归解析 Entry 依赖的所有 Module。\n2. 每找到一个 Module， 就会根据配置的 Loader 去找出对应的转换规则。\n3. 对 Module 进行转换后，再解析出当前 Module 依赖的 Module。\n4. 这些模块会以 Entry 为单位进行分组，一个 Entry 和其所有依赖的 Module 被分到一个组也就是一个 Chunk。\n5. 最后 Webpack 会把所有 Chunk 转换成文件输出。\n6. 在整个流程中 Webpack 会在恰当的时机执行 Plugin 里定义的逻辑。\n\n### 开发环境和生产环境\n\n我们在日常的前端开发工作中，一般都会有两套构建环境：一套开发时使用，一套供线上使用。\n\n- **development**: 用于开发的配置文件，用于定义 `webpack dev server` 和其他东西\n- **production**: 用于生产的配置文件，用于定义 `UglifyJSPlugin`，`sourcemaps` 等\n\n简单来说，开发时可能需要打印 debug 信息，包含 `sourcemap` 文件，而生产环境是用于线上的即代码都是压缩后，运行时不打印 debug 信息等。譬如 axios、antd 等我们的生产环境中需要使用到那么我们应该安装该依赖在生产环境中，而 `webpack-dev-server` 则是需要安装在开发环境中\n\n平时我们 `npm` 中安装的文件中有 -S -D, -D 表示我们的依赖是安装在开发环境的，而-S 的是安装依赖在生产环境中。\n\n本文就来带你搭建基本的前端开发环境，前端开发环境需要什么呢？\n\n- 构建发布需要的 HTML、CSS、JS、图片等资源\n- 使用 CSS 预处理器，这里使用 less\n- 配置 babel 转码器 => 使用 es6+\n- 处理和压缩图片\n- 配置热加载，HMR\n\n以上配置就可以满足前端开发中需要的基本配置。下面是本文打包后的效果图：\n\n![](https://user-gold-cdn.xitu.io/2018/9/30/16629c066f166b7a?w=1420&h=528&f=png&s=154990)\n\n### 搭建基本的开发环境\n\n### 安装\n\n```\nmkdir webpack-dev && cd webpack-dev\nnpm init -y\nnpm i webpack webpack-cli -D\n```\n\n### 添加 scripts\n\n生成了 package.json 文件，在文件中添加\n\n```json\n \"scripts\": {\n    \"build\": \"webpack --mode production\"\n  }\n```\n\n> --`mode` 模式 (必选，不然会有 `WARNING`)，是 `webpack4` 新增的参数选项，默认是 `production`\n\n- `--mode production` 生产环境\n  - 提供 `uglifyjs-webpack-plugin` 代码压缩\n  - 不需要定义 `new webpack.DefinePlugin({ \"process.env.NODE_ENV\": JSON.stringify(\"production\") })` 默认 `production`\n  - 默认开启 `NoEmitOnErrorsPlugin -> optimization.noEmitOnErrors`, 编译出错时跳过输出，以确保输出资源不包含错误\n  - 默认开启 `ModuleConcatenationPlugin` -> `optimization.concatenateModules`, `webpack3` 添加的作用域提升(`Scope Hoisting`)\n- `--mode development` 开发环境\n  - 使用 eval 构建 module, 提升增量构建速度\n  - 不需要定义 `new webpack.DefinePlugin({ \"process.env.NODE_ENV\": JSON.stringify(\"development\") })` 默认 `development`\n  - 默认开启 `NamedModulesPlugin -> optimization.namedModules` 使用模块热替换(HMR)时会显示模块的相对路径\n\n添加了 scripts 之后，新建`src/index.js`，然后执行`npm run build` ，你就会发现新增了一个 `dist` 目录，里边存放的是 webpack 构建好的 `main.js` 文件。\n\nps [npm scripts 使用指南](http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html)\n\n### 新建 webpack.config.js 文件\n\n要想对 webpack 中增加更多的配置信息，我们需要建立一个 webpack 的配置文件。在根目录下创建 `webpack.config.js` 后再执行 `webpack` 命令，webpack 就会使用这个配置文件的配置了\n\n配置中具备以下的基本信息：\n\n```js\nmodule.exports = {\n  entry: \'\', // 打包入口：指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始\n  output: \'\', // 出口\n  resolve: {}, // 配置解析：配置别名、extensions 自动解析确定的扩展等等\n  devServer: {}, // 开发服务器：run dev/start 的配置，如端口、proxy等\n  module: {}, // 模块配置：配置loader（处理非 JavaScript 文件，比如 less、sass、jsx、图片等等）等\n  plugins: [] // 插件的配置：打包优化、资源管理和注入环境变量\n}\n```\n\n#### 配置打包入口和出口\n\n首先我们往 `webpack.config.js` 添加点配置信息\n\n```js\nconst path = require(\'path\')\n\nmodule.exports = {\n  // 指定打包入口\n  entry: \'./src/index.js\',\n\n  // 打包出口\n  output: {\n    path: path.resolve(__dirname, \'dist\'), // 解析路径为 ./dist\n    filename: \'bundle.js\'\n  }\n}\n```\n\n上面我们定义了打包入口 `./src/index.js`，打包出口为 `./dist`, 打包的文件夹名字为`bundle.js`，执行`npm run build`命令后，index.js 文件会被打包为 `bundle.js` 文件。此时随便建立一个 html 文件引用这个`bundle.js`就可以看到你在`index.js` 写的代码了。\n\n[path.resolve([...paths])](http://nodejs.cn/api/path.html#path_path_resolve_paths) 方法会把一个路径或路径片段的序列解析为一个绝对路径。\n\n### 使用 html-webpack-plugin 创建 html 文件\n\n更多情况下我们不希望打包一次，就新建一次 html 文件来引用打包后的文件，这样显得不智能或者说当你打包的文件名修改后，引用路径就会出错。\n\n这个时候我们就可以使用 [html-webpack-plugin](https://webpack.docschina.org/plugins/html-webpack-plugin/) 插件来将 HTML 引用路径和我们的构建结果关联起来。\n\n```\nnpm install html-webpack-plugin -D\n```\n\n创建文件`public/index.html` 修改 `webpack.config.js` 文件\n\n```js\nconst HtmlWebpackPlugin = require(\'html-webpack-plugin\')\nmodule.exports = {\n  //...\n  plugins: [\n    new HtmlWebpackPlugin({\n      filename: \'index.html\', // 配置输出文件名和路径\n      template: \'./public/index.html\' // 配置要被编译的html文件\n    })\n  ]\n}\n```\n\n重新执行 `npm run build`, dist 目录就会多个 `index.html` 并引入了 `bundle.js`.\n\n#### 压缩 html 文件\n\n修改 `webpack.config.js`\n\n```js\nconst HtmlWebpackPlugin = require(\'html-webpack-plugin\')\nmodule.exports = {\n  //...\n  plugins: [\n    new HtmlWebpackPlugin({\n      filename: \'index.html\', // 配置输出文件名和路径\n      template: \'./public/index.html\', // 配置要被编译的html文件\n      hash: true,\n      // 压缩 => production 模式使用\n      minify: {\n        removeAttributeQuotes: true, //删除双引号\n        collapseWhitespace: true //折叠 html 为一行\n      }\n    })\n  ]\n}\n```\n\n### 打包 css 文件\n\n我们希望使用 webpack 来进行构建 css 文件，，为此，需要在配置中引入 loader 来解析和处理 CSS 文件：\n\n```\nnpm install style-loader css-loader -D\n```\n\n新建 `src/assets/style/color.css`, 修改 `webpack.config.js` 文件：\n\n```js\nmodule.exports = {\n  //...\n  module: {\n    /**\n     * test: 匹配特定条件。一般是提供一个正则表达式或正则表达式的数组\n     * include: 匹配特定条件。一般是提供一个字符串或者字符串数组\n     * exclude: 排除特定条件\n     * and: 必须匹配数组中的所有条件\n     * or: 匹配数组中任何一个条件,\n     * nor: 必须排除这个条件\n     */\n    rules: [\n      {\n        test: /\\.css$/,\n        include: [path.resolve(__dirname, \'src\')],\n        use: [\'style-loader\', \'css-loader\']\n      }\n    ]\n  }\n  //...\n}\n```\n\n经由上述两个 loader 的处理后，CSS 代码会转变为 JS， 如果需要单独把 CSS 文件分离出来，我们需要使用 [mini-css-extract-plugin](https://github.com/webpack-contrib/mini-css-extract-plugin) 插件\n\n#### 抽取 css 到独立文件, 自动添加前缀\n\n```\nnpm i mini-css-extract-plugin postcss-loader autoprefixer -D\n```\n\n我们在写 css 时不免要考虑到浏览器兼容问题，如 `transform` 属性，需要添加浏览器前缀以适配其他浏览器。故使用到 `postcss-loader` 这个 loader， 下面则是相关的配置\n\n`webpack.config.js`\n\n```js\nconst MiniCssExtractPlugin = require(\'mini-css-extract-plugin\')\n\nmodule.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        include: [path.resolve(__dirname, \'src\')],\n        use: [\n          MiniCssExtractPlugin.loader,\n          \'css-loader\',\n          {\n            loader: \'postcss-loader\',\n            options: {\n              plugins: [require(\'autoprefixer\')]\n            }\n          }\n        ]\n      }\n    ]\n  },\n  plugins: [\n    //...\n    new MiniCssExtractPlugin({\n      filename: \'[name].css\',\n      chunkFilename: \'[id].css\'\n    })\n  ]\n}\n```\n\n#### 打包 less 文件\n\n开发中通常会用到一门预处理语言，这里以`less`为例，通过`less-loader`可以打包 less 为 css 文件\n\n```\nnpm install less less-loader -D\n```\n\n新建 `src/assets/style/index.less`, 并且在 `src/index.js` 中引入 `import \'./assets/style/index.less\'`\n\n配置 `webpack.config.js`\n\n```js\nconst MiniCssExtractPlugin = require(\'mini-css-extract-plugin\')\n\nmodule.exports = {\n  module: {\n    rules: [\n      // ...\n      {\n        test: /\\.less$/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          \'css-loader\',\n          {\n            loader: \'postcss-loader\',\n            options: {\n              plugins: [require(\'autoprefixer\')] // 添加css中的浏览器前缀\n            }\n          },\n          \'less-loader\'\n        ]\n      }\n    ]\n  }\n  //...\n}\n```\n\n执打包命令后就可以发现 `index.less` 中写的样式会和`color.css`一样被打包进 `main.css`中。\n\n[webpack@v4 升级踩坑](https://segmentfault.com/a/1190000014396803?utm_source=tag-newest): 关于使用 `mini-css-extract-plugin` 的注意点。\n\n### 打包图片\n\n```\nnpm install file-loader url-loader -D\n```\n\n**file-loader:** 可以用于处理很多类型的文件，它的主要作用是直接输出文件，把构建后的文件路径返回。\n\n**url-loader:**\n如果图片较多，会发很多 http 请求，会降低页面性能。`url-loader` 会将引入的图片编码，生成 dataURl。相当于把图片数据翻译成一串字符。再把这串字符打包到文件中，最终只需要引入这个文件就能访问图片了。当然，如果图片较大，编码会消耗性能。因此 `url-loader` 提供了一个 limit 参数，小于 limit 字节的文件会被转为 DataURl，大于 limit 的还会使用 `file-loader` 进行 copy。\n\n- url-loader 可以看作是增强版的 file-loader。\n- url-loader 把图片编码成 base64 格式写进页面，从而减少服务器请求。\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      // ...\n      {\n        test: /\\.(png|jpg|gif)$/,\n        use: [\n          {\n            loader: \'url-loader\',\n            options: {\n              outputPath: \'images/\', //输出到images文件夹\n              limit: 500 //是把小于500B的文件打成Base64的格式，写入JS\n            }\n          }\n        ]\n      }\n    ]\n  }\n  //...\n}\n```\n\n**url-loader 和 file-loader 是什么关系呢？**\n\n简单地说，`url-loader` 封装了 `file-loader`。`url-loader` 不依赖于 `file-loader`，即使用 `url-loader` 时，只需要安装 `url-loader` 即可，不需要安装 `file-loader`，因为 `url-loader` 内置了 `file-loader`。\n\n通过上面的介绍，我们可以看到，url-loader 工作分两种情况：\n\n- 文件大小小于 limit 参数，url-loader 将会把文件转为 DataURL；\n- 文件大小大于 limit，url-loader 会调用 file-loader 进行处理，参数也会直接传给 file-loader。因此我们只需要安装 url-loader 即可。\n\n有关 `url-loader` 和 `file-loader` 的解析：[webpack 之图片引入-增强的 file-loader：url-loader](https://blog.csdn.net/hdchangchang/article/details/80175782)\n\n### 配置 babel\n\n#### babel-loader\n\n`Babel` 是一个让我们能够使用 ES 新特性的 JS 编译工具，我们可以在 webpack 中配置 Babel，以便使用 ES6、ES7 标准来编写 JS 代码。\n\nBabel 7 的相关依赖包需要加上 `@babel` scope。一个主要变化是 presets 设置由原来的 `env` 换成了 `@babel/preset-env`, 可以配置 `targets`, `useBuiltIns` 等选项用于编译出兼容目标环境的代码。其中 `useBuiltIns` 如果设为 `\"usage\"`，Babel 会根据实际代码中使用的 ES6/ES7 代码，以及与你指定的 targets，按需引入对应的 `polyfill`，而无需在代码中直接引入 `import \'@babel/polyfill\'`，避免输出的包过大，同时又可以放心使用各种新语法特性。\n\n```\nnpm i babel-loader @babel/core @babel/preset-env -D\n```\n\n笔者这里配的版本号如下\n\n```json\n{\n  \"babel-loader\": \"^8.0.4\",\n  \"@babel/core\": \"^7.1.2\",\n  \"@babel/preset-env\": \"^7.1.0\"\n}\n```\n\n- [babel-loader](https://www.npmjs.com/package/babel-loader): 用 babel 转换 ES6 代码需要使用到 `babel-loader`\n- [@babel-preset-env](https://www.npmjs.com/package/@babel/preset-env)： 默认情况下是等于 ES2015 + ES2016 + ES2017，也就是说它对这三个版本的 ES 语法进行转化。\n- [@babel/core](https://www.npmjs.com/package/@babel/core)：babel 核心库\n\n根目录下新建 `.babelrc` 文件\n\n```json\n{\n  \"presets\": [\n    [\n      \"@babel/preset-env\",\n      {\n        \"modules\": false,\n        \"targets\": {\n          \"browsers\": [\"> 1%\", \"last 2 versions\", \"not ie <= 8\"]\n        },\n        \"useBuiltIns\": \"usage\"\n      }\n    ]\n  ]\n}\n```\n\n- presets 是一堆 plugins 的预设，起到方便的作用。\n- plugins 是编码转化工具，babel 会根据你配置的插件对代码进行相应的转化。\n\n修改 `webpack.config.js`\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      //...\n      {\n        test: /\\.m?js$/,\n        exclude: /(node_modules|bower_components)/,\n        use: {\n          loader: \'babel-loader\'\n        }\n      }\n    ]\n  }\n}\n```\n\n#### babel/polyfill 和 transform-runtime\n\n> Babel 默认只转换新的 JavaScript 句法（syntax），而不转换新的 API ，比如 Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise 等全局对象，以及一些定义在全局对象上的方法（比如 Object.assign）都不会转码。\n\n- babel-polyfill: 如上述所说，对于新的 API，你可能需要引入 babel-polyfill 来进行兼容\n- 关键点\n\n  - babel-polyfill 是为了模拟一个完整的 ES2015+环境，旨在用于应用程序而不是库/工具。\n  - babel-polyfill 会污染全局作用域\n\nbabel-runtime 的作用：\n\n- **提取辅助函数**。ES6 转码时，babel 会需要一些辅助函数，例如 \\_extend。babel 默认会将这些辅助函数内联到每一个 js 文件里， babel 提供了 transform-runtime 来将这些辅助函数“搬”到一个单独的模块 babel-runtime 中，这样做能减小项目文件的大小。\n- **提供 polyfill**：不会污染全局作用域，但是不支持实例方法如 Array.includes\n\n`babel-runtime` 更像是分散的 polyfill 模块，需要在各自的模块里单独引入，借助 `transform-runtime` 插件来自动化处理这一切，也就是说你不要在文件开头 import 相关的 `polyfill`，你只需使用，`transform-runtime` 会帮你引入。\n\n对于开发应用来说，直接使用上述的按需 `polyfill` 方案是比较方便的，但如果是开发工具、库的话，这种方案未必适合（`babel-polyfill` 是通过向全局对象和内置对象的 `prototype` 上添加方法实现的，会造成全局变量污染）。Babel 提供了另外一种方案 `transform-runtime`，它在编译过程中只是将需要 `polyfill` 的代码引入了一个指向 `core-js` 中对应模块的链接(alias)。关于这两个方案的具体差异和选择，可以自行搜索相关教程，这里不再展开，下面提供一个 `transform-runtime` 的参考配置方案。\n\n- 首先安装 runtime 相关依赖\n\n```\nnpm i @babel/plugin-transform-runtime -D\nnpm i @babel/runtime -S\n```\n\n修改 `.babelrc`\n\n```json\n{\n  //...\n  \"plugins\": [\"@babel/plugin-transform-runtime\"]\n}\n```\n\n### 打包前清理源目录文件 clean-webpack-plugin\n\n每次打包，都会生成项目的静态资源，随着某些文件的增删，我们的 dist 目录下可能产生一些不再使用的静态资源，webpack 并不会自动判断哪些是需要的资源，为了不让这些旧文件也部署到生产环境上占用空间，所以在 webpack 打包前最好能清理 dist 目录。\n\n```\nnpm install clean-webpack-plugin -D\n```\n\n修改 `webpack.config.js` 文件\n\n```js\nconst CleanWebpackPlugin = require(\'clean-webpack-plugin\')\nmodule.exports = {\n  plugins: [new CleanWebpackPlugin([\'dist\'])]\n}\n```\n\n### 提取公用代码\n\n假如你 `a.js` 和 `b.js` 都 import 了 `c.js` 文件，这段代码就冗杂了。为什么要提取公共代码，简单来说，就是减少代码冗余，提高加载速度。\n\n```js\nmodule.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        commons: {\n          // 抽离自己写的公共代码\n          chunks: \'initial\',\n          name: \'common\', // 打包后的文件名，任意命名\n          minChunks: 2, //最小引用2次\n          minSize: 0 // 只要超出0字节就生成一个新包\n        },\n        styles: {\n          name: \'styles\', // 抽离公用样式\n          test: /\\.css$/,\n          chunks: \'all\',\n          minChunks: 2,\n          enforce: true\n        },\n        vendor: {\n          // 抽离第三方插件\n          test: /node_modules/, // 指定是node_modules下的第三方包\n          chunks: \'initial\',\n          name: \'vendor\', // 打包后的文件名，任意命名\n          // 设置优先级，防止和自定义的公共代码提取时被覆盖，不进行打包\n          priority: 10\n        }\n      }\n    }\n  }\n}\n```\n\n### hash\n\nhash 是干嘛用的？\n我们每次打包出来的结果可能都是同一个文件，那我上线的时候是不是要替换掉上线的 js，那我怎么知道哪是最新的呢，我们一般会清一下缓存。而 hash 就是为了解决这个问题而存在的\n\n我们此时在改一些 webpack.config.js 的配置\n\n```js\nmodule.exports = {\n  //...\n  output: {\n    path: path.resolve(__dirname, \'dist\'),\n    filename: \'[name].[hash:8].js\'\n  },\n  //...\n  plugins: [\n    new MiniCssExtractPlugin({\n      filename: \'[name].[hash:8].css\',\n      chunkFilename: \'[id].[hash:8].css\'\n    })\n  ]\n}\n```\n\n### 减少 resolve 的解析，配置别名\n\n如果我们可以精简 `resolve` 配置，让 `webpack` 在查询模块路径时尽可能快速地定位到需要的模块，不做额外的查询工作，那么 `webpack` 的构建速度也会快一些\n\n```js\nmodule.exports = {\n  resolve: {\n    /**\n     * alias: 别名的配置\n     *\n     * extensions: 自动解析确定的扩展,\n     *    比如 import \'xxx/theme.css\' 可以在extensions 中添加 \'.css\'， 引入方式则为 import \'xxx/theme\'\n     *    @default [\'.wasm\', \'.mjs\', \'.js\', \'.json\']\n     *\n     * modules 告诉 webpack 解析模块时应该搜索的目录\n     *   如果你想要添加一个目录到模块搜索目录，此目录优先于 node_modules/ 搜索\n     *   这样配置在某种程度上可以简化模块的查找，提升构建速度 @default node_modules 优先\n     */\n    alias: {\n      \'@\': path.resolve(__dirname, \'src\'),\n      tool$: path.resolve(__dirname, \'src/utils/tool.js\') // 给定对象的键后的末尾添加 $，以表示精准匹配\n    },\n    extensions: [\'.wasm\', \'.mjs\', \'.js\', \'.json\', \'.jsx\'],\n    modules: [path.resolve(__dirname, \'src\'), \'node_modules\']\n  }\n}\n```\n\n### webpack-dev-serve\n\n上面讲到了都是如何打包文件，但是开发中我们需要一个本地服务，这时我们可以使用 `webpack-dev-server` 在本地开启一个简单的静态服务来进行开发。\n\n`webpack-dev-server` 是 webpack 官方提供的一个工具，可以基于当前的 webpack 构建配置快速启动一个静态服务。当 `mode` 为 `development` 时，会具备 `hot reload` 的功能，即当源码文件变化时，会即时更新当前页面，以便你看到最新的效果。...\n\n```\nnpm install webpack-dev-server -D\n```\n\npackage.json 中 scripts 中添加\n\n```\n\"start\": \"webpack-dev-server --mode development\"\n```\n\n默认开启一个本地服务的窗口 http://localhost:8080/ 便于开发\n\n#### 配置开发服务器\n\n我们可以对 `webpack-dev-server` 做针对性的配置\n\n```js\nmodule.exports = {\n  // 配置开发服务器\n  devServer: {\n    port: 1234,\n    open: true, // 自动打开浏览器\n    compress: true // 服务器压缩\n    //... proxy、hot\n  }\n}\n```\n\n- contentBase: 服务器访问的根目录（可用于访问静态资源）\n- port: 端口\n- open: 自动打开浏览器\n\n### 模块热替换(hot module replacement)\n\n模块热替换(`HMR - Hot Module Replacement`)功能会在应用程序运行过程中替换、添加或删除模块，而无需重新加载整个页面。主要是通过以下几种方式，来显著加快开发速度：\n\n- 保留在完全重新加载页面时丢失的应用程序状态。\n- 只更新变更内容，以节省宝贵的开发时间。\n- 调整样式更加快速 - 几乎相当于在浏览器调试器中更改样式。\n\n上面我们 `npm start` 后修改一次文件，页面就会刷新一次。这样就存在很大问题了，比如我们使用 `redux`, `vuex` 等插件，页面一刷新那么存放在 `redux`, `vuex` 中的东西就会丢失，非常不利于我们的开发。\n\nHMR 配合 webpack-dev-server ，首先我们配置下 webpack.config.js\n\n```js\nconst webpack = require(\'webpack\')\n\nmodule.exports = {\n  devServer: {\n    //...\n    hot: true\n  },\n  plugins: [\n    new webpack.HotModuleReplacementPlugin()\n    //...\n  ]\n}\n```\n\n配置后还不行，因为 webpack 还不知道你要更新哪里, 修改 `src/index.js` 文件, 添加\n\n```js\nif (module.hot) {\n  module.hot.accept()\n}\n```\n\n重启服务，`npm start` 之后，修改引入 `index.js` 文件后，页面就不会重新刷新了，这便实现了 HMR\n\n但是但是有个问题是，你修改 css/less 等样式文件并未发生改变， what ?\n\nHMR 修改样式表 需要借助于 `style-loader`， 而我们之前用的是 `MiniCssExtractPlugin.loader`， 这也好办，修改其中一个 rules 就可以了，我们可以试试改\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.less$/,\n        use: [\n          // MiniCssExtractPlugin.loader,\n          \'style-loader\',\n          \'css-loader\',\n          {\n            loader: \'postcss-loader\',\n            options: {\n              plugins: [require(\'autoprefixer\')] // 添加css中的浏览器前缀\n            }\n          },\n          \'less-loader\'\n        ]\n      }\n    ]\n  }\n}\n```\n\n这样我们修改 less 文件就会发现 HMR 已经实现了。\n\n其实，我们可以发现，dev 下配置的 loader 为 `style-loader` , 而生产环境下则是需要 `MiniCssExtractPlugin.loader`\n\n这就涉及到了不同环境之间的配置。可以通过 `process.env.NODE_ENV` 获取当前是开发环境或者是生产环境，然后配置不同的 loader，这里就不做展开了。下一篇文章打算在做一个 `react-cli` 或者 `vue-cli` 的配置，将开发环境的配置与生产环境的配置分开为不同的文件。\n\n### 结语\n\n前面讲到的知识都是 webpack 的一些基础的知识，更多的资料可以查询[webpack 中文官网](https://webpack.js.org/)，官网讲的比较详细，我这里也是讲最常的配置，也是一篇入门系列的文章，文中涉及的知识点还有很多地方还需要完善，譬如 优化 webpack 的构建速度， 减小打包的体积等等。\n\n学习 `webpack 4.0` 还需要多实践，多瞎搞，笔者也是刚刚学习 webpack 的配置，不对之处请各位指出。\n\n下一篇文章打算从零配置一个脚手架，以加深自己对 webpack 的理解。\n\n本文产生的代码：[webpack-dev](https://github.com/gershonv/my-code-store/tree/master/webpack/webpack-dev)\n\n### 参考\n\n- [webpack4.x 入门一篇足矣](https://juejin.im/post/5b2b9a00e51d45587b48075e#heading-0)\n- [Webpack4 不深不浅的实践教程](https://segmentfault.com/a/1190000014466696?utm_source=index-hottest/*&%5E%25$#articleHeader0)\n- [webpack 之 babel 配置和 HMR](https://juejin.im/post/5b3834e051882574ce2f3dd9)\n- [使用 webpack 4 和 Babel 7 配置 Vue.js 工程模板](https://segmentfault.com/a/1190000015247255)\n- [webpack 4 ：从 0 配置到项目搭建](https://juejin.im/post/5b3daf2ee51d451962727fbe)\n- [webpack 详解](https://juejin.im/post/5aa3d2056fb9a028c36868aa)\n- [手写一个 webpack4.0 配置](https://juejin.im/post/5b4609f5e51d4519596b66a7)\n- [Webpack 4 教程：从零配置到生产发布（2018）](https://juejin.im/entry/5b552985f265da0f697036b2)\n- [Webpack 揭秘——走向高阶前端的必经之路](https://juejin.im/post/5badd0c5e51d450e4437f07a)\n- [珠峰架构师培训公开课 webpack4.0 进阶](https://www.bilibili.com/video/av25439651?from=search&seid=14183256954711376795)\n- [webpack 官网](https://webpack.js.org/)\n', 46, '2019-06-03 13:41:56', '2022-06-06 15:44:37', 1, 0, 'd15ab109e41711ec829a8c8caa87c861');
INSERT INTO `article` VALUES (74, '如何用 es6+ 写出优雅的 js 代码', '兼容 IE ？不存在的好吗。\n\n其实使用新语法配合 `babel` 的转码，已经可以解决这一些问题了。既然如此，那就多使用新语法去探索一下怎么更好的去写代码吧。\n\n下面分享个人开发中常用的 js 写法技巧，希望对各位有所帮助。\n\n\n## 使用 let / const\n\n`var` 命令会发生”变量提升“现象，即变量可以在声明之前使用，值为 `undefined`。这种现象多多少少是有些奇怪的。\n\n个人认为，对声明的变量确定后面不会发生更改时，即使性能上没有太大提升差异在，但使用 `const`, 代码的可读性也会增强很多。\n\n- `const` 实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。\n- `let` 变量指向的内存地址，保存的只是一个指向实际数据的指针\n\n补充 `const` 定义的变量不是数据不可变，而是保存的引用地址不能发生改变。例子如下：\n\n```js\nconst person = { age: 22 }\nperson.age = 1\n\nconsole.log(person.age ) // 1\n```\n\n\n详情看 [let 和 const 命令](http://es6.ruanyifeng.com/#docs/let)\n\n## 解构赋值\n\n`ES6` 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（`Destructuring`）。\n\n好处就是：解决了访问多层嵌套的对象或数组的命名，减少代码量\n\n声明多个变量:\n\n```js\n// 声明变量\nlet age = 22\nlet name = \'guodada\'\nlet sex = 1\n\n// better\nlet [age, name, sex] = [22, \'guodada\', 1]\nconsole.log(age, name, sex) // 22, guodada, 1\n```\n\n使用在对象中：\n\n```js\nconst obj = {\n  name: {\n    firstName: \'guo\',\n    lastName: \'dada\'\n  }\n}\n\n// 提取变量\nconst firstName = obj.name.firstName\nconst lastName = obj.name.lastName\n\n// better\nconst { firstName, lastName } = obj.name \n```\n\n使用在函数中:\n\n```js\n// 在参数中结构赋值，获取参数, 当参数多的使用时候十分方便\nfunction Destructuring({ name, age }) {\n  return { name, age } // 相当于 { name: name, age: age } , 可以简写\n}\n\nconst params = { name: \'guodada\', age: 22 }\nDestructuring(params)\n```\n\n更多用法见 [变量的解构赋值](http://es6.ruanyifeng.com/#docs/destructuring)\n\nES6 允许在对象之中，直接写变量。这时，属性名为变量名, 属性值为变量的值。\n\n```js\nfunction f(x, y) {\n  return {x: x, y: y};\n}\n\n// better\nfunction f(x, y) {\n  return {x, y};\n}\nf(1, 2) // Object {x: 1, y: 2}\n```\n\n## 扩展符的运用\n\nes6 扩展符有很多用法，他可以使你的代码更加简洁，易懂。这里就举例常用的用法\n\n在对象中的用法：\n\n```js\nlet obj = {\n  name: \'guodada\',\n  age: 22,\n  sex: 1\n}\n\n// 复制对象。扩展符为浅复制！！！\nconst copy = { ...obj }\n\n// 修改对象属性值(生成新对象) 相当于 Object.assgin({}, obj, { age: 18 })\nconst newObj = { ...obj, age: 18 }\n\n// 结合结构赋值\nlet { sex, ...z } = obj\nz // { name: \'guodada\', age: 22 }\n```\n\n在数组中的用法：\n\n```js\nconst arr = [1, 2, 3]\nconst arr2 = [4, 5, 6, 4]\n\n// 复制数组。扩展符为浅复制！！！\nconst newArr = [...arr] // ...[1, 2, 3] => 相当于展开数组：1, 2, 3\n\n// 合并数组\nconst conbineArr = [...arr, ...arr2]\n\n// 结合求最大值函数\nMath.max(...arr)\n\n// 结合 Set 实现数组去重。注意：json 等对象数组不可用\n[...new Set(arr2)] // [4, 5, 6]\n```\n扩展符的其他用法请自行查资料。\n\n## 数组用法\n\n```js\nconst arr = [1, 2, 3, 4]\n\nArray.isArray(arr) // 判断是否为数组\n\narr.includes(2) // true 判断数组中是否包含某项\n\narr.findIndex(d => d === 3) // 2 找出第一个符合条件的数组成员并返回数组下标, 找不到返回 -1\n\narr.find(d => d === 3) // 3 找出第一个符合条件的数组成员并返回, 找不到返回 undefined\n\n// es5 其他还有 filter map forEach 等，这里不做举例。\narr.every(d => d > 2) // false 每一项都满足条件则返回 true\n\narr.some(d => d > 2) // true 只要有一项满足条件则返回 true\n```\n\n`find/findIndex` : 找出第一个符合条件的数组成员之后不再匹配，一定程度下优化查找。\n`includes`: 返回 `true/false`, 相较于 `indexOf`, 实用多了\n\n- `flat()` : 扁平化数组，常用于将数组转化为一维数组\n\n  ```js\n  const arr = [1, 2, [3, 4]]\n\n  arr.flat() // [1, 2, 3, 4] 扁平化数组, 默认展开一层。\n\n  const arr2 = [1, 2, [3, 4, [5, 6]]]\n\n  arr2.flat() // [1, 2, 3, 4, [5, 6]]\n  arr2.flat(2) // [1, 2, 3, 4, 5, 6] flat(3) 也是展开两层...\n  ```\n\n- `flatMap()`: 在数组执行 `map` 方法后执行 `flat`, 用的不多，其实可以写 `map` 后写 `flat` 更好懂点。注意兼容性问题！！\n\n  ```js\n  [2, 3, 4].flatMap(x => [x, x * 2]) //  [ 2, 4, 3, 6, 4, 8 ]\n  // 1. [2, 3, 4].map(d => [d, d * 2]) => [[2, 4], [3, 6], [4, 8]]\n  // 2. [[2, 4], [3, 6], [4, 8]].flat()\n  ```\n  \n 附扁平化另外的实现方法：\n ```js\n function flatten(arr) {\n  return arr.reduce((list, item) => list.concat(Array.isArray(item) ? flat(item) : item), [])\n}\n ```\n  \n补充常用的对象转数组的用法：\n  \n```js\nconst obj = { name: \'guodada\' }\n  \nObject.keys(obj) // [\'name\']\nObject.values(obj) // [\'guodada\']\nObject.entries(obj) // [[\'name\', \'guodada\']]\n```\n\n使用 reduce 代替 filter + map\n```js\nconst arr = [{ sex: 1, age : 10}, { sex: 1, age : 19}, { sex: 0, age : 12}]\n\nconst result = arr.reduce((list, item) => {\n  item.sex === 1 && list.push({ sex: \'男\', age : item.agt > 18 ? \'成年\' : \'未成年\'})\n  return list \n}, [])\n\nconsole.log(result)\n```\n  \n## 模板字符串\n\n用的挺多的，注意不兼容 `IE` !\n\n```js\nconst name = \'guodada\'\n\nconst newStr = `welcome ${name}` // welcome guodada\n\n// the same as\nconst newStr = \'welcome \' + name\n```\n\n## 使用 async / await\n\n`async/await` 实际上就是 `generator` 的语法糖, 主要用来解决异步问题，具体网上很多文章都有介绍，这里就不做多的解释吧。\n\n```js\nasync function test() {\n  const data = await axios.get(\'https://randomuser.me/api/\')\n  console.log(data)\n}\n// 等同于\nfunction test() {\n  axios.get(\'https://randomuser.me/api/\').then(res => console.log(res)) // axios 也是 promise 对象\n}\n\n// 结合try/catch \nasync function test() {\n  try {\n    const data = await axios.get(\'https://randomuser.me/api/\')\n    console.log(data)\n  } catch (err) {\n    console.log(err)\n  }\n}\n```\n\nps 虽然好用，但是有时候适用场景不好，比如我们在拉取列表和用户信息需要同时进行时，`await` 后才执行下一条语句，这不是我们希望看到的。解决方法如下：\n\n```js\n// 结合 Promise.all\nconst [result1, result2, result3] = await Promise.all([anAsyncCall(), thisIsAlsoAsync(), oneMore()])\n```\n\n传送门：[async 函数](http://es6.ruanyifeng.com/#docs/async)\n\n## 利用 class 封装代码\n\n主要是抽离代码逻辑，使得代复用性加强。同时，`class` 的形式会让结构变得更加清晰，譬如：\n\n```js\nclass MyForm {\n  /**\n   * @func defaultLimit - 默认表单输入限制条件, value 为空时返回 true\n   * @param {Number} type - 代表表单类型的节点！\n   * @param {String} value - 需要被验证的值\n   * @return Boolean\n   * \n   * 根据 type 属性对输出进行验证\n   * 1 0≤x≤50 整数\n   * 2 -1000≤x≤2000 整数\n   * 3 1≤x 整数\n   * 4 0≤x≤10\n   */\n  static defaultLimit(type, value) {\n    const typeLimitMap = {\n      1: /^(\\d|[1-4]\\d|50)$/g,\n      2: /^-?(\\d{1,3}|1000)$|^(-|1\\d{3}|2000)$/,\n      3: /^[1-9]\\d*$/,\n      4: value => value <= 10 && value >= 0 // 0≤ x ≤ 10 可以为小数\n    }\n    if (!typeLimitMap[type] || !value) return true\n    if (typeof typeLimitMap[type] === \'function\') return typeLimitMap[type](value)\n    else return typeLimitMap[type].test(value)\n  }\n\n  /**\n   * @func translateLimit - 转换操作符\n   * @param {String} operator - 运算符\n   * @param {*} value - 被匹配的值\n   * @param {*} compareValue - 匹配的值\n   * @return Boolean\n   * \'eq\': \'=\'\n   * \'ne\': \'≠\'\n   * \'gt\': \'>\'\n   * \'lt\': \'<\'\n   * \'ge\': \'≥\'\n   * \'le\': \'≤\'\n   */\n  static translateLimit(operator, value, compareValue) {\n    const type = {\n      eq: value === compareValue,\n      ne: value !== compareValue,\n      gt: value > compareValue,\n      lt: value < compareValue,\n      ge: value >= compareValue,\n      le: value <= compareValue\n    }\n    if (!Object.keys(type).includes(operator) || !value || value === \'-\') return true\n    return type[operator]\n  }\n\n  // ...\n}\n\nexport default MyForm\n```\n\n使用：\n\n```js\nimport MyForm from \'./MyForm\'\n\nMyForm.defaultLimit(1, 20)\n```\n\n- `static` ：静态属性，类可以直接调用\n- `constructor` : 实例化类的时候调用，即 `new MyForm()`, 这里没用到\n\n更多知识请阅 [Class 的基本语法](http://es6.ruanyifeng.com/#docs/class)\n\n## 优化 if/else 语句\n\n> 当逻辑或`||`时，找到为 `true` 的分项就停止处理，并返回该分项的值，否则执行完，并返回最后分项的值。\n>\n> 当逻辑与`&&`时，找到为 `false` 的分项就停止处理，并返回该分项的值。\n\n```js\nconst a = 0 || null || 3 || 4\nconsole.log(a) // 3\n\nconst b = 3 && 4 && null && 0\nconsole.log(b) // null\n```\n\n减少 `if / else`地狱般的调用\n\n```js\nconst [age, name, sex] = [22, \'guodada\', 1]\n\nif (age > 10) {\n  if (name === \'guodada\') {\n    if (sex > 0) {\n      console.log(\'all right\')\n    }\n  }\n}\n\n// better 使用 &&\nif (age > 10 && name === \'guodada\' && sex > 0) {\n  console.log(\'all right\')\n}\n\n// 或者(太长了不推荐)\nage > 10 && name === \'guodada\' && sex > 0 && console.log(\'all right\')\n```\n\n提一下 `react` 的坑点, 在 `render` 中\n\n```js\nrender(){\n  const arr = []\n  return arr.length && null\n}\n// 渲染出 0 ！\n// Boolean / undefind / null / NaN 等才不会渲染。我们可以使用 !! 强制转化为 boolean 解决这个问题\nreturn !!arr.length && null\n\n// 使用 && 控制组件的渲染\nthis.state.visible && <Modal />\n```\n\n使用 `Array.includes` 来处理多重条件：\n\n```js\nconst ages = [18, 20, 12]\n\nif (age === 18 || age === 12) {\n  console.log(\'match\')\n}\n\n// better\nif ([18, 12].includes(age)) {\n  console.log(\'match\')\n}\n```\n\n如果是较少的判断逻辑则可以使用三元运算符：\n\n```js\nconst age = 22\nconst isAdult = age >= 18 ? true : false // 这里可以写为 const isAdult = age > 18\n\nconst type = age >= 18 ? \'adult\' : \'child\'\n```\n\n## 优化 switch/case 语句\n\n`switch/case` 比 `if/else` 代码结构好点，但也和它一样有时十分冗长。\n\n这里以自己实际项目中代码举例：\n有时我们可能需要对不同类型的字段进行不一样的正则验证，防止用户错误地输入。譬如\n\n```js\nconst [type, value] = [1, \'20\']\n/**\n * 根据 type 属性对输出进行验证\n * 1 0≤x≤50 整数\n * 2 -1000≤x≤2000 整数\n * 3 1≤x 整数\n */\n\nfunction func1(type, value) {\n  if (type === 1) {\n    return /^(\\d|[1-4]\\d|50)$/.test(value)\n  } else if (type === 2) {\n    return /^-?(\\d{1,3}|1000)$|^(-|1\\d{3}|2000)$/.test(value)\n  } else if (type === 3) {\n    return /^[1-9]\\d*$/.test(value)\n  } else {\n    return true\n  }\n}\n\nfunc1(type, value)\n\n// 使用 switch/case\nfunction fun2(type, value) {\n  switch (type) {\n    case 1:\n      return /^(\\d|[1-4]\\d|50)$/.test(value)\n    case 2:\n      return /^-?(\\d{1,3}|1000)$|^(-|1\\d{3}|2000)$/.test(value)\n    case 3:\n      return /^[1-9]\\d*$/.test(value)\n    default:\n      return true\n  }\n}\n\nfunc2(type, value)\n```\n\n我们如何巧妙的解决这个代码冗长的问题呢，如下：\n\n```js\nfunction func3(type, value) {\n  const limitMap = {\n    1: /^(\\d|[1-4]\\d|50)$/g,\n    2: /^-?(\\d{1,3}|1000)$|^(-|1\\d{3}|2000)$/,\n    3: /^[1-9]\\d*$/\n  }\n  return limitMap[type].test(value)\n}\n```\n\n利用对象去匹配属性值，可以减少你的代码量，也使你的代码看起来更加简洁。你也可以使用 `Map` 对象去匹配。\n\n```js\nfunction func4(type, value) {\n  const mapArr = [\n    [1, /^(\\d|[1-4]\\d|50)$/g],\n    [2, /^-?(\\d{1,3}|1000)$|^(-|1\\d{3}|2000)$/],\n    [3, /^[1-9]\\d*$/]\n  ]\n  const limitMap = new Map(mapArr)\n  return limitMap.get(type).test(value)\n}\n```\n`Map` 是一种键值对的数据结构对象，它的匹配更加严格。它会区分开你传递的是字符串还是数字，譬如：\n\n```js\nlimitMap.get(1) // /^(\\d|[1-4]\\d|50)$/g\nlimitMap.get(\'1\') // undefined\n```\n更多详见 [Set 和 Map 数据结构](http://es6.ruanyifeng.com/#docs/set-map)\n\n## 其他\n\n- 函数参数默认值\n  ```js\n  function func(name, age = 22) {}\n  // 等同于\n  function func(name, age) {\n    age = age || 22\n  }\n  ```\n- 使用 `===` 代替 `==`。其实大家都懂这个的。。。\n- 箭头函数，es6 最常用的语法。\n- return boolean\n  ```js\n  const a = 1\n  return a === 1 ? true : false\n  // 多此一举了，其实就等于\n  return a === 1\n  ```\n\n敬请各位补充。交流才能进步，相视一笑，嘿嘿。\n\n- [github](https://github.com/gershonv/my-code-store) - star 一下人生更美好\n- [blog](https://gershonv.github.io/categories/) - 欢迎交流', 208, '2019-06-04 11:29:46', '2022-06-06 15:44:24', 1, 0, 'd15ab109e41711ec829a8c8caa87c861');
INSERT INTO `article` VALUES (76, 'koa-react-ssr  学习', '## koa 创建一个简单的服务器\n\n```bash\nyarn add koa koa-router\n```\n\n`src/server/app.js`\n\n```js\nconst Koa = require(\'koa\')\nconst Router = require(\'koa-router\')\n\nconst app = new Koa()\nconst router = new Router()\n\nrouter.get(\'*\', async ctx => {\n  ctx.body = `\n  <!DOCTYPE html>\n  <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\" />\n      <title>koa ssr</title>\n    </head>\n    <body>\n      <h1>简单的 koa http 服务</h1>\n      <div id=\"root\"></div>\n    </body>\n  </html>\n  `\n})\n\napp.use(router.routes())\napp.listen(3000, () => {\n  console.log(\'http://127.0.0.1:3000\')\n})\n```\n\n上面我们用 koa 简单创建了一个 `http` 服务，然后返回字符串, `node app.js` 打开 `http://127.0.0.1:3000` 可以看到效果了\n\n## 搞事情，写一个 Home.jsx 组件\n\n`src/client/Home.jsx`\n\n```js\nimport React from \'react\'\nconst Home = () => <h2>Hello world</h2>\nexport default Home\n```\n\n而服务端的 `src/server/app.js` 文件需要改写为\n\n```js\nimport Koa from \'koa\'\nimport Router from \'koa-router\'\nimport ReactDOM from \'react-dom\'\nimport Home from \'../client/Home\'\n\nconst app = new Koa()\nconst router = new Router()\n\n// 原本的在浏览器端的运行方法\n// ReactDOM.render(<Home />, document.getElementById(\'root\'))\n\n// 在服务器端运行的代码\nconst content = ReactDOM.renderToString(<Home />)\n\nrouter.get(\'*\', async ctx => {\n  ctx.body = `\n  <!DOCTYPE html>\n  <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\" />\n      <title>koa ssr</title>\n    </head>\n    <body>\n      <div id=\"root\">${content}</div>\n    </body>\n  </html>\n  `\n})\n\napp.use(router.routes())\napp.listen(3000, () => {\n  console.log(\'http://127.0.0.1:3000\')\n})\n```\n\n上面用到了 `import` / `export` 语法，`node` 不支持，则我们需要使用 `babel` 对它进行转义。\n\n```bash\nyarn init -y\nyarn add webpack webpack-cli -D\nyarn add @babel/core @babel/preset-env @babel/preset-react @babel/runtime @babel/plugin-transform-runtime -D\nyarn add webpack-node-externals -D # 我们不希望捆绑 koa koa-router 等模块...\ntouch webpack.server.js\n```\n\n`webpack.server.js`\n\n```js\nconst path = require(\'path\')\nconst nodeExternals = require(\'webpack-node-externals\')\n\nmodule.exports = {\n  mode: \'production\',\n  target: \'node\',\n  externals: [nodeExternals()], // in order to ignore all modules in node_modules folder\n\n  entry: \'./src/server/app.js\',\n  output: {\n    filename: \'bundle.js\',\n    path: path.resolve(__dirname, \'build\')\n  },\n\n  resolve: {\n    extensions: [\'.js\', \'.json\', \'.jsx\'] // import xxx from \'app.jsx\' => import xxx from \'app\'\n  },\n\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: \'babel-loader\',\n          options: {\n            // @babel/preset-env 转义 es6+ 的箭头函数、类、async await 等为 ES5 语法\n            // @babel/preset-react : 转义 react\n            // @babel/plugin-transform-runtime : 自动 polyfill es5不支持的特性\n            presets: [\'@babel/preset-env\', \'@babel/preset-react\'],\n            plugins: [\'@babel/plugin-transform-runtime\']\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n在 `package.json` 中添加\n\n```json\n\"scripts\": {\n  \"start\": \"node ./build/bundle.js\",\n  \"build:server\": \"webpack --config webpack.server.js\"\n}\n```\n\n```bash\nyarn build:server && yarn start\n```\n\n打开 `http://127.0.0.1:3000/` 就可以看到效果了...\n\n目前为止 我们 webpack 编译了服务端的代码，其中还将 `react` 转成我们需要的形式。已经初步完成了我们的工作...\n\n## 实现同构（添加事件绑定）\n\n服务端渲染和客户端渲染的对比：\n\n![](https://user-gold-cdn.xitu.io/2019/7/2/16bb28547b52c0bd?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n`CSR` 步骤：\n\n1. 浏览器下载 `HTML` 文档\n2. 浏览器下载 `JS` 文件\n3. 浏览器运行 `React` 代码\n4. 页面渲染\n\n`SSR` 的出现，可以解决这些传统 `CSR` 的弊端, 且可以优化 `SEO` 方便 balabala....\n\n重点是同构如何实现：\n\n![](https://user-gold-cdn.xitu.io/2019/7/2/16bb2b6d8dc96733?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n1. 服务端运行 `React` 代码生成 `HTML`\n2. 发送 `HTML` 文件给浏览器\n3. 浏览器收到内容显示\n4. 浏览器加载 `JS` 文件\n5. `JS` 代码执行并接管页面的操作\n\n在前面的实现过程中，我们只是运行 `react` 代码生成 `string` 显示在页面中，也仅此而已，那么我们为 `Home.jsx` 添加一个事件绑定试试:\n\n```js\nimport React, { Component } from \'react\'\n\nclass Home extends Component {\n  render() {\n    return (\n      <div>\n        <h2>hello world</h2>\n        <button onClick={() => alert(\'click\')}>click</button>\n      </div>\n    )\n  }\n}\n\nexport default Home\n```\n\n```bash\nyarn build:server && yarn start\n```\n\n发现无论怎么点也没有反应，原因很简单，`react-dom/server` 下的 `renderToString` 并没有做事件相关的处理，因此返回给浏览器的内容不会有事件绑定。\n\n那怎么解决这个问题呢？\n\n这就需要进行同构了。所谓同构，通俗的讲，就是一套 `React` 代码在服务器上运行一遍，到达浏览器又运行一遍。服务端渲染完成页面结构，浏览器端渲染完成事件绑定。\n\n那如何进行浏览器端的事件绑定呢？\n\n唯一的方式就是让浏览器去拉取 `JS` 文件执行，让 `JS` 代码来控制。于是服务端返回的代码变成了这样:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>koa ssr</title>\n  </head>\n  <body>\n    <div id=\"root\">\n      <div data-reactroot=\"\">\n        <h2>hello world</h2>\n        <button>click</button>\n      </div>\n    </div>\n    <script src=\"/index.js\"></script>\n  </body>\n</html>\n```\n\n有没有发现和之前的区别？区别就是多了一个 `script` 标签。而它拉取的 JS 代码就是来完成同构的。\n那么这个 `index.js` 我们如何生产出来呢？\n\n在这里，要用到 `react-dom`。具体做法其实就很简单了：\n\n`src/client/index.js`\n\n```js\nimport React from \'react\'\nimport ReactDOM from \'react-dom\'\nimport Home from \'./Home\'\n\n// ReactDOM.render(<Home />, document.getElementById(\'root\')) 这是浏览器端运行的方式\n\nReactDOM.hydrate(<Home />, document.getElementById(\'root\')) // 服务端渲染用 hydrate\n```\n\n`webpack.client.js`\n\n```js\nconst path = require(\'path\')\n\nmodule.exports = {\n  mode: \'production\',\n\n  entry: \'./src/client/index.js\',\n\n  output: {\n    filename: \'index.js\',\n    path: path.resolve(__dirname, \'public\')\n  },\n\n  resolve: {\n    extensions: [\'.js\', \'.json\', \'.jsx\'] // import xxx from \'app.jsx\' => import xxx from \'app\'\n  },\n\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: \'babel-loader\',\n          options: {\n            // @babel/preset-env 转义 es6+ 的箭头函数、类、async await 等为 ES5 语法\n            // @babel/preset-react : 转义 react\n            // @babel/plugin-transform-runtime : 自动 polyfill es5不支持的特性\n            presets: [\'@babel/preset-env\', \'@babel/preset-react\'],\n            plugins: [\'@babel/plugin-transform-runtime\']\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n`src/server/app.js`\n\n```js\nimport Koa from \'koa\'\nimport Router from \'koa-router\'\nimport serve from \'koa-static\'\nimport path from \'path\'\n\n// react...\nimport React from \'react\'\nimport ReactDOM from \'react-dom/server\'\nimport Home from \'../client/Home\'\nconst app = new Koa()\nconst router = new Router()\n\nconst content = ReactDOM.renderToString(<Home />)\n\n// 设置静态服务器为根路径的 public\napp.use(serve(path.join(process.cwd(), \'/public\')))\n\nrouter.get(\'*\', async ctx => {\n  ctx.body = `\n  <!DOCTYPE html>\n  <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\" />\n      <title>koa ssr</title>\n    </head>\n    <body>\n      <div id=\"root\">${content}</div>\n      <script src=\'/index.js\'></script>\n    </body>\n  </html>\n  `\n})\n\napp.use(router.routes())\napp.listen(3000, () => {\n  console.log(\'http://127.0.0.1:3000\')\n})\n```\n\n`package.json`\n\n```json\n \"scripts\": {\n    \"test\": \"yarn build:server && yarn build:client && yarn start\",\n    \"start\": \"node ./build/bundle.js\",\n    \"build:server\": \"webpack --config webpack.server.js\",\n    \"build:client\": \"webpack --config webpack.client.js\"\n  }\n```\n\n```bash\nyarn add koa-static\nyarn test\n```\n\n打开页面点击后就可以发现事件已经绑定成功了！\n\n## 添加路由\n\n写一个路由的配置文件 `src/client/Routes.js`\n\n```jsx\nimport React, { Component } from \'react\'\nimport { Route } from \'react-router-dom\'\n\nimport Home from \'./Home\'\nimport About from \'./About\'\n\nexport default (\n  <div>\n    <Route path=\"/\" exact component={Home} />\n    <Route path=\"/about\" exact component={About} />\n  </div>\n)\n```\n\n`src/client/About.jsx`\n\n```jsx\nimport React, { Component } from \'react\'\n\nclass About extends Component {\n  render() {\n    return (\n      <div>\n        <h2>About page</h2>\n      </div>\n    )\n  }\n}\n\nexport default About\n```\n\n修改打包 `react` 的入口文件 `src/client/index.js`\n\n```js\nimport React from \'react\'\nimport ReactDOM from \'react-dom\'\nimport { BrowserRouter } from \'react-router-dom\'\nimport Routes from \'./Routes\'\n\nconst App = () => <BrowserRouter>{Routes}</BrowserRouter>\n\nReactDOM.hydrate(<App />, document.getElementById(\'root\')) // 服务端渲染用 hydrate\n```\n\n同时也要修改 `src/server/app.js` 每次请求根据路径不同生成不同的 `content`\n\n```js\nimport Koa from \'koa\'\nimport Router from \'koa-router\'\nimport serve from \'koa-static\'\nimport path from \'path\'\n\n// react...\nimport React from \'react\'\nimport { renderToString } from \'react-dom/server\'\nimport { StaticRouter } from \'react-router-dom\'\n\nimport Routes from \'../client/Routes\'\n\nconst app = new Koa()\nconst router = new Router()\n\n// 设置静态服务器为根路径的 public\napp.use(serve(path.join(process.cwd(), \'/public\')))\n\nrouter.get(\'*\', async ctx => {\n  //构建服务端的路由\n  const content = renderToString(<StaticRouter location={ctx.url}>{Routes}</StaticRouter>)\n\n  ctx.body = `\n  <!DOCTYPE html>\n  <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\" />\n      <title>koa ssr</title>\n    </head>\n    <body>\n      <div id=\"root\">${content}</div>\n      <script src=\'/index.js\'></script>\n    </body>\n  </html>\n  `\n})\n\napp.use(router.routes())\napp.listen(3000, () => {\n  console.log(\'http://127.0.0.1:3000\')\n})\n```\n\n现在路由的跳转就没有任何问题啦。 注意，这里仅仅是一级路由的跳转，多级路由的渲染在之后的系列中会用 `react-router-config` 中 `renderRoutes` 来处理。\n\n## 引入 redux\n\n```bash\nyarn add redux react-redux redux-thunk axios\n```\n\n新建 `src/redux.js` 文件 （为了方便 将配置都写在一个文件）\n\n```js\nimport { combineReducers, compose, createStore, applyMiddleware } from \'redux\'\nimport thunk from \'redux-thunk\'\nimport axios from \'axios\'\n\n// constants\nconst ADD_COUNT = \'ADD_COUNT\'\nconst GET_TITLE = \'GET_TITLE\'\n\n// actions\nexport const addCount = () => ({\n  type: ADD_COUNT\n})\n\nexport const getTitle = () => {\n  return dispatch =>\n    axios.get(\'https://randomuser.me/api/\').then(res => {\n      dispatch({\n        type: GET_TITLE,\n        payload: {\n          title: res.data.results[0].name.title\n        }\n      })\n    })\n}\n\n// default state\nlet defaultState = {\n  count: 1\n}\n\n// reducers\nexport const demoReducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case ADD_COUNT:\n      return { ...state, count: ++state.count }\n    case GET_TITLE:\n      return { ...state, title: action.payload.title }\n    default:\n      return state\n  }\n}\n\n// combineReducers\nconst reducers = combineReducers({\n  demo: demoReducer\n})\n\n// generator store\nconst configureStore = (initialState = {}) => {\n  const storeEnhancers = applyMiddleware(thunk)\n  const store = createStore(reducers, initialState, storeEnhancers)\n  return store\n}\n\n// export\nexport default configureStore()\n```\n\n在客户端中引入 `src/client/index.js`\n\n```js\nimport { Provider } from \'react-redux\'\nimport store from \'../redux\'\n\nconst App = () => (\n  <Provider store={store}>\n    <BrowserRouter>{Routes}</BrowserRouter>\n  </Provider>\n)\n```\n\n在 `src/client/Home.jsx` 中使用\n\n```js\nimport React, { Component } from \'react\'\nimport { connect } from \'react-redux\'\nimport { addCount, getTitle } from \'../redux\'\n\nclass Home extends Component {\n  componentDidMount() {\n    this.props.getTitle()\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>\n          Count: {this.props.count} title: {this.props.title}\n        </h2>\n        <button onClick={this.props.addCount}>add count</button>\n        <button onClick={this.props.getTitle}>async getTitle</button>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  count: state.demo.count,\n  title: state.demo.title\n})\n\nexport default connect(\n  mapStateToProps,\n  { addCount, getTitle }\n)(Home)\n```\n\n在服务端中引入 `src/server/app.js`\n\n```js\nimport { Provider } from \'react-redux\'\nimport store from \'../redux\'\n//...\n\nconst content = renderToString(\n  <Provider store={store}>\n    <StaticRouter location={ctx.url}>{Routes}</StaticRouter>\n  </Provider>\n)\n```\n\n`yarn test` 成功编译 说明你成功了\n\n## 异步数据的服务端渲染方案(数据注水与脱水)\n\n经过上面的改造 我们可以在异步获取到了数据。。当然，这是存在坑点的。。\n\n```js\ncomponentDidMount() {\n this.props.getTitle()\n}\n```\n\n我们一般在组件的 `componentDidMount` 生命周期函数进行异步数据的获取。但是，在服务端渲染中却出现了问题。 启动服务后我们查看网页的源代码 可以发现\n\n![](https://user-gold-cdn.xitu.io/2019/7/19/16c09a3ece840c54?w=1152&h=171&f=png&s=39450)\n\n源代码里面并没有这些列表数据啊！那这是为什么呢？\n\n让我们来分析一下客户端和服务端的运行流程，当浏览器发送请求时，服务器接受到请求，这时候服务器和客户端的 `store` 都是空的，紧接着客户端执行 `componentDidMount` 生命周期中的函数，获取到数据并渲染到页面，然而服务器端始终不会执行 componentDidMount，因此不会拿到数据，这也导致服务器端的 `store` 始终是空的。\n\n换而言之，关于异步数据的操作始终只是客户端渲染。现在的工作就是让服务端将获得数据的操作执行一遍，以达到真正的服务端渲染的效果。\n\n', 551, '2019-09-19 15:13:04', '2022-06-06 15:21:18', 1, 0, 'd15ab109e41711ec829a8c8caa87c861');
INSERT INTO `article` VALUES (86, 'Koa 中间件机制', '## 面向切面编程 (AOP)\n\n[AOP（Aspect Oriented Programming）](https://blog.csdn.net/qq_42539533/article/details/90551738)，\n即面向切面编程，可以说是 [OOP（Object Oriented Programming）](https://github.com/oakland/Vanilla-JS-Practice/blob/master/11-learnOOPfromCircles.js/0-%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3JS%E4%B8%AD%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E5%89%8D%E8%A8%80%EF%BC%89.md)，面向对象编程的补充和完善。\n面向切面编程是面向对象中的一种方式而已。在代码执行过程中，**动态嵌入其他代码**，叫做面向切面编程。常见的使用场景：\n日志 \\ 事物 \\ 数据库操作\n\n举个例子：\n前端开发中, 产品会要求在代码中进行埋点, 需要知道这个按钮用户点击的频率是多少, 但是这样的上报代码其实与实际的业务代码并无强关联, 更不要说在实际上业务代码已经封装成一个通用的函数或组件,\n所以, 如果想不侵入业务代码而又满足埋点, 中间件模型或许能够满足需求, 来看一看简单的代码:\n\n```js\n// 在原函数执行前执行 fn 函数\nFunction.prorotype.before = function(fn) {\n  // 保存触发 before 的函数\n  const self = this\n  return function(...args) {\n    let res = fn.call(this)\n    // 如果上一个函数未返回值, 不执行下一个函数\n    if (res) {\n      self.apply(this, args)\n    }\n  }\n}\n\n// 在原函数执行后执行 fn 函数\nFunction.prototype.after = function(fn) {\n  // 保存触发 after 的函数\n  const self = this\n  return function(...args) {\n    let res = self.apply(this, args)\n    // 如果上一个函数未返回值, 不执行下一个函数\n    if (res) {\n      fn.call(this)\n    }\n  }\n}\n```\n\n上面这两个函数是通过在 `Function.prototype` 上添加两个函数: `before`, `after`. 两个函数的返回值都是一个函数, 这个函数会按照次序执行函数.\n这样函数各自保持了他们的整洁性.但是这样的 `before` 与 `after` 函数的简单使用缺陷也是很明显的, 他们并不支持异步的函数, 而日常开发中异步的场景有非常多, 所以这样的代码还是只能在 `demo` 中使用,\n不适合生产环境中使用.所以我们来看一下 `koa` 框架是怎么做的.\n\n## Koa 的中间件\n\n### 简介\n\n`Koa` 是一个中间件框架，本身没有捆绑任何中间件。本身支持的功能并不多，功能都可以通过中间件拓展实现。通过添加不同的中间件，实现不同的需求，从而构建一个 `Koa` 应用。\n\n`Koa` 的中间件就是函数，可以是 `async` 函数，或是普通函数。下面是[中间件的 demo](https://github.com/koajs/koa)\n\n```js\napp.use(async (ctx, next) => {\n  const start = Date.now()\n  await next()\n  const ms = Date.now() - start\n  console.log(`${ctx.method} ${ctx.url} - ${ms}ms`)\n})\n\napp.use((ctx, next) => {\n  const start = Date.now()\n  return next().then(() => {\n    const ms = Date.now() - start\n    console.log(`${ctx.method} ${ctx.url} - ${ms}ms`)\n  })\n})\n```\n\n### compose 函数实现\n\n`koa` 是 `nodejs` 中非常精简的框架, 其中的精粹思想就是洋葱模型(中间件模型), 它实现的核心就是借助 `compose` 这个库来实现的\n\n对于 `compose` 也就是 `koa` 的核心思想就是像下面这个图:\n\n![](https://user-gold-cdn.xitu.io/2020/1/14/16fa3072c18dad2a?w=576&h=451&f=png&s=46164)\n\n```js\nfunction compose(middleware) {\n  // 传入的 middleware 参数必须是数组\n  if (!Array.isArray(middleware)) throw new TypeError(\'Middleware stack must be an array!\')\n  // middleware 数组的元素必须是函数\n  for (const fn of middleware) {\n    if (typeof fn !== \'function\') throw new TypeError(\'Middleware must be composed of functions!\')\n  }\n\n  // 返回一个函数闭包, 保持对 middleware 的引用\n  return function(context, next) {\n    // 这里的 context 参数是作为一个全局的设置, 所有中间件的第一个参数就是传入的 context, 这样可以\n    // 在 context 中对某个值或者某些值做\"洋葱处理\"\n\n    // 解释一下传入的 next, 这个传入的 next 函数是在所有中间件执行后的\"最后\"一个函数, 这里的\"最后\"并不是真正的最后,\n    // 而是像上面那个图中的圆心, 执行完圆心之后, 会返回去执行上一个中间件函数(middleware[length - 1])剩下的逻辑\n\n    // index 是用来记录中间件函数运行到了哪一个函数\n    let index = -1\n    // 执行第一个中间件函数\n    return dispatch(0)\n\n    function dispatch(i) {\n      // i 是洋葱模型的记录已经运行的函数中间件的下标, 如果一个中间件里面运行两次 next, 那么 i 是会比 index 小的.\n      // 如果对这个地方不清楚可以查看下面的图\n      if (i <= index) return Promise.reject(new Error(\'next() called multiple times\'))\n      index = i\n      let fn = middleware[i]\n      if (i === middleware.length) {\n        // 这里的 next 就是一开始 compose 传入的 next, 意味着当中间件函数数列执行完后, 执行这个 next 函数, 即圆心\n        fn = next\n      }\n      // 如果没有函数, 直接返回空值的 Promise\n      if (!fn) return Promise.resolve()\n      try {\n        // 为什么这里要包一层 Promise?\n        // 因为 async 需要后面是 Promise, 然后 next 函数返回值就是 dispatch 函数的返回值, 所以运行 async next(); 需要 next 包一层 Promise\n        // next 函数是固定的, 可以执行下一个函数\n        return Promise.resolve(\n          fn(context, function next() {\n            return dispatch(i + 1)\n          })\n        )\n      } catch (err) {\n        return Promise.reject(err)\n      }\n    }\n  }\n}\n```\n\n至于在一个中间件函数中两次调用 next 函数导致出错, 我这里提供一个简单的例子供大家参考:\n\n```js\nasync function first(ctx, next) {\n  console.log(\'1\')\n  // async 与 co + yield 的模型不同, await 是需要后面是 promise 的函数, 并且自己执行一次, 而 co 是自己拿到 value 然后帮你自动执行.\n  await next()\n  await next() // 两次调用 next\n  console.log(ctx)\n}\n\nasync function second(ctx, next) {\n  console.log(\'2\')\n  await next()\n}\n\nasync function third(ctx, next) {\n  console.log(\'3\')\n  await next()\n  console.log(\'4\')\n}\n\nconst middleware = [first, second, third]\n\nconst com = compose(middleware)\n\ncom(\'ctx\', function() {\n  console.log(\'hey\')\n})\n```\n\n如果第一个中间件中没有两次调用 next 函数, 那么正确的结果为 1 2 3 \'hey\' 4 \'ctx\'. 对于出错的真正原因是如下图:\n\n![](https://user-gold-cdn.xitu.io/2020/1/14/16fa30722f53e4ef?w=361&h=317&f=png&s=17336)\n\n在第 5 步中, 传入的 i 值为 1, 因为还是在第一个中间件函数内部, 但是 compose 内部的 index 已经是 3 了, 所以 i < 3, 所以报错了, 可知在一个中间件函数内部不允许多次调用 next 函数.\n\n> 中间件模型非常好用并且简洁, 甚至在 koa 框架上大放异彩, 但是也有自身的缺陷, 也就是一旦中间件数组过于庞大, 性能会有所下降, 因此我们需要结合自身的情况与业务场景作出最合适的选择.\n\n## 参考链接\n\n[理解 Koa 的中间件机制](https://github.com/zhangxiang958/zhangxiang958.github.io/issues/34)\n', 5, '2020-01-14 15:50:04', '2020-01-20 01:24:32', 1, 0, 'd15ab109e41711ec829a8c8caa87c861');
INSERT INTO `article` VALUES (87, ' React Hooks 笔记', '## useState/setState 的异同\n\n- 共同点：都是异步的操作\n- `setState` 有 `callback` 而 `useState` 没有，但是可以通过 `useEffect` 去监听依赖！\n- `setState` 后生成的是新的引用，而 `useState` 不同 请看下面的例子\n\n```jsx\n// fastClick 3 times: 3 3 3\nclass Counter extends React.Component {\n  state = { count: 0 }\n\n  log = () => {\n    this.setState(prev => ({ count: prev.count + 1 }))\n    setTimeout(() => {\n      console.log(this.state.count)\n    }, 3000)\n  }\n\n  render() {\n    return (\n      <>\n        <p>You clicked {this.state.count} times</p>\n        <button onClick={this.log}>Click me</button>\n      </>\n    )\n  }\n}\n```\n\n连续点击 `3` 次，发现控制台输出的是 `3 3 3`, `count` 值最终是 `3`，当我们用 `Function Component` 方式实现时\n\n```jsx\nfunction Counter() {\n  const [count, setCount] = useState(0)\n\n  const log = () => {\n    setCount(prev => prev + 1)\n    setTimeout(() => {\n      console.log(count)\n    }, 3000)\n  }\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={log}>Click me</button>\n    </div>\n  )\n}\n```\n\n同样的操作，发现控制台输出的是 `0 1 2`, `count` 值最终是 `3`。\n\n**对 `Function Component` 而言：**\n\n1. `useState` 产生的数据是 `Immutable` 的，通过数组第二个参数 Set 一个新值后，原来的值会形成一个新的引用在下次渲染时。\n2. 但由于对 `state` 的读取没有通过 `this.` 的方式，使得 每次 `setTimeout` 都读取了当时渲染闭包环境的数据，虽然最新的值跟着最新的渲染变了，但旧的渲染里，状态依然是旧值。\n\n**对 `Class Component` 而言：**\n\n1. 首先 `state` 是 `Immutable` `的，setState` 后一定会生成一个全新的 state 引用。\n2. 但 `Class Component` 通过 `this.state` 方式读取 `state`，这导致了每次代码执行都会拿到最新的 `state` 引用，所以快速点击三次的结果是 `3 3 3`。\n\n## useRef\n\n### 获取 DOM 元素的节点\n\n```jsx\nfunction App(props) {\n  const inputRef = useRef(null)\n  const handleClick = e => inputRef.current.focus()\n  return (\n    <>\n      <input type=\'text\' ref={inputRef} />\n      <button onClick={handleClick}>focus</button>\n    </>\n  )\n}\n```\n\n> 获取子组件的 ref 用法与上面 👆 一致，但是只有 `Class Compontent` 才有 `ref`。 `ref.current` 即为实例, 这里不举例\n\n### 存储可变的数据\n\n在 `Class Component` 中我们可以用 `this.xxx` 用来存储一些数据 例如定时器的实例，以免在 `render` 之后重置数据, 在 `Function Compontent` 中我们抑或可以使用 `ref` 记录可变的数据。\n\n```jsx\nfunction App(props) {\n  const flag = useRef(false)\n  const [count, setCount] = useState(0)\n\n  const handleClick = e => {\n    flag.current = true\n  }\n  console.log(flag.current)\n  return (\n    <>\n      <button onClick={e => setCount(prev => prev + 1)}>count: {count}</button>\n      <button onClick={handleClick}>changeFlag</button>\n    </>\n  )\n}\n```\n\n点击 `changeFlag` 后 在下次的 `render` 中 `flag.current` 任然是 `true`。而不会被重置！\n\n我们可以使用这个属性去获取上一轮的 `props` 或者 `state`, 这里可以封装成私有的 `hooks`\n\n```jsx\nfunction usePrevious(value) {\n  const ref = useRef()\n  useEffect(() => {\n    ref.current = value\n  })\n  return ref.current\n}\n\nfunction App(props) {\n  const [count, setCount] = useState(0)\n  const prevCount = usePrevious(count)\n  console.log(`prevCount: ${prevCount}, currentCount: ${count}`)\n  return <button onClick={e => setCount(prev => prev + 1)}>count: {count}</button>\n}\n```\n\n在进行一次 `setCount` 之后才给 `prevCount` 赋值。\n\n### useImperativeHandle\n\n> `useImperativeHandle(ref, createHandle, [inputs])`\n>\n> 自定在使用 ref 时，公开给父组件的实例值，必须和 `forwardRef` 一起使用。\n\n```jsx\nfunction MyInput(props, ref) {\n  const inputRef = useRef()\n\n  // useImperativeHandle 必须和 forwardRef 一起使用\n  useImperativeHandle(ref, () => ({\n    focus: () => {\n      inputRef.current.focus()\n    },\n    ele: inputRef.current\n  }))\n\n  return <input type=\'text\' ref={inputRef} />\n}\n\nconst Input = React.forwardRef(MyInput)\n\nfunction App(props) {\n  const inputRef = useRef(null)\n\n  function handleClick(e) {\n    console.log(inputRef.current.ele)\n    inputRef.current.focus()\n  }\n  return (\n    <>\n      <Input ref={inputRef} />\n      <button onClick={handleClick}>onClick</button>\n    </>\n  )\n}\n```\n\n## 性能优化\n\n> 以下三个方法均是用于性能优化，但略有不同。\n\n- `React.memo`: 用于函数组件 相当于 `React.PureComponent` 用于浅层比较\n- `useMemo`: 更颗粒化管理数据渲染，`React.memo` 相对是整个 `PureComponent`， 而 `React.useMemo`是组件内某个值的 `pure`...\n- `useCallback`: 接收一个内联回调函数参数和一个依赖项数组（子组件依赖父组件的状态，即子组件会使用到父组件的值） ，`useCallback` 会返回该回调函数的 `memoized` 版本，该回调函数仅在某个依赖项改变时才会更新\n\n### React.memo\n\n```jsx\nReact.memo(SubComponent, (prevProps, nextProps) => prevProps.name === nextProps.name)\n```\n\ndemo 如下\n\n```jsx\nfunction Child(props) {\n  console.log(\'render\')\n  return <h2>{props.count}</h2>\n}\n\nconst ChildMemo = React.memo(Child)\n\nfunction App(props) {\n  const [count, setCount] = useState(0)\n  const [num, setNum] = useState(0)\n\n  return (\n    <div>\n      <ChildMemo count={count} addClick={setCount} />\n      <button onClick={e => setCount(prev => prev + 1)}>addCount</button>\n      <button onClick={e => setNum(prev => prev + 1)}>addNum</button>\n    </div>\n  )\n}\n```\n\n没有套 `React.memo` 我们发现改变 `num` 之后，`Child` 组件会重新 `render` 这不是我们所期望的，因为 `count` 值并未改变。\n\n套上 `React.memo` 发现点击 `addNumb` 就不会重新执行 `render` 了！\n\n### useMemo\n\n> `useMemo`：把创建函数和依赖项数组作为参数传入 `useMemo`，它仅会在某个依赖项改变时才重新计算 `memoized` 值。这种优化有助于避免在每次渲染时都进行高开销的计算\n\ndemo 如下\n\n```jsx\nfunction Child(props) {\n  function countWithTime() {\n    return new Date().getTime() + \': \' + props.count\n  }\n\n  const newCount = countWithTime()\n  return <h2>{newCount}</h2>\n}\n\nfunction App(props) {\n  const [count, setCount] = useState(0)\n  const [num, setNum] = useState(0)\n\n  return (\n    <div>\n      <Child count={count} />\n      <button onClick={e => setCount(prev => prev + 1)}>addCount</button>\n      <button onClick={e => setNum(prev => prev + 1)}>addNum</button>\n    </div>\n  )\n}\n```\n\n点击 `addNum` 发现 `Child` 组件会实时跑 `countWithTime` 这个函数，但是 `App` 组件的 `count` 值并未改变。这意味着发生了性能损耗。\n\n进行改写\n\n```jsx\nfunction Child(props) {\n  function countWithTime() {\n    return new Date().getTime() + \': \' + props.count\n  }\n\n  const newCount = useMemo(countWithTime, [props.count])\n  return <h2>{newCount}</h2>\n}\n```\n\n点击 `addNum` 后发现并不会继续跑 `countWithTime` 这个函数了，说明 `useMemo` 起了作用.\n\n### useCallback\n\n> `useCallback`：接收一个内联回调函数参数和一个依赖项数组（子组件依赖父组件的状态，即子组件会使用到父组件的值） ，`useCallback` 会返回该回调函数的 `memoized` 版本，该回调函数仅在某个依赖项改变时才会更新\n\n```js\nimport React, { useState, useCallback, useMemo } from \'react\'\n\nfunction Child(props) {\n  console.log(\'render\')\n  return (\n    <>\n      <h2>{props.count}</h2>\n      <button onClick={props.addNum}>Child click</button>\n    </>\n  )\n}\n\nfunction App(props) {\n  const [count, setCount] = useState(0)\n  const [num, setNum] = useState(0)\n\n  function addNum() {\n    setNum(prev => prev + 1)\n  }\n\n  return (\n    <div>\n      <ChildMemo count={count} addNum={addNum} />\n      <button onClick={e => setCount(prev => prev + 1)}>addCount</button>\n      <button onClick={addNum}>addNum</button>\n    </div>\n  )\n}\n```\n\n我们点击 `addNum` 后，发生了 `setNum` 重新 `render App` 对应传入 `<ChildMemo count={count} addNum={addNum} />` `addNum` 函数被认为更新了 也会重新执行 `Child` 的 `render`\n\n我们可以用 `useCallback` 对函数进行缓存，改写后就可以达到性能优化的效果了！\n\n```js\nfunction App(props) {\n  const [count, setCount] = useState(0)\n  const [num, setNum] = useState(0)\n\n  const addNum = useCallback(() => setNum(prev => prev + 1), [])\n  return (\n    <div>\n      <ChildMemo count={count} addNum={addNum} />\n      <button onClick={e => setCount(prev => prev + 1)}>addCount</button>\n      <button onClick={addNum}>addNum</button>\n    </div>\n  )\n}\n```\n', 7, '2020-01-14 15:51:24', '2020-01-17 14:50:30', 1, 0, 'd15ab109e41711ec829a8c8caa87c861');
INSERT INTO `article` VALUES (88, '利用 github webhooks 实现自动化部署', '> [Webhooks](https://developer.github.com/webhooks/) allow you to build or set up integrations which subscribe to certain events on GitHub.com.\n\n通过 `webhooks` 可以订阅 `github` 项目中的各个事件，如 `push/issue` 等\n\n以 `node` 作为脚本为例，借助 [github-webhook-handler](https://github.com/rvagg/github-webhook-handler) 这个库来实现监听以及进行某些操作。\n\n## 搭建 Node 服务器\n\n```bash\nmkdir webhook-demo && cd webhook-demo\n\nyarn init -y\n\nyarn add github-webhook-handler\n\ntouch deploy.js\n```\n\n其代码为\n\n```js\nconst http = require(\'http\')\nconst createHandler = require(\'github-webhook-handler\')\nconst handler = createHandler({ path: \'/webhook\', secret: \'myhashsecret\' })\n// path secret 保持和 GitHub Webhooks 后台设置的一致\n\nhttp\n  .createServer(function(req, res) {\n    handler(req, res, function(err) {\n      res.statusCode = 404\n      res.end(\'no such location\')\n    })\n  })\n  .listen(6001)\n\nhandler.on(\'error\', function(err) {\n  console.error(\'Error:\', err.message)\n})\n\nhandler.on(\'push\', function(event) {\n  console.log(\'Received a push event for %s to %s\', event.payload.repository.name, event.payload.ref)\n})\n\nhandler.on(\'issues\', function(event) {\n  console.log(\n    \'Received an issue event for %s action=%s: #%d %s\',\n    event.payload.repository.name,\n    event.payload.action,\n    event.payload.issue.number,\n    event.payload.issue.title\n  )\n})\n```\n\n在服务器上跑起来！\n\n## 设置 webhooks\n\n进入 `github` 的某个项目，`Settings` => `Webhooks` => `Add webhook`\n\n创建 `Webhooks`，在 `Webhooks` 的页面我们可以看到一段简短的介绍：\n\n> Webhooks allow external services to be notified when certain events happen. When the specified events happen, we’ll send a POST request to each of the URLs you provide.\n\n有三个选项让你填写\n\n- `Payload URL`: 填写服务器地址 如 `http://120.79.10.11:6001/webhook` （端口和 `path` 上面设置的一致）\n- `Content type`: 勾选 `application/json`\n- `Secert`: `myhashsecret`\n\n以及有勾选是否只发送 `push` 事件等等\n\n新建好之后，我们可以尝试 `push` 一下。\n\n接着就可以看到在服务器跑起来的服务就输出\n\n```bash\nReceived a push event for 项目名 to refs/heads/master\n```\n\n这时成功实现了对 `github push` 事件的监听。监听后我们需要进行特定的操作。\n\n## 添加 shell 脚本\n\n新建 `deploy.sh`\n\n```bash\n# deploy.sh\n#! /bin/bash\n# 确保脚本抛出遇到的错误\nset -e\n\ncd /work/note # cd 到项目地址\n\ngit pull\n\nyarn\n\nyarn build\n```\n\n有了脚本后在修改 `deploy.js` 文件\n\n```js\nconst http = require(\'http\')\nconst { spawn } = require(\'child_process\')\n\nconst createHandler = require(\'github-webhook-handler\')\nconst handler = createHandler({ path: \'/webhook\', secret: \'myhashsecret\' })\n\nhttp\n  .createServer(function(req, res) {\n    handler(req, res, function(err) {\n      res.statusCode = 404\n      res.end(\'no such location\')\n    })\n  })\n  .listen(6001)\n\nhandler.on(\'error\', function(err) {\n  console.error(\'Error:\', err.message)\n})\n\nfunction runCommand(cmd, args, callback) {\n  let response = \'\'\n  const child = spawn(cmd, args)\n  child.stdout.on(\'data\', buffer => {\n    response += buffer.toString()\n  })\n  child.stdout.on(\'end\', () => callback(response))\n}\n\nhandler.on(\'push\', function(event) {\n  console.log(\'Received a push event for %s to %s\', event.payload.repository.name, event.payload.ref)\n\n  // push请求且为master执行shell脚本\n  event.payload.ref === \'refs/heads/master\' && runCommand(\'sh\', [\'./deploy.sh\'], console.log)\n})\n```\n\n大功告成！\n', 5, '2020-01-14 15:52:35', '2020-01-20 01:19:51', 1, 0, 'd15ab109e41711ec829a8c8caa87c861');
INSERT INTO `article` VALUES (89, '实现 ssh 免密登陆服务器', '## 创建 ssh 公钥\n\n```bash\n# 进入ssh 查看公钥\ncat ~/.ssh/id_rsa.pub\n\n# 如果不存在 则需要创建公钥\nssh-keygen -t rsa -C gershonv@163.com\n```\n\n复制完公钥后，我们先登陆进服务器。\n\n## 在服务器的 ssh 中添加 authorized_keys\n\n在云服务器中进行以下操作：\n\n```bash\ncd ~/.ssh/\n\nls # 查看是否存在 authorized_keys 文件\n\nvim authorized_keys\n\n# 如果没有的话\nvim ~/.ssh/authorized_keys\n```\n\n保存我们刚刚复制的公钥\n\n## 设置登陆名\n\n在进行完上面的操作后，可以发现登陆服务器已经不需要密码了，但是仍然需要输入 `IP`。\n\n此时我们可以通过配置 `~/.ssh/config` 来做一个别名\n\n```bash\nvim ~/.ssh/config\n\nHost server1\n   User root\n   HostName \'server1 的ip\' # 注意⚠️ 这里不需要加引号 比如直接写上服务器地址 47.112.48.225\nHost server2\n   User root\n   HostName \'server2 的ip\'\n```\n\n然后我们打开控制台，输入\n\n```bash\nssh server1\n```\n\n就可以快速登陆服务器了，退出登陆则 `control + d`', 12, '2020-01-14 15:54:41', '2022-06-05 14:13:16', 1, 0, 'd15ab109e41711ec829a8c8caa87c861');
INSERT INTO `article` VALUES (90, '用 node 写命令行工具', '用来方便使用，免去繁琐的创建过程，所以写了个脚本工具，记录下来。\n\n需求：执行 `node` 文件，在控制台输入 文章标题、文章分类、以及文件名后自动创建 `MD` 文件。实现的功能如下：\n\n![](https://github.com/gershonv/note/blob/master/assets/node-shell.gif?raw=true)\n\n创建的内容如下：\n\n```md\n---\ntitle: node\ndate: 2020-01-09 10:09:38\n---\n```\n\n路径则是 `xxx/docs/node/node.md`\n\n## 前置知识\n\n- [commander](https://github.com/tj/commander.js): 解析用户命令行输入\n- [inquirer](https://github.com/SBoudrias/Inquirer.js): 常见的交互式命令行用户界面的集合\n- [chalk](https://github.com/chalk/chalk): 美化命令行，进行着色\n\n### commander\n\n[commander](https://github.com/tj/commander.js)灵感来自 `Ruby`，它提供了用户命令行输入和参数解析的强大功能，可以帮助我们简化命令行开发。\n根据其官方的描述，具有以下特性:\n\n- 参数解析\n- 强制多态\n- 可变参数\n- Git 风格的子命令\n- 自动化帮助信息\n- 自定义帮助等\n\n**example**\n\n```js\nconst program = require(\'commander\')\nconst inquirer = require(\'inquirer\')\nconst chalk = require(\'chalk\')\nprogram\n  .command(\'module\')\n  .alias(\'m\')\n  .description(\'输入名称\')\n  .option(\'-n, --name [moduleName]\', \'模块名称\')\n  .action(option => {\n    console.log(\'Hello World\', option.name)\n  })\n\nprogram.parse(process.argv)\n```\n\n```js\n$ node app m -n guosw // 输出：Hello World guosw\n```\n\n**commander API**\n\n- `command` – 定义命令行指令，后面可跟上一个 `name`，用空格隔开，如 `.command( ‘app [name] ‘)`\n- `alias` – 定义一个更短的命令行指令 ，如执行命令`\\$ app m` 与之是等价的\n- `description` – 描述，它会在 `help` 里面展示\n- `option` – 定义参数。它接受四个参数，在第一个参数中，它可输入短名字 -a 和长名字–app ,使用 | 或者,分隔，在命令行里使用时，这两个是等价的，区别是后者可以在程序里通过回调获取到；第二个为描述, 会在 `help` 信息里展示出来；第三个参数为回调函数，他接收的参数为一个`string`，有时候我们需要一个命令行创建多个模块，就需要一个回调来处理；第四个参数为默认值\n- `action` – 注册一个 callback 函数,这里需注意目前回调不支持 let 声明变量\n- `parse` – 解析命令行\n\n### inquirer\n\n在开发的过程中，我们需要频繁的跟命令行进行交互，借助 `inquirer` 这个模块就能轻松实现，它提供了用户界面和查询会话流程。它的语法是这样的（直接从[官方](https://github.com/SBoudrias/Inquirer.js)拷贝~~）\n\n```js\nvar inquirer = require(\'inquirer\')\ninquirer\n  .prompt([\n    /* Pass your questions in here */\n  ])\n  .then(function(answers) {\n    // Use user feedback for... whatever!!\n  })\n```\n\n**inquirer 功能简介**\n\n- `input` – 输入\n- `validate` – 验证\n- `list` – 列表选项\n- `confirm` – 提示\n- `checkbox` – 复选框等等\n\n**example**\n\n```js\ninquirer\n  .prompt([\n    {\n      type: \'input\',\n      name: \'title\',\n      message: \'请输入文章标题\',\n      validate: function(input) {\n        return !input ? \'标题不能为空\' : true\n      }\n    }\n  ])\n  .then(answers => {\n    console.log(answers) // { title: \'xxxx\' }\n  })\n```\n\n## 代码\n\n```js\nconst program = require(\'commander\')\nconst inquirer = require(\'inquirer\') // 命令行交互\nconst fs = require(\'fs\')\nconst path = require(\'path\')\nconst chalk = require(\'chalk\') // console.log color\nconst getDate = require(\'./getDate\')\n\n// 查询目录\nconst list = fs.readdirSync(\'./docs\') // 读取文件目录，里面还包含了文件\nconst folderList = list.filter(pathname => {\n  const filePath = path.resolve(__dirname, `../docs/${pathname}`)\n  return pathname !== \'.vuepress\' && fs.statSync(filePath).isDirectory()\n})\n\nprogram\n  .command(\'page\')\n  .alias(\'p\')\n  .description(\'脚本命令\')\n  .option(\'-a, --name [moduleName]\', \'模块名称\')\n  .action(async option => {\n    const result = await inquirer.prompt([\n      {\n        type: \'input\',\n        name: \'title\',\n        message: \'请输入文章标题\',\n        validate: function(input) {\n          return !input ? \'标题不能为空\' : true\n        }\n      },\n      {\n        type: \'list\',\n        name: \'tag\',\n        message: \'请选择分类\',\n        choices: folderList\n      },\n      {\n        type: \'input\',\n        name: \'filename\',\n        message: \'请输入文件名\',\n        validate: function(input) {\n          return !input ? \'文件名不能为空\' : true\n        }\n      }\n    ])\n\n    // 创建文件\n    const { title, tag, filename } = result\n    const filePath = path.resolve(__dirname, `../docs/${tag}/${filename}.md`)\n    const prefix = \'---\\n\' + `title: ${title}\\n` + `date: ${getDate()}\\n` + \'---\\n\'\n    fs.writeFileSync(filePath, prefix)\n    console.log(chalk.green(\'create page success: \'), filePath)\n  })\n\nprogram.parse(process.argv)\n```\n\n命令行 `node xx.js page` 或者 `node xx.js p` 即可触发上面的命令\n\n## 参考\n\n[跟着老司机玩转 Node 命令行](https://aotu.io/notes/2016/08/09/command-line-development/index.html)\n', 96, '2020-01-14 16:15:37', '2022-06-05 14:13:11', 1, 0, 'd15ab109e41711ec829a8c8caa87c861');
INSERT INTO `article` VALUES (92, 'ddddddddddddddddd', 'ddddddddddddddddddddddddd', 1, '2022-06-04 23:05:48', '2022-06-04 23:05:52', 1, 1, 'd15ab109e41711ec829a8c8caa87c861');
INSERT INTO `article` VALUES (93, 'qqqqqqqqqqqqqqqq', 'qqqqqqqqqqqqqqqqqqq', 4, '2022-06-05 00:30:19', '2022-06-07 13:42:58', 1, 1, '9f9c8ffae42311ec829a8c8caa87c861');
INSERT INTO `article` VALUES (94, 'e4dffd', 'sdfsdf', 3, '2022-06-05 00:32:12', '2022-06-07 13:42:52', 1, 0, 'e2c602aae42311ec829a8c8caa87c861');

-- ----------------------------
-- Table structure for category
-- ----------------------------
DROP TABLE IF EXISTS `category`;
CREATE TABLE `category`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `articleId` int NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `articleId`(`articleId` ASC) USING BTREE,
  CONSTRAINT `category_ibfk_1` FOREIGN KEY (`articleId`) REFERENCES `article` (`id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE = InnoDB AUTO_INCREMENT = 163 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of category
-- ----------------------------
INSERT INTO `category` VALUES (3, 'MySQL', 1);
INSERT INTO `category` VALUES (5, 'MySQL', 2);
INSERT INTO `category` VALUES (7, 'MySQL', 3);
INSERT INTO `category` VALUES (8, 'MySQL', 4);
INSERT INTO `category` VALUES (37, 'Sequelize', 23);
INSERT INTO `category` VALUES (38, 'Sequelize', 24);
INSERT INTO `category` VALUES (39, 'Sequelize', 25);
INSERT INTO `category` VALUES (40, 'Sequelize', 26);
INSERT INTO `category` VALUES (41, 'Sequelize', 27);
INSERT INTO `category` VALUES (42, 'Sequelize', 28);
INSERT INTO `category` VALUES (44, 'Vue', 30);
INSERT INTO `category` VALUES (46, 'Vue', 32);
INSERT INTO `category` VALUES (51, 'HTTP', 37);
INSERT INTO `category` VALUES (52, 'HTTP', 38);
INSERT INTO `category` VALUES (53, 'HTTP', 39);
INSERT INTO `category` VALUES (54, 'HTTP', 40);
INSERT INTO `category` VALUES (55, 'HTTP', 41);
INSERT INTO `category` VALUES (56, 'HTTP', 42);
INSERT INTO `category` VALUES (94, 'webpack', 64);
INSERT INTO `category` VALUES (108, 'Javascript', 74);
INSERT INTO `category` VALUES (120, 'Javascript', 76);
INSERT INTO `category` VALUES (121, 'React', 76);
INSERT INTO `category` VALUES (145, 'Node', NULL);
INSERT INTO `category` VALUES (146, 'Node', 86);
INSERT INTO `category` VALUES (147, 'Javascript', 87);
INSERT INTO `category` VALUES (149, 'Node', 88);
INSERT INTO `category` VALUES (150, '服务器与运维', 89);
INSERT INTO `category` VALUES (153, 'HTML-CSS', NULL);
INSERT INTO `category` VALUES (158, 'Node', 90);
INSERT INTO `category` VALUES (159, '服务器与运维', 90);
INSERT INTO `category` VALUES (160, 'HTTP', 92);
INSERT INTO `category` VALUES (161, 'MySQL', 93);
INSERT INTO `category` VALUES (162, 'HTTP', 94);

-- ----------------------------
-- Table structure for comment
-- ----------------------------
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `articleId` int NULL DEFAULT NULL,
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `createdAt` datetime NULL DEFAULT NULL,
  `updatedAt` datetime NULL DEFAULT NULL,
  `userId` int NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `articleId`(`articleId` ASC) USING BTREE,
  INDEX `userId`(`userId` ASC) USING BTREE,
  CONSTRAINT `comment_ibfk_1` FOREIGN KEY (`articleId`) REFERENCES `article` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `comment_ibfk_2` FOREIGN KEY (`userId`) REFERENCES `user` (`id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE = InnoDB AUTO_INCREMENT = 57 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of comment
-- ----------------------------
INSERT INTO `comment` VALUES (2, -1, '测试一下', '2019-09-19 22:00:36', '2019-09-19 22:00:36', 39449488);
INSERT INTO `comment` VALUES (3, 76, '评论~~~~', '2019-09-19 22:01:56', '2019-09-19 22:01:56', 39449488);
INSERT INTO `comment` VALUES (9, 76, '6', '2019-09-21 11:48:19', '2019-09-21 11:48:19', 22385375);
INSERT INTO `comment` VALUES (10, -1, '🌝🌝🌝 周末愉快', '2019-09-21 13:08:36', '2019-09-21 13:08:36', 34113677);
INSERT INTO `comment` VALUES (12, -1, '希望能赚点外快~\n有开发需求的希望能联系我一下\nQQ 434358603', '2019-09-21 15:10:04', '2019-09-21 15:10:04', 34113677);
INSERT INTO `comment` VALUES (14, 3, '非常不错，值得收藏学习', '2019-10-12 16:58:52', '2019-10-12 16:58:52', 42688338);
INSERT INTO `comment` VALUES (16, -1, '牛逼啊', '2019-10-20 19:06:31', '2019-10-20 19:06:31', 42410507);
INSERT INTO `comment` VALUES (17, 76, '不错', '2019-10-23 11:31:34', '2019-10-23 11:31:34', 25702916);
INSERT INTO `comment` VALUES (18, -1, '1', '2019-11-13 16:07:34', '2019-11-13 16:07:34', 43398519);
INSERT INTO `comment` VALUES (19, 76, '666', '2019-11-14 19:34:17', '2019-11-14 19:34:17', 43398521);
INSERT INTO `comment` VALUES (21, -1, '<script>alert(\'郭大大好\')</script>', '2019-11-16 11:35:48', '2019-11-16 11:35:48', 43398522);
INSERT INTO `comment` VALUES (27, -1, '文明语言谢谢', '2019-11-27 14:23:05', '2019-11-27 14:23:05', 34113677);
INSERT INTO `comment` VALUES (53, -1, '流弊', '2020-01-06 16:14:39', '2020-01-06 16:14:39', 47529553);
INSERT INTO `comment` VALUES (54, -1, '新年快乐', '2020-01-20 11:21:13', '2020-01-20 11:21:13', 47529554);
INSERT INTO `comment` VALUES (55, 76, 'dddddddddddddddddddddddd', '2022-06-05 22:11:08', '2022-06-05 22:11:08', 47529555);
INSERT INTO `comment` VALUES (56, 76, '测试', '2022-06-05 22:11:23', '2022-06-05 22:11:23', 47529555);

-- ----------------------------
-- Table structure for fragment
-- ----------------------------
DROP TABLE IF EXISTS `fragment`;
CREATE TABLE `fragment`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `author` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL,
  `createdAt` datetime NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 102 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of fragment
-- ----------------------------
INSERT INTO `fragment` VALUES (101, 'panyunyi', 'eeeeeeeeeeeeeeeeeeee', '2022-06-04 23:07:11');

-- ----------------------------
-- Table structure for ip
-- ----------------------------
DROP TABLE IF EXISTS `ip`;
CREATE TABLE `ip`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `ip` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `auth` tinyint(1) NULL DEFAULT 1,
  `userId` int NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `userId`(`userId` ASC) USING BTREE,
  CONSTRAINT `ip_ibfk_1` FOREIGN KEY (`userId`) REFERENCES `user` (`id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of ip
-- ----------------------------
INSERT INTO `ip` VALUES (1, '::ffff:127.0.0.1', 1, 34113677);

-- ----------------------------
-- Table structure for record
-- ----------------------------
DROP TABLE IF EXISTS `record`;
CREATE TABLE `record`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `articleId` int NOT NULL,
  `userId` int NULL DEFAULT NULL,
  `recordTime` datetime NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 175 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of record
-- ----------------------------
INSERT INTO `record` VALUES (101, -1, NULL, '2022-06-04 19:15:05');
INSERT INTO `record` VALUES (102, -1, NULL, '2022-06-04 19:15:11');
INSERT INTO `record` VALUES (103, 64, NULL, '2022-06-04 20:26:56');
INSERT INTO `record` VALUES (104, -1, NULL, '2022-06-04 20:27:02');
INSERT INTO `record` VALUES (105, -1, NULL, '2022-06-04 21:08:09');
INSERT INTO `record` VALUES (106, -1, NULL, '2022-06-04 21:08:30');
INSERT INTO `record` VALUES (107, 90, NULL, '2022-06-04 21:30:41');
INSERT INTO `record` VALUES (108, 90, NULL, '2022-06-04 22:18:38');
INSERT INTO `record` VALUES (109, 90, NULL, '2022-06-04 22:49:48');
INSERT INTO `record` VALUES (110, 90, NULL, '2022-06-04 22:57:10');
INSERT INTO `record` VALUES (111, 92, NULL, '2022-06-04 23:05:52');
INSERT INTO `record` VALUES (112, -1, NULL, '2022-06-05 00:24:57');
INSERT INTO `record` VALUES (113, 93, NULL, '2022-06-05 00:30:21');
INSERT INTO `record` VALUES (114, 94, NULL, '2022-06-05 00:32:13');
INSERT INTO `record` VALUES (115, -1, NULL, '2022-06-05 00:32:48');
INSERT INTO `record` VALUES (116, -1, NULL, '2022-06-05 00:32:53');
INSERT INTO `record` VALUES (117, -1, NULL, '2022-06-05 00:40:41');
INSERT INTO `record` VALUES (118, -1, NULL, '2022-06-05 00:43:24');
INSERT INTO `record` VALUES (119, -1, NULL, '2022-06-05 00:44:26');
INSERT INTO `record` VALUES (120, -1, NULL, '2022-06-05 00:45:37');
INSERT INTO `record` VALUES (121, -1, NULL, '2022-06-05 00:50:53');
INSERT INTO `record` VALUES (122, -1, NULL, '2022-06-05 00:51:46');
INSERT INTO `record` VALUES (123, -1, NULL, '2022-06-05 00:54:40');
INSERT INTO `record` VALUES (124, -1, NULL, '2022-06-05 00:56:24');
INSERT INTO `record` VALUES (125, -1, NULL, '2022-06-05 00:56:42');
INSERT INTO `record` VALUES (126, -1, NULL, '2022-06-05 00:57:05');
INSERT INTO `record` VALUES (127, 90, NULL, '2022-06-05 14:13:11');
INSERT INTO `record` VALUES (128, 89, NULL, '2022-06-05 14:13:16');
INSERT INTO `record` VALUES (129, -1, NULL, '2022-06-05 14:13:28');
INSERT INTO `record` VALUES (130, -1, NULL, '2022-06-05 14:16:48');
INSERT INTO `record` VALUES (131, -1, NULL, '2022-06-05 14:17:18');
INSERT INTO `record` VALUES (132, -1, NULL, '2022-06-05 14:18:44');
INSERT INTO `record` VALUES (133, -1, NULL, '2022-06-05 14:19:11');
INSERT INTO `record` VALUES (134, -1, NULL, '2022-06-05 14:19:42');
INSERT INTO `record` VALUES (135, -1, NULL, '2022-06-05 14:20:21');
INSERT INTO `record` VALUES (136, -1, NULL, '2022-06-05 14:22:00');
INSERT INTO `record` VALUES (137, -1, NULL, '2022-06-05 14:27:23');
INSERT INTO `record` VALUES (138, -1, NULL, '2022-06-05 14:27:44');
INSERT INTO `record` VALUES (139, -1, NULL, '2022-06-05 14:28:32');
INSERT INTO `record` VALUES (140, -1, NULL, '2022-06-05 14:29:05');
INSERT INTO `record` VALUES (141, -1, NULL, '2022-06-05 14:29:30');
INSERT INTO `record` VALUES (142, -1, NULL, '2022-06-05 14:29:46');
INSERT INTO `record` VALUES (143, -1, NULL, '2022-06-05 14:30:18');
INSERT INTO `record` VALUES (144, -1, NULL, '2022-06-05 14:30:46');
INSERT INTO `record` VALUES (145, -1, NULL, '2022-06-05 14:31:37');
INSERT INTO `record` VALUES (146, -1, NULL, '2022-06-05 14:34:24');
INSERT INTO `record` VALUES (147, -1, NULL, '2022-06-05 14:36:56');
INSERT INTO `record` VALUES (148, 76, NULL, '2022-06-05 14:37:35');
INSERT INTO `record` VALUES (149, 76, NULL, '2022-06-05 14:50:41');
INSERT INTO `record` VALUES (150, 76, NULL, '2022-06-05 14:50:46');
INSERT INTO `record` VALUES (151, 76, NULL, '2022-06-05 14:58:57');
INSERT INTO `record` VALUES (152, 76, NULL, '2022-06-05 15:33:37');
INSERT INTO `record` VALUES (153, 76, NULL, '2022-06-05 15:33:42');
INSERT INTO `record` VALUES (154, 76, NULL, '2022-06-05 15:33:48');
INSERT INTO `record` VALUES (155, 76, NULL, '2022-06-05 15:34:25');
INSERT INTO `record` VALUES (156, 76, NULL, '2022-06-05 15:34:28');
INSERT INTO `record` VALUES (157, -1, NULL, '2022-06-05 20:40:32');
INSERT INTO `record` VALUES (158, -1, NULL, '2022-06-05 20:49:17');
INSERT INTO `record` VALUES (159, -1, NULL, '2022-06-05 21:52:00');
INSERT INTO `record` VALUES (160, -1, NULL, '2022-06-05 22:07:44');
INSERT INTO `record` VALUES (161, 76, NULL, '2022-06-05 22:09:04');
INSERT INTO `record` VALUES (162, 76, NULL, '2022-06-05 22:11:26');
INSERT INTO `record` VALUES (163, 93, NULL, '2022-06-05 23:25:35');
INSERT INTO `record` VALUES (164, 93, NULL, '2022-06-06 09:03:00');
INSERT INTO `record` VALUES (165, 76, NULL, '2022-06-06 15:21:18');
INSERT INTO `record` VALUES (166, 74, NULL, '2022-06-06 15:44:24');
INSERT INTO `record` VALUES (167, -1, NULL, '2022-06-06 15:44:26');
INSERT INTO `record` VALUES (168, 64, NULL, '2022-06-06 15:44:37');
INSERT INTO `record` VALUES (169, -1, NULL, '2022-06-06 15:53:53');
INSERT INTO `record` VALUES (170, -1, NULL, '2022-06-06 18:42:13');
INSERT INTO `record` VALUES (171, -1, NULL, '2022-06-06 18:42:27');
INSERT INTO `record` VALUES (172, 94, NULL, '2022-06-07 13:42:50');
INSERT INTO `record` VALUES (173, 94, NULL, '2022-06-07 13:42:52');
INSERT INTO `record` VALUES (174, 93, NULL, '2022-06-07 13:42:58');

-- ----------------------------
-- Table structure for reply
-- ----------------------------
DROP TABLE IF EXISTS `reply`;
CREATE TABLE `reply`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `createdAt` datetime NULL DEFAULT NULL,
  `updatedAt` datetime NULL DEFAULT NULL,
  `articleId` int NULL DEFAULT NULL,
  `commentId` int NULL DEFAULT NULL,
  `userId` int NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `articleId`(`articleId` ASC) USING BTREE,
  INDEX `userId`(`userId` ASC) USING BTREE,
  CONSTRAINT `reply_ibfk_1` FOREIGN KEY (`articleId`) REFERENCES `article` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `reply_ibfk_2` FOREIGN KEY (`userId`) REFERENCES `user` (`id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE = InnoDB AUTO_INCREMENT = 28 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of reply
-- ----------------------------
INSERT INTO `reply` VALUES (1, '测试一下', '2019-09-20 12:08:46', '2019-09-20 12:08:46', -1, 2, 34113678);
INSERT INTO `reply` VALUES (3, '回复', '2019-09-20 17:16:56', '2019-09-20 17:16:56', 76, 3, 34113677);
INSERT INTO `reply` VALUES (4, 'welcome', '2019-09-21 12:00:53', '2019-09-21 12:00:53', 76, 9, 34113677);
INSERT INTO `reply` VALUES (5, '1', '2019-09-21 13:39:24', '2019-09-21 13:39:24', -1, 10, 22385375);
INSERT INTO `reply` VALUES (7, '🌝 欢迎观光', '2019-09-22 21:53:21', '2019-09-22 21:53:21', NULL, 13, 34113677);
INSERT INTO `reply` VALUES (8, '自己应该不能评论自己的', '2019-10-12 17:00:20', '2019-10-12 17:00:20', 3, 14, 42688338);
INSERT INTO `reply` VALUES (9, '设计上是可以评论的、这两天会加入 md 文件的导入导出功能，欢迎交流', '2019-10-12 17:08:04', '2019-10-12 17:08:04', 3, 14, 34113677);
INSERT INTO `reply` VALUES (10, '爽啊', '2019-10-20 19:06:41', '2019-10-20 19:06:41', -1, 16, 42410507);
INSERT INTO `reply` VALUES (11, '666', '2019-10-20 19:06:48', '2019-10-20 19:06:48', -1, 16, 42410507);
INSERT INTO `reply` VALUES (12, '评论咋做的啊', '2019-10-20 19:07:00', '2019-10-20 19:07:00', -1, 16, 42410507);
INSERT INTO `reply` VALUES (14, '666', '2019-10-20 19:07:31', '2019-10-20 19:07:31', -1, 2, 42410507);
INSERT INTO `reply` VALUES (15, 'readme 里面有写表的设计~', '2019-10-20 19:23:02', '2019-10-20 19:23:02', -1, 16, 34113677);
INSERT INTO `reply` VALUES (16, '多谢支持', '2019-10-23 11:32:37', '2019-10-23 11:32:37', 76, 17, 34113677);
INSERT INTO `reply` VALUES (17, 'hello', '2019-11-13 16:09:27', '2019-11-13 16:09:27', -1, 18, 34113677);
INSERT INTO `reply` VALUES (20, '111', '2019-11-16 11:42:02', '2019-11-16 11:42:02', -1, 18, 43398522);
INSERT INTO `reply` VALUES (23, 'test', '2019-12-20 22:10:25', '2019-12-20 22:10:25', 76, 3, 18414491);
INSERT INTO `reply` VALUES (24, 'test', '2019-12-20 22:10:33', '2019-12-20 22:10:33', 76, 3, 18414491);
INSERT INTO `reply` VALUES (25, 'test', '2019-12-20 22:11:12', '2019-12-20 22:11:12', 76, 3, 18414491);
INSERT INTO `reply` VALUES (26, 'test', '2019-12-20 22:11:26', '2019-12-20 22:11:26', 76, 9, 18414491);
INSERT INTO `reply` VALUES (27, 'ip 禁用功能已开启', '2020-01-20 16:10:41', '2020-01-20 16:10:41', -1, 54, 34113677);

-- ----------------------------
-- Table structure for tag
-- ----------------------------
DROP TABLE IF EXISTS `tag`;
CREATE TABLE `tag`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `articleId` int NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `articleId`(`articleId` ASC) USING BTREE,
  CONSTRAINT `tag_ibfk_1` FOREIGN KEY (`articleId`) REFERENCES `article` (`id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE = InnoDB AUTO_INCREMENT = 206 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tag
-- ----------------------------
INSERT INTO `tag` VALUES (2, 'MySQL', 1);
INSERT INTO `tag` VALUES (4, 'MySQL', 2);
INSERT INTO `tag` VALUES (6, 'MySQL', 3);
INSERT INTO `tag` VALUES (7, 'MySQL', 4);
INSERT INTO `tag` VALUES (38, 'Sequelize', 23);
INSERT INTO `tag` VALUES (39, 'Sequelize', 24);
INSERT INTO `tag` VALUES (40, 'Sequelize', 25);
INSERT INTO `tag` VALUES (41, 'Sequelize', 26);
INSERT INTO `tag` VALUES (42, 'Sequelize', 27);
INSERT INTO `tag` VALUES (43, 'Sequelize', 28);
INSERT INTO `tag` VALUES (45, 'Vue', 30);
INSERT INTO `tag` VALUES (46, 'MVVM', 30);
INSERT INTO `tag` VALUES (49, 'Vue', 32);
INSERT INTO `tag` VALUES (59, 'HTTP', 37);
INSERT INTO `tag` VALUES (60, 'HTTP', 38);
INSERT INTO `tag` VALUES (61, 'HTTP', 39);
INSERT INTO `tag` VALUES (62, '跨域', 39);
INSERT INTO `tag` VALUES (63, 'HTTP', 40);
INSERT INTO `tag` VALUES (65, 'HTTP', 41);
INSERT INTO `tag` VALUES (66, 'HTTP', 42);
INSERT INTO `tag` VALUES (134, 'webpack', 64);
INSERT INTO `tag` VALUES (149, 'Javascript', 74);
INSERT INTO `tag` VALUES (150, 'ES6', 74);
INSERT INTO `tag` VALUES (162, 'Javascript', 76);
INSERT INTO `tag` VALUES (163, 'React', 76);
INSERT INTO `tag` VALUES (188, 'Node', 86);
INSERT INTO `tag` VALUES (189, 'Javascript', 87);
INSERT INTO `tag` VALUES (191, 'Node', 88);
INSERT INTO `tag` VALUES (192, '服务器与运维', 89);
INSERT INTO `tag` VALUES (201, 'Node', 90);
INSERT INTO `tag` VALUES (202, '服务器与运维', 90);
INSERT INTO `tag` VALUES (203, 'HTTP', 92);
INSERT INTO `tag` VALUES (204, 'MySQL', 93);
INSERT INTO `tag` VALUES (205, 'HTTP', 94);

-- ----------------------------
-- Table structure for user
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `username` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `password` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '通过 bcrypt 加密后的密码',
  `email` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `notice` tinyint(1) NULL DEFAULT 1,
  `disabledDiscuss` tinyint(1) NULL DEFAULT 0,
  `role` tinyint NULL DEFAULT 2 COMMENT '用户权限：1 - admin, 2 - 普通用户',
  `github` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL,
  `createdAt` datetime NULL DEFAULT NULL,
  `updatedAt` datetime NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 47529556 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES (6906169, 'zivenday', NULL, NULL, 1, 0, 2, '{\"login\":\"zivenday\",\"id\":6906169,\"node_id\":\"MDQ6VXNlcjY5MDYxNjk=\",\"avatar_url\":\"https://avatars1.githubusercontent.com/u/6906169?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/zivenday\",\"html_url\":\"https://github.com/zivenday\",\"followers_url\":\"https://api.github.com/users/zivenday/followers\",\"following_url\":\"https://api.github.com/users/zivenday/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/zivenday/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/zivenday/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/zivenday/subscriptions\",\"organizations_url\":\"https://api.github.com/users/zivenday/orgs\",\"repos_url\":\"https://api.github.com/users/zivenday/repos\",\"events_url\":\"https://api.github.com/users/zivenday/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/zivenday/received_events\",\"type\":\"User\",\"site_admin\":false,\"name\":\"zivenday\",\"company\":null,\"blog\":\"\",\"location\":null,\"email\":null,\"hireable\":null,\"bio\":null,\"public_repos\":30,\"public_gists\":0,\"followers\":1,\"following\":3,\"created_at\":\"2014-03-10T10:59:14Z\",\"updated_at\":\"2019-11-18T09:21:07Z\"}', '2019-11-18 17:21:15', '2019-11-18 17:21:15');
INSERT INTO `user` VALUES (8874799, 'edwardwang0302', NULL, 'edwardwang0302@me.com', 1, 0, 2, '{\"login\":\"edwardwang0302\",\"id\":8874799,\"node_id\":\"MDQ6VXNlcjg4NzQ3OTk=\",\"avatar_url\":\"https://avatars2.githubusercontent.com/u/8874799?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/edwardwang0302\",\"html_url\":\"https://github.com/edwardwang0302\",\"followers_url\":\"https://api.github.com/users/edwardwang0302/followers\",\"following_url\":\"https://api.github.com/users/edwardwang0302/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/edwardwang0302/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/edwardwang0302/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/edwardwang0302/subscriptions\",\"organizations_url\":\"https://api.github.com/users/edwardwang0302/orgs\",\"repos_url\":\"https://api.github.com/users/edwardwang0302/repos\",\"events_url\":\"https://api.github.com/users/edwardwang0302/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/edwardwang0302/received_events\",\"type\":\"User\",\"site_admin\":false,\"name\":\"edwardwang0302\",\"company\":null,\"blog\":\"\",\"location\":null,\"email\":\"edwardwang0302@me.com\",\"hireable\":null,\"bio\":null,\"public_repos\":24,\"public_gists\":0,\"followers\":3,\"following\":10,\"created_at\":\"2014-09-23T11:02:02Z\",\"updated_at\":\"2019-11-11T03:21:07Z\"}', '2019-11-11 19:45:51', '2019-11-11 19:45:51');
INSERT INTO `user` VALUES (10323102, 'kevin', NULL, 'wangb8909@gmail.com', 1, 0, 2, '{\"login\":\"doornot\",\"id\":10323102,\"node_id\":\"MDQ6VXNlcjEwMzIzMTAy\",\"avatar_url\":\"https://avatars1.githubusercontent.com/u/10323102?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/doornot\",\"html_url\":\"https://github.com/doornot\",\"followers_url\":\"https://api.github.com/users/doornot/followers\",\"following_url\":\"https://api.github.com/users/doornot/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/doornot/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/doornot/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/doornot/subscriptions\",\"organizations_url\":\"https://api.github.com/users/doornot/orgs\",\"repos_url\":\"https://api.github.com/users/doornot/repos\",\"events_url\":\"https://api.github.com/users/doornot/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/doornot/received_events\",\"type\":\"User\",\"site_admin\":false,\"name\":\"kevin\",\"company\":null,\"blog\":\"\",\"location\":\"shanghai\",\"email\":\"wangb8909@gmail.com\",\"hireable\":null,\"bio\":null,\"public_repos\":17,\"public_gists\":2,\"followers\":1,\"following\":0,\"created_at\":\"2014-12-27T12:51:43Z\",\"updated_at\":\"2019-12-25T11:35:06Z\"}', '2019-12-27 11:21:17', '2019-12-27 11:21:17');
INSERT INTO `user` VALUES (10766546, 'zhangboxuan', NULL, NULL, 1, 0, 2, '{\"login\":\"jokingzhang\",\"id\":10766546,\"node_id\":\"MDQ6VXNlcjEwNzY2NTQ2\",\"avatar_url\":\"https://avatars2.githubusercontent.com/u/10766546?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/jokingzhang\",\"html_url\":\"https://github.com/jokingzhang\",\"followers_url\":\"https://api.github.com/users/jokingzhang/followers\",\"following_url\":\"https://api.github.com/users/jokingzhang/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/jokingzhang/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/jokingzhang/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/jokingzhang/subscriptions\",\"organizations_url\":\"https://api.github.com/users/jokingzhang/orgs\",\"repos_url\":\"https://api.github.com/users/jokingzhang/repos\",\"events_url\":\"https://api.github.com/users/jokingzhang/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/jokingzhang/received_events\",\"type\":\"User\",\"site_admin\":false,\"name\":\"zhangboxuan\",\"company\":null,\"blog\":\"\",\"location\":null,\"email\":null,\"hireable\":true,\"bio\":\"学习前端中...\",\"public_repos\":26,\"public_gists\":0,\"followers\":2,\"following\":10,\"created_at\":\"2015-01-30T01:52:33Z\",\"updated_at\":\"2019-09-17T13:48:36Z\"}', '2019-09-22 15:30:06', '2019-09-22 15:30:06');
INSERT INTO `user` VALUES (13863422, 'Neal', NULL, NULL, 1, 0, 2, '{\"login\":\"snaildarter\",\"id\":13863422,\"node_id\":\"MDQ6VXNlcjEzODYzNDIy\",\"avatar_url\":\"https://avatars3.githubusercontent.com/u/13863422?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/snaildarter\",\"html_url\":\"https://github.com/snaildarter\",\"followers_url\":\"https://api.github.com/users/snaildarter/followers\",\"following_url\":\"https://api.github.com/users/snaildarter/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/snaildarter/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/snaildarter/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/snaildarter/subscriptions\",\"organizations_url\":\"https://api.github.com/users/snaildarter/orgs\",\"repos_url\":\"https://api.github.com/users/snaildarter/repos\",\"events_url\":\"https://api.github.com/users/snaildarter/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/snaildarter/received_events\",\"type\":\"User\",\"site_admin\":false,\"name\":\"Neal\",\"company\":null,\"blog\":\"\",\"location\":null,\"email\":null,\"hireable\":null,\"bio\":null,\"public_repos\":11,\"public_gists\":0,\"followers\":3,\"following\":60,\"created_at\":\"2015-08-19T04:55:58Z\",\"updated_at\":\"2019-09-10T15:26:42Z\"}', '2019-09-26 22:45:44', '2019-09-26 22:45:44');
INSERT INTO `user` VALUES (14848534, 'Jiahao H', NULL, 'okbexx@gmail.com', 1, 0, 2, '{\"login\":\"okbexx\",\"id\":14848534,\"node_id\":\"MDQ6VXNlcjE0ODQ4NTM0\",\"avatar_url\":\"https://avatars1.githubusercontent.com/u/14848534?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/okbexx\",\"html_url\":\"https://github.com/okbexx\",\"followers_url\":\"https://api.github.com/users/okbexx/followers\",\"following_url\":\"https://api.github.com/users/okbexx/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/okbexx/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/okbexx/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/okbexx/subscriptions\",\"organizations_url\":\"https://api.github.com/users/okbexx/orgs\",\"repos_url\":\"https://api.github.com/users/okbexx/repos\",\"events_url\":\"https://api.github.com/users/okbexx/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/okbexx/received_events\",\"type\":\"User\",\"site_admin\":false,\"name\":\"Jiahao H\",\"company\":null,\"blog\":\"http://huangjiahao.me\",\"location\":null,\"email\":\"okbexx@gmail.com\",\"hireable\":null,\"bio\":\"Focus on Front development\",\"public_repos\":13,\"public_gists\":0,\"followers\":5,\"following\":16,\"created_at\":\"2015-09-26T10:00:16Z\",\"updated_at\":\"2019-07-22T03:55:25Z\"}', '2019-10-26 13:52:59', '2019-10-26 13:52:59');
INSERT INTO `user` VALUES (18414491, 'Leo', NULL, 'leo-fe@foxmail.com', 1, 0, 2, '{\"login\":\"LeoCharles\",\"id\":18414491,\"node_id\":\"MDQ6VXNlcjE4NDE0NDkx\",\"avatar_url\":\"https://avatars2.githubusercontent.com/u/18414491?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/LeoCharles\",\"html_url\":\"https://github.com/LeoCharles\",\"followers_url\":\"https://api.github.com/users/LeoCharles/followers\",\"following_url\":\"https://api.github.com/users/LeoCharles/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/LeoCharles/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/LeoCharles/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/LeoCharles/subscriptions\",\"organizations_url\":\"https://api.github.com/users/LeoCharles/orgs\",\"repos_url\":\"https://api.github.com/users/LeoCharles/repos\",\"events_url\":\"https://api.github.com/users/LeoCharles/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/LeoCharles/received_events\",\"type\":\"User\",\"site_admin\":false,\"name\":\"Leo\",\"company\":null,\"blog\":\"\",\"location\":\"Wuhan,China\",\"email\":\"leo-fe@foxmail.com\",\"hireable\":null,\"bio\":null,\"public_repos\":22,\"public_gists\":0,\"followers\":6,\"following\":142,\"created_at\":\"2016-04-12T06:52:19Z\",\"updated_at\":\"2019-11-27T15:03:33Z\"}', '2019-12-20 22:09:40', '2019-12-20 22:09:40');
INSERT INTO `user` VALUES (22385375, 'Blacker', NULL, '25556621@qq.com', 1, 0, 2, '{\"login\":\"hiblacker\",\"id\":22385375,\"node_id\":\"MDQ6VXNlcjIyMzg1Mzc1\",\"avatar_url\":\"https://avatars0.githubusercontent.com/u/22385375?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/hiblacker\",\"html_url\":\"https://github.com/hiblacker\",\"followers_url\":\"https://api.github.com/users/hiblacker/followers\",\"following_url\":\"https://api.github.com/users/hiblacker/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/hiblacker/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/hiblacker/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/hiblacker/subscriptions\",\"organizations_url\":\"https://api.github.com/users/hiblacker/orgs\",\"repos_url\":\"https://api.github.com/users/hiblacker/repos\",\"events_url\":\"https://api.github.com/users/hiblacker/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/hiblacker/received_events\",\"type\":\"User\",\"site_admin\":false,\"name\":\"Blacker\",\"company\":null,\"blog\":\"\",\"location\":null,\"email\":\"25556621@qq.com\",\"hireable\":null,\"bio\":\"曾梦想仗剑走天涯\",\"public_repos\":56,\"public_gists\":0,\"followers\":1,\"following\":4,\"created_at\":\"2016-09-23T03:18:41Z\",\"updated_at\":\"2019-08-22T02:39:29Z\"}', '2019-09-21 11:47:40', '2019-09-21 11:47:40');
INSERT INTO `user` VALUES (23510431, 'KiekerTi', NULL, 'aom.jasper@foxmail.com', 1, 0, 2, '{\"login\":\"Kiekerti\",\"id\":23510431,\"node_id\":\"MDQ6VXNlcjIzNTEwNDMx\",\"avatar_url\":\"https://avatars0.githubusercontent.com/u/23510431?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/Kiekerti\",\"html_url\":\"https://github.com/Kiekerti\",\"followers_url\":\"https://api.github.com/users/Kiekerti/followers\",\"following_url\":\"https://api.github.com/users/Kiekerti/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/Kiekerti/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/Kiekerti/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/Kiekerti/subscriptions\",\"organizations_url\":\"https://api.github.com/users/Kiekerti/orgs\",\"repos_url\":\"https://api.github.com/users/Kiekerti/repos\",\"events_url\":\"https://api.github.com/users/Kiekerti/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/Kiekerti/received_events\",\"type\":\"User\",\"site_admin\":false,\"name\":\"KiekerTi\",\"company\":null,\"blog\":\"\",\"location\":\"Sichuan,China\",\"email\":\"aom.jasper@foxmail.com\",\"hireable\":null,\"bio\":null,\"public_repos\":5,\"public_gists\":1,\"followers\":0,\"following\":5,\"created_at\":\"2016-11-16T21:39:38Z\",\"updated_at\":\"2019-11-30T20:25:50Z\"}', '2019-12-04 23:29:06', '2019-12-04 23:29:06');
INSERT INTO `user` VALUES (23738098, 'viktor', NULL, NULL, 1, 0, 2, '{\"login\":\"ViktorWong\",\"id\":23738098,\"node_id\":\"MDQ6VXNlcjIzNzM4MDk4\",\"avatar_url\":\"https://avatars2.githubusercontent.com/u/23738098?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/ViktorWong\",\"html_url\":\"https://github.com/ViktorWong\",\"followers_url\":\"https://api.github.com/users/ViktorWong/followers\",\"following_url\":\"https://api.github.com/users/ViktorWong/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/ViktorWong/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/ViktorWong/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/ViktorWong/subscriptions\",\"organizations_url\":\"https://api.github.com/users/ViktorWong/orgs\",\"repos_url\":\"https://api.github.com/users/ViktorWong/repos\",\"events_url\":\"https://api.github.com/users/ViktorWong/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/ViktorWong/received_events\",\"type\":\"User\",\"site_admin\":false,\"name\":\"viktor\",\"company\":\"陆金所\",\"blog\":\"https://viktorwong.github.io/Full-Stack-Library/\",\"location\":\"深圳\",\"email\":null,\"hireable\":null,\"bio\":\"缓进则退，不进则汰\",\"public_repos\":48,\"public_gists\":1,\"followers\":18,\"following\":32,\"created_at\":\"2016-11-25T10:27:04Z\",\"updated_at\":\"2019-09-19T05:40:26Z\"}', '2019-11-15 16:57:06', '2019-11-15 16:57:06');
INSERT INTO `user` VALUES (25113274, '老崔呀', NULL, NULL, 1, 0, 2, '{\"login\":\"cgq001\",\"id\":25113274,\"node_id\":\"MDQ6VXNlcjI1MTEzMjc0\",\"avatar_url\":\"https://avatars2.githubusercontent.com/u/25113274?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/cgq001\",\"html_url\":\"https://github.com/cgq001\",\"followers_url\":\"https://api.github.com/users/cgq001/followers\",\"following_url\":\"https://api.github.com/users/cgq001/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/cgq001/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/cgq001/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/cgq001/subscriptions\",\"organizations_url\":\"https://api.github.com/users/cgq001/orgs\",\"repos_url\":\"https://api.github.com/users/cgq001/repos\",\"events_url\":\"https://api.github.com/users/cgq001/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/cgq001/received_events\",\"type\":\"User\",\"site_admin\":false,\"name\":\"老崔呀\",\"company\":null,\"blog\":\"\",\"location\":\"中国河南\",\"email\":null,\"hireable\":null,\"bio\":null,\"public_repos\":15,\"public_gists\":0,\"followers\":0,\"following\":0,\"created_at\":\"2017-01-14T02:28:51Z\",\"updated_at\":\"2019-08-24T15:30:52Z\"}', '2019-10-05 22:47:33', '2019-10-05 22:47:33');
INSERT INTO `user` VALUES (25702916, 'fiveLucky', NULL, NULL, 1, 0, 2, '{\"login\":\"fiveLucky\",\"id\":25702916,\"node_id\":\"MDQ6VXNlcjI1NzAyOTE2\",\"avatar_url\":\"https://avatars3.githubusercontent.com/u/25702916?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/fiveLucky\",\"html_url\":\"https://github.com/fiveLucky\",\"followers_url\":\"https://api.github.com/users/fiveLucky/followers\",\"following_url\":\"https://api.github.com/users/fiveLucky/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/fiveLucky/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/fiveLucky/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/fiveLucky/subscriptions\",\"organizations_url\":\"https://api.github.com/users/fiveLucky/orgs\",\"repos_url\":\"https://api.github.com/users/fiveLucky/repos\",\"events_url\":\"https://api.github.com/users/fiveLucky/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/fiveLucky/received_events\",\"type\":\"User\",\"site_admin\":false,\"name\":\"花爱吾\",\"company\":null,\"blog\":\"\",\"location\":null,\"email\":null,\"hireable\":null,\"bio\":\"Love yourself, to love others！\",\"public_repos\":40,\"public_gists\":0,\"followers\":4,\"following\":13,\"created_at\":\"2017-02-11T08:26:48Z\",\"updated_at\":\"2019-10-22T00:25:00Z\"}', '2019-10-23 11:30:13', '2019-11-25 15:25:13');
INSERT INTO `user` VALUES (26128209, 't596502', NULL, 'nathantai@outlook.com', 1, 0, 2, '{\"login\":\"t596502\",\"id\":26128209,\"node_id\":\"MDQ6VXNlcjI2MTI4MjA5\",\"avatar_url\":\"https://avatars1.githubusercontent.com/u/26128209?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/t596502\",\"html_url\":\"https://github.com/t596502\",\"followers_url\":\"https://api.github.com/users/t596502/followers\",\"following_url\":\"https://api.github.com/users/t596502/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/t596502/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/t596502/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/t596502/subscriptions\",\"organizations_url\":\"https://api.github.com/users/t596502/orgs\",\"repos_url\":\"https://api.github.com/users/t596502/repos\",\"events_url\":\"https://api.github.com/users/t596502/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/t596502/received_events\",\"type\":\"User\",\"site_admin\":false,\"name\":\"NathanTai\",\"company\":null,\"blog\":\"\",\"location\":null,\"email\":\"nathantai@outlook.com\",\"hireable\":null,\"bio\":null,\"public_repos\":11,\"public_gists\":0,\"followers\":23,\"following\":33,\"created_at\":\"2017-03-02T01:40:35Z\",\"updated_at\":\"2019-10-27T08:00:12Z\"}', '2019-09-20 18:07:56', '2019-11-25 17:38:16');
INSERT INTO `user` VALUES (26135637, '阿怪', NULL, '862704559@qq.com', 1, 0, 2, '{\"login\":\"wfyweb\",\"id\":26135637,\"node_id\":\"MDQ6VXNlcjI2MTM1NjM3\",\"avatar_url\":\"https://avatars3.githubusercontent.com/u/26135637?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/wfyweb\",\"html_url\":\"https://github.com/wfyweb\",\"followers_url\":\"https://api.github.com/users/wfyweb/followers\",\"following_url\":\"https://api.github.com/users/wfyweb/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/wfyweb/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/wfyweb/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/wfyweb/subscriptions\",\"organizations_url\":\"https://api.github.com/users/wfyweb/orgs\",\"repos_url\":\"https://api.github.com/users/wfyweb/repos\",\"events_url\":\"https://api.github.com/users/wfyweb/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/wfyweb/received_events\",\"type\":\"User\",\"site_admin\":false,\"name\":\"阿怪\",\"company\":null,\"blog\":\"wfyweb.com\",\"location\":null,\"email\":\"862704559@qq.com\",\"hireable\":null,\"bio\":null,\"public_repos\":34,\"public_gists\":0,\"followers\":1,\"following\":13,\"created_at\":\"2017-03-02T08:39:08Z\",\"updated_at\":\"2019-12-10T15:20:07Z\"}', '2019-12-11 08:07:12', '2019-12-11 08:07:12');
INSERT INTO `user` VALUES (26272801, 'haro', NULL, NULL, 1, 0, 2, '{\"login\":\"GOGOGOSIR\",\"id\":26272801,\"node_id\":\"MDQ6VXNlcjI2MjcyODAx\",\"avatar_url\":\"https://avatars2.githubusercontent.com/u/26272801?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/GOGOGOSIR\",\"html_url\":\"https://github.com/GOGOGOSIR\",\"followers_url\":\"https://api.github.com/users/GOGOGOSIR/followers\",\"following_url\":\"https://api.github.com/users/GOGOGOSIR/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/GOGOGOSIR/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/GOGOGOSIR/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/GOGOGOSIR/subscriptions\",\"organizations_url\":\"https://api.github.com/users/GOGOGOSIR/orgs\",\"repos_url\":\"https://api.github.com/users/GOGOGOSIR/repos\",\"events_url\":\"https://api.github.com/users/GOGOGOSIR/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/GOGOGOSIR/received_events\",\"type\":\"User\",\"site_admin\":false,\"name\":\"haro\",\"company\":null,\"blog\":\"\",\"location\":null,\"email\":null,\"hireable\":null,\"bio\":null,\"public_repos\":31,\"public_gists\":0,\"followers\":0,\"following\":11,\"created_at\":\"2017-03-08T09:16:46Z\",\"updated_at\":\"2019-11-05T02:33:05Z\"}', '2019-11-08 16:33:04', '2019-11-08 16:33:04');
INSERT INTO `user` VALUES (28107509, '老农爱盐碱地', NULL, 'helloforrestworld@163.com', 1, 0, 2, '{\"login\":\"helloforrestworld\",\"id\":28107509,\"node_id\":\"MDQ6VXNlcjI4MTA3NTA5\",\"avatar_url\":\"https://avatars3.githubusercontent.com/u/28107509?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/helloforrestworld\",\"html_url\":\"https://github.com/helloforrestworld\",\"followers_url\":\"https://api.github.com/users/helloforrestworld/followers\",\"following_url\":\"https://api.github.com/users/helloforrestworld/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/helloforrestworld/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/helloforrestworld/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/helloforrestworld/subscriptions\",\"organizations_url\":\"https://api.github.com/users/helloforrestworld/orgs\",\"repos_url\":\"https://api.github.com/users/helloforrestworld/repos\",\"events_url\":\"https://api.github.com/users/helloforrestworld/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/helloforrestworld/received_events\",\"type\":\"User\",\"site_admin\":false,\"name\":\"老农爱盐碱地\",\"company\":null,\"blog\":\"\",\"location\":\"Guangzhou,Beijing\",\"email\":\"helloforrestworld@163.com\",\"hireable\":null,\"bio\":\"forrest always pays his debts\\r\\n\",\"public_repos\":31,\"public_gists\":0,\"followers\":28,\"following\":39,\"created_at\":\"2017-04-27T15:35:16Z\",\"updated_at\":\"2019-12-02T00:22:40Z\"}', '2020-01-02 00:25:51', '2020-01-02 00:25:51');
INSERT INTO `user` VALUES (28488810, '熊购到家', NULL, '603845011@qq.com', 1, 0, 2, '{\"login\":\"liyangphp\",\"id\":28488810,\"node_id\":\"MDQ6VXNlcjI4NDg4ODEw\",\"avatar_url\":\"https://avatars3.githubusercontent.com/u/28488810?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/liyangphp\",\"html_url\":\"https://github.com/liyangphp\",\"followers_url\":\"https://api.github.com/users/liyangphp/followers\",\"following_url\":\"https://api.github.com/users/liyangphp/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/liyangphp/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/liyangphp/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/liyangphp/subscriptions\",\"organizations_url\":\"https://api.github.com/users/liyangphp/orgs\",\"repos_url\":\"https://api.github.com/users/liyangphp/repos\",\"events_url\":\"https://api.github.com/users/liyangphp/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/liyangphp/received_events\",\"type\":\"User\",\"site_admin\":false,\"name\":\"熊购到家\",\"company\":\"server@xionggouba.com\",\"blog\":\"https://xionggouba.com\",\"location\":null,\"email\":\"603845011@qq.com\",\"hireable\":null,\"bio\":null,\"public_repos\":11,\"public_gists\":0,\"followers\":0,\"following\":1,\"created_at\":\"2017-05-06T16:14:37Z\",\"updated_at\":\"2019-11-05T11:24:05Z\"}', '2019-11-25 12:16:53', '2019-11-25 12:16:53');
INSERT INTO `user` VALUES (30767924, 'heidudu', NULL, '54heidudu@gmail.com', 1, 0, 2, '{\"login\":\"heidudu\",\"id\":30767924,\"node_id\":\"MDQ6VXNlcjMwNzY3OTI0\",\"avatar_url\":\"https://avatars2.githubusercontent.com/u/30767924?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/heidudu\",\"html_url\":\"https://github.com/heidudu\",\"followers_url\":\"https://api.github.com/users/heidudu/followers\",\"following_url\":\"https://api.github.com/users/heidudu/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/heidudu/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/heidudu/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/heidudu/subscriptions\",\"organizations_url\":\"https://api.github.com/users/heidudu/orgs\",\"repos_url\":\"https://api.github.com/users/heidudu/repos\",\"events_url\":\"https://api.github.com/users/heidudu/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/heidudu/received_events\",\"type\":\"User\",\"site_admin\":false,\"name\":\"heidudu45\",\"company\":null,\"blog\":\"\",\"location\":null,\"email\":\"54heidudu@gmail.com\",\"hireable\":null,\"bio\":null,\"public_repos\":5,\"public_gists\":0,\"followers\":0,\"following\":16,\"created_at\":\"2017-08-06T07:43:42Z\",\"updated_at\":\"2019-08-26T09:24:59Z\"}', '2019-10-08 17:55:13', '2019-10-09 09:38:07');
INSERT INTO `user` VALUES (32535274, 'taleyoung', NULL, NULL, 1, 0, 2, '{\"login\":\"taleyoung\",\"id\":32535274,\"node_id\":\"MDQ6VXNlcjMyNTM1Mjc0\",\"avatar_url\":\"https://avatars1.githubusercontent.com/u/32535274?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/taleyoung\",\"html_url\":\"https://github.com/taleyoung\",\"followers_url\":\"https://api.github.com/users/taleyoung/followers\",\"following_url\":\"https://api.github.com/users/taleyoung/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/taleyoung/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/taleyoung/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/taleyoung/subscriptions\",\"organizations_url\":\"https://api.github.com/users/taleyoung/orgs\",\"repos_url\":\"https://api.github.com/users/taleyoung/repos\",\"events_url\":\"https://api.github.com/users/taleyoung/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/taleyoung/received_events\",\"type\":\"User\",\"site_admin\":false,\"name\":\"taleyoung\",\"company\":null,\"blog\":\"\",\"location\":null,\"email\":null,\"hireable\":null,\"bio\":null,\"public_repos\":13,\"public_gists\":0,\"followers\":9,\"following\":17,\"created_at\":\"2017-10-05T06:40:47Z\",\"updated_at\":\"2019-12-30T14:06:00Z\"}', '2020-01-09 13:34:33', '2020-01-09 13:34:33');
INSERT INTO `user` VALUES (33473651, 'HoseaLe', NULL, NULL, 1, 0, 2, '{\"login\":\"HoseaLE\",\"id\":33473651,\"node_id\":\"MDQ6VXNlcjMzNDczNjUx\",\"avatar_url\":\"https://avatars0.githubusercontent.com/u/33473651?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/HoseaLE\",\"html_url\":\"https://github.com/HoseaLE\",\"followers_url\":\"https://api.github.com/users/HoseaLE/followers\",\"following_url\":\"https://api.github.com/users/HoseaLE/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/HoseaLE/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/HoseaLE/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/HoseaLE/subscriptions\",\"organizations_url\":\"https://api.github.com/users/HoseaLE/orgs\",\"repos_url\":\"https://api.github.com/users/HoseaLE/repos\",\"events_url\":\"https://api.github.com/users/HoseaLE/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/HoseaLE/received_events\",\"type\":\"User\",\"site_admin\":false,\"name\":\"HoseaLe\",\"company\":null,\"blog\":\"\",\"location\":null,\"email\":null,\"hireable\":null,\"bio\":null,\"public_repos\":3,\"public_gists\":0,\"followers\":0,\"following\":0,\"created_at\":\"2017-11-08T03:24:32Z\",\"updated_at\":\"2019-10-01T11:31:33Z\"}', '2019-10-17 20:19:13', '2019-10-17 20:19:13');
INSERT INTO `user` VALUES (34113677, 'gershonv', NULL, 'gershonv@163.com', 1, 0, 2, '{\"login\":\"gershonv\",\"id\":34113677,\"node_id\":\"MDQ6VXNlcjM0MTEzNjc3\",\"avatar_url\":\"https://avatars2.githubusercontent.com/u/34113677?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/gershonv\",\"html_url\":\"https://github.com/gershonv\",\"followers_url\":\"https://api.github.com/users/gershonv/followers\",\"following_url\":\"https://api.github.com/users/gershonv/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/gershonv/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/gershonv/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/gershonv/subscriptions\",\"organizations_url\":\"https://api.github.com/users/gershonv/orgs\",\"repos_url\":\"https://api.github.com/users/gershonv/repos\",\"events_url\":\"https://api.github.com/users/gershonv/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/gershonv/received_events\",\"type\":\"User\",\"site_admin\":false,\"name\":\"gershonv\",\"company\":null,\"blog\":\"https://guodada.fun/\",\"location\":\"Guangzhou\",\"email\":\"gershonv@163.com\",\"hireable\":null,\"bio\":\"前端打杂人员，略微代码洁癖。\",\"public_repos\":26,\"public_gists\":0,\"followers\":110,\"following\":12,\"created_at\":\"2017-11-30T01:29:39Z\",\"updated_at\":\"2020-01-20T08:07:30Z\"}', '2019-09-19 14:00:23', '2020-01-20 16:09:47');
INSERT INTO `user` VALUES (34113678, '1', '$2a$10$MQy5EshqY4V4BC.u/LstouYEE6Qd7XpnkYEv78frF7qgVnD3wGtQO', '434358603@qq.com', 0, 0, 2, NULL, '2019-09-19 21:42:12', '2019-09-21 14:51:52');
INSERT INTO `user` VALUES (34642371, '南梦', NULL, NULL, 1, 0, 2, '{\"login\":\"Moocliu\",\"id\":34642371,\"node_id\":\"MDQ6VXNlcjM0NjQyMzcx\",\"avatar_url\":\"https://avatars1.githubusercontent.com/u/34642371?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/Moocliu\",\"html_url\":\"https://github.com/Moocliu\",\"followers_url\":\"https://api.github.com/users/Moocliu/followers\",\"following_url\":\"https://api.github.com/users/Moocliu/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/Moocliu/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/Moocliu/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/Moocliu/subscriptions\",\"organizations_url\":\"https://api.github.com/users/Moocliu/orgs\",\"repos_url\":\"https://api.github.com/users/Moocliu/repos\",\"events_url\":\"https://api.github.com/users/Moocliu/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/Moocliu/received_events\",\"type\":\"User\",\"site_admin\":false,\"name\":\"南梦\",\"company\":\"google\",\"blog\":\"\",\"location\":\"hangzhou\",\"email\":null,\"hireable\":null,\"bio\":\"Dreams always have to be fulfilled. Should one day come true?\",\"public_repos\":64,\"public_gists\":0,\"followers\":3,\"following\":11,\"created_at\":\"2017-12-18T07:10:32Z\",\"updated_at\":\"2019-08-06T01:51:36Z\"}', '2019-12-09 21:45:25', '2019-12-09 21:45:25');
INSERT INTO `user` VALUES (39449488, 'ggg', NULL, '434358603@qq.com', 0, 0, 2, '{\"login\":\"test6059\",\"id\":39449488,\"node_id\":\"MDQ6VXNlcjM5NDQ5NDg4\",\"avatar_url\":\"https://avatars3.githubusercontent.com/u/39449488?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/test6059\",\"html_url\":\"https://github.com/test6059\",\"followers_url\":\"https://api.github.com/users/test6059/followers\",\"following_url\":\"https://api.github.com/users/test6059/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/test6059/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/test6059/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/test6059/subscriptions\",\"organizations_url\":\"https://api.github.com/users/test6059/orgs\",\"repos_url\":\"https://api.github.com/users/test6059/repos\",\"events_url\":\"https://api.github.com/users/test6059/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/test6059/received_events\",\"type\":\"User\",\"site_admin\":false,\"name\":\"ggg\",\"company\":null,\"blog\":\"www.ggg2.com\",\"location\":null,\"email\":\"434358603@qq.com\",\"hireable\":null,\"bio\":null,\"public_repos\":4,\"public_gists\":0,\"followers\":0,\"following\":1,\"created_at\":\"2018-05-20T02:23:44Z\",\"updated_at\":\"2019-09-09T05:13:02Z\"}', '2019-09-19 22:00:24', '2019-09-21 14:51:51');
INSERT INTO `user` VALUES (40810885, 'liudehua', NULL, NULL, 1, 0, 2, '{\"login\":\"lzzqwe\",\"id\":40810885,\"node_id\":\"MDQ6VXNlcjQwODEwODg1\",\"avatar_url\":\"https://avatars2.githubusercontent.com/u/40810885?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/lzzqwe\",\"html_url\":\"https://github.com/lzzqwe\",\"followers_url\":\"https://api.github.com/users/lzzqwe/followers\",\"following_url\":\"https://api.github.com/users/lzzqwe/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/lzzqwe/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/lzzqwe/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/lzzqwe/subscriptions\",\"organizations_url\":\"https://api.github.com/users/lzzqwe/orgs\",\"repos_url\":\"https://api.github.com/users/lzzqwe/repos\",\"events_url\":\"https://api.github.com/users/lzzqwe/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/lzzqwe/received_events\",\"type\":\"User\",\"site_admin\":false,\"name\":\"liudehua\",\"company\":null,\"blog\":\"\",\"location\":null,\"email\":null,\"hireable\":null,\"bio\":\"2112\",\"public_repos\":19,\"public_gists\":0,\"followers\":2,\"following\":22,\"created_at\":\"2018-07-04T00:02:41Z\",\"updated_at\":\"2019-12-05T16:58:57Z\"}', '2019-12-06 11:03:29', '2019-12-06 11:03:29');
INSERT INTO `user` VALUES (42410507, '君吟', NULL, NULL, 1, 0, 2, '{\"login\":\"zmj0920\",\"id\":42410507,\"node_id\":\"MDQ6VXNlcjQyNDEwNTA3\",\"avatar_url\":\"https://avatars0.githubusercontent.com/u/42410507?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/zmj0920\",\"html_url\":\"https://github.com/zmj0920\",\"followers_url\":\"https://api.github.com/users/zmj0920/followers\",\"following_url\":\"https://api.github.com/users/zmj0920/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/zmj0920/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/zmj0920/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/zmj0920/subscriptions\",\"organizations_url\":\"https://api.github.com/users/zmj0920/orgs\",\"repos_url\":\"https://api.github.com/users/zmj0920/repos\",\"events_url\":\"https://api.github.com/users/zmj0920/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/zmj0920/received_events\",\"type\":\"User\",\"site_admin\":false,\"name\":\"君吟\",\"company\":null,\"blog\":\"\",\"location\":null,\"email\":null,\"hireable\":null,\"bio\":null,\"public_repos\":27,\"public_gists\":0,\"followers\":9,\"following\":16,\"created_at\":\"2018-08-15T12:54:21Z\",\"updated_at\":\"2019-10-02T05:26:51Z\"}', '2019-10-20 19:06:06', '2019-10-20 19:06:06');
INSERT INTO `user` VALUES (42688331, 'pengYigao', NULL, NULL, 1, 0, 2, '{\"login\":\"lazySageMan\",\"id\":42688331,\"node_id\":\"MDQ6VXNlcjQyNjg4MzMx\",\"avatar_url\":\"https://avatars3.githubusercontent.com/u/42688331?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/lazySageMan\",\"html_url\":\"https://github.com/lazySageMan\",\"followers_url\":\"https://api.github.com/users/lazySageMan/followers\",\"following_url\":\"https://api.github.com/users/lazySageMan/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/lazySageMan/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/lazySageMan/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/lazySageMan/subscriptions\",\"organizations_url\":\"https://api.github.com/users/lazySageMan/orgs\",\"repos_url\":\"https://api.github.com/users/lazySageMan/repos\",\"events_url\":\"https://api.github.com/users/lazySageMan/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/lazySageMan/received_events\",\"type\":\"User\",\"site_admin\":false,\"name\":\"pengYigao\",\"company\":null,\"blog\":\"https:lazysage.cn\",\"location\":null,\"email\":null,\"hireable\":null,\"bio\":null,\"public_repos\":29,\"public_gists\":0,\"followers\":3,\"following\":6,\"created_at\":\"2018-08-25T03:22:15Z\",\"updated_at\":\"2019-08-20T09:16:27Z\"}', '2019-09-21 14:32:41', '2019-09-21 14:32:41');
INSERT INTO `user` VALUES (42688332, 'lvli0401', '$2a$10$.qnDiDIn5W/267wXQ3T0CeHmvcMVVL077O7MrePkMqtpkI0.HZVEO', '2283268047@qq.com', 1, 0, 2, NULL, '2019-09-22 22:30:05', '2019-09-22 22:30:05');
INSERT INTO `user` VALUES (42688333, 'jianjieX', '$2a$10$Qg3edPIfRxn1V8eKjezLJuC/H2gvNGbSr3u/w4Ns95Hk1.4vKAgmK', 'jianjie_x@163.com', 1, 0, 2, NULL, '2019-09-23 09:25:33', '2019-09-23 09:25:33');
INSERT INTO `user` VALUES (42688334, '1e', '$2a$10$K.aixh6fwPrLYz3L09LR.eH7eitxLY8V2TY9odBKBs8aJsQPgMLEC', '123@qq.com', 1, 0, 2, NULL, '2019-09-23 09:36:33', '2019-09-23 09:36:33');
INSERT INTO `user` VALUES (42688335, 'fengxie', '$2a$10$sgmtuQhcnuGTqhuo5qslbuL/FujIfy8Ng.es8sIjEB7uEizjwkdem', '1015806955@qq.com', 1, 0, 2, NULL, '2019-09-23 14:10:06', '2019-09-23 14:10:06');
INSERT INTO `user` VALUES (42688336, '123', '$2a$10$rowq3NRDVvvG8UD9Yar/P.mQcn8BvJjESj01sUQfqIjxb5qi7FBXC', '1@qq.com', 1, 0, 2, NULL, '2019-09-27 16:28:58', '2019-09-27 16:28:58');
INSERT INTO `user` VALUES (42688337, 'mll', '$2a$10$jDW6v0UFquZ3Y9GuL92qbuYTIQ7lk1uttaukIbNB2CrosjAi33F4S', '539900136@qq.com', 1, 0, 2, NULL, '2019-10-07 16:01:31', '2019-10-07 16:01:31');
INSERT INTO `user` VALUES (42688338, 'wangwei', '$2a$10$Lwy7f6YCdN2YUL.8mIhlXeznRbu8Ewg2Kk1I2bRKRmGBp7liJErXu', 'wangweiruning@163.com', 1, 0, 2, NULL, '2019-10-12 16:19:28', '2019-10-12 16:19:28');
INSERT INTO `user` VALUES (42688339, 'hanyu', '$2a$10$D60F/.tbe1nmCTo491trROFyKUbxIW9xuco.bJ.u1oma90HaXwrS6', '849488233@qq.com', 1, 0, 2, NULL, '2019-10-24 09:50:16', '2019-10-24 09:50:16');
INSERT INTO `user` VALUES (43398517, 'it_daily', NULL, NULL, 1, 0, 2, '{\"login\":\"kryszna\",\"id\":43398517,\"node_id\":\"MDQ6VXNlcjQzMzk4NTE3\",\"avatar_url\":\"https://avatars1.githubusercontent.com/u/43398517?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/kryszna\",\"html_url\":\"https://github.com/kryszna\",\"followers_url\":\"https://api.github.com/users/kryszna/followers\",\"following_url\":\"https://api.github.com/users/kryszna/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/kryszna/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/kryszna/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/kryszna/subscriptions\",\"organizations_url\":\"https://api.github.com/users/kryszna/orgs\",\"repos_url\":\"https://api.github.com/users/kryszna/repos\",\"events_url\":\"https://api.github.com/users/kryszna/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/kryszna/received_events\",\"type\":\"User\",\"site_admin\":false,\"name\":\"it_daily\",\"company\":null,\"blog\":\"\",\"location\":null,\"email\":null,\"hireable\":null,\"bio\":null,\"public_repos\":2,\"public_gists\":0,\"followers\":0,\"following\":0,\"created_at\":\"2018-09-19T05:09:52Z\",\"updated_at\":\"2019-06-21T04:46:11Z\"}', '2019-10-31 14:28:50', '2019-10-31 14:28:50');
INSERT INTO `user` VALUES (43398518, '16110032', '$2a$10$tTQhXLNrt0IsNDmAl21DwOrVHrXzzMr6buJH/vslYXNJHoqL0ZM4.', '2671590605@qq.com', 1, 0, 2, NULL, '2019-11-09 21:44:05', '2019-11-09 21:44:05');
INSERT INTO `user` VALUES (43398519, 'ebb', '$2a$10$ZXtSj.oJvn1V7DQw5cvWMe0aDJtPeAloooUkLB3bdOpweqlcoRWSS', '1103731421@qq.com', 1, 0, 2, NULL, '2019-11-13 16:06:56', '2019-11-13 16:06:56');
INSERT INTO `user` VALUES (43398520, 'soymikey', '$2a$10$.nCeALXJcPfzBO8bej7yTewcU624SjzHSuyRovlfHrncr2PS.h6NG', 'mqzheng91@hotmail.com', 1, 0, 2, NULL, '2019-11-14 09:59:14', '2019-11-14 09:59:14');
INSERT INTO `user` VALUES (43398521, 'admin', '$2a$10$o/FcAfOOFOYUJ5LvJtgVn.Jw/ZnfeDItLDWRLGIawJsoWJ47ckPfW', 'ly2883640@163.com', 1, 0, 2, NULL, '2019-11-14 19:32:15', '2019-11-14 19:32:15');
INSERT INTO `user` VALUES (43398522, 'gudada', '$2a$10$7Jy3r/dfGh.pnVegRBBsceO042YOUaqsWit20.CAVML1nePjp/7Ge', '2435838846@qq.com', 1, 0, 2, NULL, '2019-11-16 11:34:22', '2019-11-16 11:34:22');
INSERT INTO `user` VALUES (43398523, 'dachunchun', '$2a$10$LmWkjAgQIro.PhHHo0Kq/eovfN7kOZdBchE28EIM6mW3wCIDuAKti', '524112857@qq.com', 1, 0, 2, NULL, '2019-11-18 11:07:27', '2019-11-18 11:07:27');
INSERT INTO `user` VALUES (43398524, 'zhouzhouzhou', '$2a$10$b7HMeltRH69Zbrh1ZsDDmusGrAdNWDF441j76Ma1MLN8MmS2sluxi', 'ss@qq.com', 1, 0, 2, NULL, '2019-11-19 11:10:22', '2019-11-19 11:10:22');
INSERT INTO `user` VALUES (43398525, 'smz8023', '$2a$10$j7ZzYOxf9xBUH3lgrcFr8u/0PHWVlu93hTNDh/Du8Y/nmi3/e7lYK', '345398278@qq.com', 1, 0, 2, NULL, '2019-11-25 13:56:23', '2019-11-25 13:56:23');
INSERT INTO `user` VALUES (43398526, 'a', '$2a$10$J5weu.IeK25nBvaVE7Q2J.OsWW5FuXvofFBhzsVBA2hEsoHJe21yC', '78667663@qq.com', 1, 0, 2, NULL, '2019-11-26 09:30:23', '2019-11-26 09:30:23');
INSERT INTO `user` VALUES (43398529, 'fuck_guo_dada', '$2a$10$lOkKir2WhuJfaE/zkVeQge3EjM38gX3EpWJxvXWFPKygRuqBuirCm', 'gdd@sb.com', 1, 1, 2, NULL, '2019-11-27 19:39:49', '2019-11-27 21:12:33');
INSERT INTO `user` VALUES (43398530, 'fuck_guo_dada2', '$2a$10$ppevAh.g92jaaL/dbXnSEecAlzIX73Zn3zsyu1uqQn0qmFwNCNNM.', 'gdd@sb2.com', 1, 1, 2, NULL, '2019-11-28 15:01:39', '2019-11-29 14:38:11');
INSERT INTO `user` VALUES (43398531, 'fuck_guo_dada3', '$2a$10$BfPe38.kXAzIM0AGcSAGKey7e1ioYAGbEDTkeKgwUl0cUhcfbcQle', 'gdd@sb22.com', 1, 0, 2, NULL, '2019-11-29 15:31:31', '2019-12-02 13:58:17');
INSERT INTO `user` VALUES (43398532, '17073001', '$2a$10$ZKnwPndhdNE45bxHynjQVOZwMbD3tkExAs6ui7SivR2vOQ9CmnqfK', '2621949203@qq.com', 1, 0, 2, NULL, '2019-12-02 21:10:24', '2019-12-02 21:10:24');
INSERT INTO `user` VALUES (43398533, '小张', '$2a$10$BNm/ApGXAEoEByLudkMuqeEORfW9xhGZhfAIDgqmPEmo6dk5KX3ke', '1472610078@qq.com', 1, 0, 2, NULL, '2019-12-03 14:13:20', '2019-12-03 14:13:20');
INSERT INTO `user` VALUES (43398534, 'LeoCode', '$2a$10$puMgp5OhnrlVQNeVkptWUeeLspm00UCwsKKliw8zFFjMt8ogN/WI2', 'leofe200@gmail.com', 1, 0, 2, NULL, '2019-12-05 22:15:56', '2019-12-05 22:15:56');
INSERT INTO `user` VALUES (43398535, '13926400154', '$2a$10$Y0MEEQtzEIEvXWltKaTH1eYQ1E0iEYDz.8CuEwjK40xS86tsuSJjO', '375640259@qq.com', 1, 0, 2, NULL, '2019-12-13 15:18:21', '2019-12-13 15:18:21');
INSERT INTO `user` VALUES (43398536, 'luoxiaoxu', '$2a$10$jLpe0EBmIBdHnm79KP4IMOs3KkAY1rHAsw9yqBv0QGFUjv1.GtUgq', '123345632@qq.com', 1, 0, 2, NULL, '2019-12-16 22:17:27', '2019-12-16 22:17:27');
INSERT INTO `user` VALUES (43398537, 'Lijunqin', '$2a$10$pJRs5YWrKHwZ7XmJ91wyNemnaPeWBwQ3Dt2QfW.2JX6Eoy5ODrrCG', 'ilssn@icloud.com', 1, 0, 2, NULL, '2019-12-17 11:56:18', '2019-12-17 11:56:18');
INSERT INTO `user` VALUES (43398538, 'tomoe', '$2a$10$sVbwyvDmTA/AwqPDdEyh1Oi5n4CV7ydHJ7i.XXf/.aHW2aXlkzNx.', '123456@qq.com', 1, 0, 2, NULL, '2019-12-19 14:34:17', '2019-12-19 14:34:17');
INSERT INTO `user` VALUES (47529550, 'Gjw', NULL, NULL, 1, 0, 2, '{\"login\":\"KL-James\",\"id\":47529550,\"node_id\":\"MDQ6VXNlcjQ3NTI5NTUw\",\"avatar_url\":\"https://avatars1.githubusercontent.com/u/47529550?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/KL-James\",\"html_url\":\"https://github.com/KL-James\",\"followers_url\":\"https://api.github.com/users/KL-James/followers\",\"following_url\":\"https://api.github.com/users/KL-James/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/KL-James/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/KL-James/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/KL-James/subscriptions\",\"organizations_url\":\"https://api.github.com/users/KL-James/orgs\",\"repos_url\":\"https://api.github.com/users/KL-James/repos\",\"events_url\":\"https://api.github.com/users/KL-James/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/KL-James/received_events\",\"type\":\"User\",\"site_admin\":false,\"name\":\"Gjw\",\"company\":null,\"blog\":\"\",\"location\":\"ShanDong\",\"email\":null,\"hireable\":null,\"bio\":null,\"public_repos\":22,\"public_gists\":0,\"followers\":1,\"following\":6,\"created_at\":\"2019-02-11T14:19:33Z\",\"updated_at\":\"2019-12-22T05:42:20Z\"}', '2019-12-22 16:20:47', '2019-12-22 16:20:47');
INSERT INTO `user` VALUES (47529551, '375640259@qq.com', '$2a$10$h0rRTPh3/PMzUOj7ag9e9eIGbRG2Uu2Is1mNEzSekuEh6JCPljQgW', '1798372607@qq.com', 1, 0, 2, NULL, '2019-12-25 15:42:18', '2019-12-25 15:42:18');
INSERT INTO `user` VALUES (47529552, 'dfdf', '$2a$10$7DzH/teTYu38NeM2T7A0Z.7UNDs.wsiFZMTaW7afhlb2wZeqn8Ndq', 'dfdfd@16.com', 1, 0, 2, NULL, '2020-01-03 12:51:50', '2020-01-03 12:51:50');
INSERT INTO `user` VALUES (47529553, '2089251416', '$2a$10$7bGnqEOvexkCt.BdC/c15uoANjdWBIzzM9LWtlQc1zSVPA9qDqYyi', '2089251416@qq.com', 1, 0, 2, NULL, '2020-01-06 16:08:49', '2020-01-06 16:08:49');
INSERT INTO `user` VALUES (47529554, '狗日的郭大大', '$2a$10$32g/xnjc/y73UYu1z5LPaOWoTBjsCbMlGhBlaiTvBITzR9lzTf3t2', 'liuqiang95@yeah.net', 1, 0, 2, NULL, '2020-01-20 11:20:36', '2022-06-04 21:40:09');
INSERT INTO `user` VALUES (47529555, 'gaoxin', '$2a$10$pb9AEG0OYJ9WnvjZixu/MuuNOsuSj1sTW6R92ocyJ/ICEZ/7OY7H.', '1341593564@qq.com', 1, 0, 1, NULL, '2022-06-04 20:29:00', '2022-06-04 20:29:00');

-- ----------------------------
-- Triggers structure for table article
-- ----------------------------
DROP TRIGGER IF EXISTS `uuid`;
delimiter ;;
CREATE TRIGGER `uuid` BEFORE INSERT ON `article` FOR EACH ROW set new.uuid=REPLACE(UUID(),'-','')
;;
delimiter ;

SET FOREIGN_KEY_CHECKS = 1;
